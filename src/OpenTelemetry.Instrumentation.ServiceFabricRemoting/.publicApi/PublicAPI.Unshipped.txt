OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.EnrichAtClientFromRequest.get -> System.Action<System.Diagnostics.Activity!, Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage!>?
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.EnrichAtClientFromRequest.set -> void
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.EnrichAtClientFromResponse.get -> System.Action<System.Diagnostics.Activity!, Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingResponseMessage!, System.Exception!>?
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.EnrichAtClientFromResponse.set -> void
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.Filter.get -> System.Func<Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingRequestMessage!, bool>?
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.Filter.set -> void
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.RecordException.get -> bool
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.RecordException.set -> void
OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions.ServiceFabricRemotingInstrumentationOptions() -> void
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingClientFactory
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingClientFactory.ClientConnected -> System.EventHandler<Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs<Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient!>!>!
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingClientFactory.ClientDisconnected -> System.EventHandler<Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs<Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient!>!>!
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingClientFactory.GetClientAsync(System.Fabric.ResolvedServicePartition! previousRsp, Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector targetReplicaSelector, string! listenerName, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings! retrySettings, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient!>!
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingClientFactory.GetClientAsync(System.Uri! serviceUri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey! partitionKey, Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector targetReplicaSelector, string! listenerName, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings! retrySettings, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient!>!
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingClientFactory.GetRemotingMessageBodyFactory() -> Microsoft.ServiceFabric.Services.Remoting.V2.IServiceRemotingMessageBodyFactory!
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingClientFactory.ReportOperationExceptionAsync(Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClient! client, Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation! exceptionInformation, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings! retrySettings, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl!>!
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingClientFactory.TraceContextEnrichedActorRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.FabricTransport.FabricTransportRemotingSettings! fabricTransportRemotingSettings, Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler! callbackMessageHandler) -> void
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingProviderAttribute
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingProviderAttribute.TraceContextEnrichedActorRemotingProviderAttribute() -> void
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorServiceV2RemotingDispatcher
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedServiceRemotingClientAdapter
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedServiceRemotingClientFactory
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedServiceRemotingProviderAttribute
OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedServiceV2RemotingDispatcher
OpenTelemetry.Trace.TracerProviderBuilderExtensions
override OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingProviderAttribute.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingCallbackMessageHandler! callbackMessageHandler) -> Microsoft.ServiceFabric.Services.Remoting.V2.Client.IServiceRemotingClientFactory!
override OpenTelemetry.Instrumentation.ServiceFabricRemoting.TraceContextEnrichedActorRemotingProviderAttribute.CreateServiceRemotingListeners() -> System.Collections.Generic.Dictionary<string!, System.Func<Microsoft.ServiceFabric.Actors.Runtime.ActorService!, Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener!>!>!
static OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddServiceFabricRemotingInstrumentation(this OpenTelemetry.Trace.TracerProviderBuilder! tracerProviderBuilder, System.Action<OpenTelemetry.Instrumentation.ServiceFabricRemoting.ServiceFabricRemotingInstrumentationOptions!>? configure) -> OpenTelemetry.Trace.TracerProviderBuilder!
