// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// <auto-generated>This file has been auto generated from 'src\OpenTelemetry.SemanticConventions\scripts\templates\registry\SemanticConventionsAttributes.cs.j2' </auto-generated>

#nullable enable

#pragma warning disable CS1570 // XML comment has badly formed XML

namespace OpenTelemetry.SemanticConventions;

/// <summary>
/// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
/// </summary>
public static class GenAiAttributes
{
    /// <summary>
    /// Free-form description of the GenAI agent provided by the application.
    /// </summary>
    public const string AttributeGenAiAgentDescription = "gen_ai.agent.description";

    /// <summary>
    /// The unique identifier of the GenAI agent.
    /// </summary>
    public const string AttributeGenAiAgentId = "gen_ai.agent.id";

    /// <summary>
    /// Human-readable name of the GenAI agent provided by the application.
    /// </summary>
    public const string AttributeGenAiAgentName = "gen_ai.agent.name";

    /// <summary>
    /// Deprecated, use Event API to report completions contents.
    /// </summary>
    [Obsolete("Removed, no replacement at this time.")]
    public const string AttributeGenAiCompletion = "gen_ai.completion";

    /// <summary>
    /// The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.
    /// </summary>
    public const string AttributeGenAiConversationId = "gen_ai.conversation.id";

    /// <summary>
    /// The data source identifier.
    /// </summary>
    /// <remarks>
    /// Data sources are used by AI agents and RAG applications to store grounding data. A data source may be an external database, object store, document collection, website, or any other storage system used by the GenAI agent or application. The <c>gen_ai.data_source.id</c> SHOULD match the identifier used by the GenAI system rather than a name specific to the external storage, such as a database or object store. Semantic conventions referencing <c>gen_ai.data_source.id</c> MAY also leverage additional attributes, such as <c>db.*</c>, to further identify and describe the data source.
    /// </remarks>
    public const string AttributeGenAiDataSourceId = "gen_ai.data_source.id";

    /// <summary>
    /// The chat history provided to the model as an input.
    /// </summary>
    /// <remarks>
    /// Instrumentations MUST follow <a href="/docs/gen-ai/gen-ai-input-messages.json">Input messages JSON schema</a>.
    /// When the attribute is recorded on events, it MUST be recorded in structured
    /// form. When recorded on spans, it MAY be recorded as a JSON string if structured
    /// format is not supported and SHOULD be recorded in structured form otherwise.
    /// <p>
    /// Messages MUST be provided in the order they were sent to the model.
    /// Instrumentations MAY provide a way for users to filter or truncate
    /// input messages.
    /// <blockquote>
    /// [!Warning]
    /// This attribute is likely to contain sensitive information including user/PII data.</blockquote>
    /// <p>
    /// See <a href="/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes">Recording content on attributes</a>
    /// section for more details.
    /// </remarks>
    public const string AttributeGenAiInputMessages = "gen_ai.input.messages";

    /// <summary>
    /// Deprecated, use <c>gen_ai.output.type</c>.
    /// </summary>
    [Obsolete("Replaced by <c>gen_ai.output.type</c>.")]
    public const string AttributeGenAiOpenaiRequestResponseFormat = "gen_ai.openai.request.response_format";

    /// <summary>
    /// Deprecated, use <c>gen_ai.request.seed</c>.
    /// </summary>
    [Obsolete("Replaced by <c>gen_ai.request.seed</c>.")]
    public const string AttributeGenAiOpenaiRequestSeed = "gen_ai.openai.request.seed";

    /// <summary>
    /// Deprecated, use <c>openai.request.service_tier</c>.
    /// </summary>
    [Obsolete("Replaced by <c>openai.request.service_tier</c>.")]
    public const string AttributeGenAiOpenaiRequestServiceTier = "gen_ai.openai.request.service_tier";

    /// <summary>
    /// Deprecated, use <c>openai.response.service_tier</c>.
    /// </summary>
    [Obsolete("Replaced by <c>openai.response.service_tier</c>.")]
    public const string AttributeGenAiOpenaiResponseServiceTier = "gen_ai.openai.response.service_tier";

    /// <summary>
    /// Deprecated, use <c>openai.response.system_fingerprint</c>.
    /// </summary>
    [Obsolete("Replaced by <c>openai.response.system_fingerprint</c>.")]
    public const string AttributeGenAiOpenaiResponseSystemFingerprint = "gen_ai.openai.response.system_fingerprint";

    /// <summary>
    /// The name of the operation being performed.
    /// </summary>
    /// <remarks>
    /// If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.
    /// </remarks>
    public const string AttributeGenAiOperationName = "gen_ai.operation.name";

    /// <summary>
    /// Messages returned by the model where each message represents a specific model response (choice, candidate).
    /// </summary>
    /// <remarks>
    /// Instrumentations MUST follow <a href="/docs/gen-ai/gen-ai-output-messages.json">Output messages JSON schema</a>
    /// <p>
    /// Each message represents a single output choice/candidate generated by
    /// the model. Each message corresponds to exactly one generation
    /// (choice/candidate) and vice versa - one choice cannot be split across
    /// multiple messages or one message cannot contain parts from multiple choices.
    /// <p>
    /// When the attribute is recorded on events, it MUST be recorded in structured
    /// form. When recorded on spans, it MAY be recorded as a JSON string if structured
    /// format is not supported and SHOULD be recorded in structured form otherwise.
    /// <p>
    /// Instrumentations MAY provide a way for users to filter or truncate
    /// output messages.
    /// <blockquote>
    /// [!Warning]
    /// This attribute is likely to contain sensitive information including user/PII data.</blockquote>
    /// <p>
    /// See <a href="/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes">Recording content on attributes</a>
    /// section for more details.
    /// </remarks>
    public const string AttributeGenAiOutputMessages = "gen_ai.output.messages";

    /// <summary>
    /// Represents the content type requested by the client.
    /// </summary>
    /// <remarks>
    /// This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
    /// This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
    /// Additional output format details may be recorded in the future in the <c>gen_ai.output.{type}.*</c> attributes.
    /// </remarks>
    public const string AttributeGenAiOutputType = "gen_ai.output.type";

    /// <summary>
    /// Deprecated, use Event API to report prompt contents.
    /// </summary>
    [Obsolete("Removed, no replacement at this time.")]
    public const string AttributeGenAiPrompt = "gen_ai.prompt";

    /// <summary>
    /// The Generative AI provider as identified by the client or server instrumentation.
    /// </summary>
    /// <remarks>
    /// The attribute SHOULD be set based on the instrumentation's best
    /// knowledge and may differ from the actual model provider.
    /// <p>
    /// Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
    /// are accessible using the OpenAI REST API and corresponding client libraries,
    /// but may proxy or host models from different providers.
    /// <p>
    /// The <c>gen_ai.request.model</c>, <c>gen_ai.response.model</c>, and <c>server.address</c>
    /// attributes may help identify the actual system in use.
    /// <p>
    /// The <c>gen_ai.provider.name</c> attribute acts as a discriminator that
    /// identifies the GenAI telemetry format flavor specific to that provider
    /// within GenAI semantic conventions.
    /// It SHOULD be set consistently with provider-specific attributes and signals.
    /// For example, GenAI spans, metrics, and events related to AWS Bedrock
    /// should have the <c>gen_ai.provider.name</c> set to <c>aws.bedrock</c> and include
    /// applicable <c>aws.bedrock.*</c> attributes and are not expected to include
    /// <c>openai.*</c> attributes.
    /// </remarks>
    public const string AttributeGenAiProviderName = "gen_ai.provider.name";

    /// <summary>
    /// The target number of candidate completions to return.
    /// </summary>
    public const string AttributeGenAiRequestChoiceCount = "gen_ai.request.choice.count";

    /// <summary>
    /// The encoding formats requested in an embeddings operation, if specified.
    /// </summary>
    /// <remarks>
    /// In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.
    /// </remarks>
    public const string AttributeGenAiRequestEncodingFormats = "gen_ai.request.encoding_formats";

    /// <summary>
    /// The frequency penalty setting for the GenAI request.
    /// </summary>
    public const string AttributeGenAiRequestFrequencyPenalty = "gen_ai.request.frequency_penalty";

    /// <summary>
    /// The maximum number of tokens the model generates for a request.
    /// </summary>
    public const string AttributeGenAiRequestMaxTokens = "gen_ai.request.max_tokens";

    /// <summary>
    /// The name of the GenAI model a request is being made to.
    /// </summary>
    public const string AttributeGenAiRequestModel = "gen_ai.request.model";

    /// <summary>
    /// The presence penalty setting for the GenAI request.
    /// </summary>
    public const string AttributeGenAiRequestPresencePenalty = "gen_ai.request.presence_penalty";

    /// <summary>
    /// Requests with same seed value more likely to return same result.
    /// </summary>
    public const string AttributeGenAiRequestSeed = "gen_ai.request.seed";

    /// <summary>
    /// List of sequences that the model will use to stop generating further tokens.
    /// </summary>
    public const string AttributeGenAiRequestStopSequences = "gen_ai.request.stop_sequences";

    /// <summary>
    /// The temperature setting for the GenAI request.
    /// </summary>
    public const string AttributeGenAiRequestTemperature = "gen_ai.request.temperature";

    /// <summary>
    /// The top_k sampling setting for the GenAI request.
    /// </summary>
    public const string AttributeGenAiRequestTopK = "gen_ai.request.top_k";

    /// <summary>
    /// The top_p sampling setting for the GenAI request.
    /// </summary>
    public const string AttributeGenAiRequestTopP = "gen_ai.request.top_p";

    /// <summary>
    /// Array of reasons the model stopped generating tokens, corresponding to each generation received.
    /// </summary>
    public const string AttributeGenAiResponseFinishReasons = "gen_ai.response.finish_reasons";

    /// <summary>
    /// The unique identifier for the completion.
    /// </summary>
    public const string AttributeGenAiResponseId = "gen_ai.response.id";

    /// <summary>
    /// The name of the model that generated the response.
    /// </summary>
    public const string AttributeGenAiResponseModel = "gen_ai.response.model";

    /// <summary>
    /// Deprecated, use <c>gen_ai.provider.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
    public const string AttributeGenAiSystem = "gen_ai.system";

    /// <summary>
    /// The system message or instructions provided to the GenAI model separately from the chat history.
    /// </summary>
    /// <remarks>
    /// This attribute SHOULD be used when the corresponding provider or API
    /// allows to provide system instructions or messages separately from the
    /// chat history.
    /// <p>
    /// Instructions that are part of the chat history SHOULD be recorded in
    /// <c>gen_ai.input.messages</c> attribute instead.
    /// <p>
    /// Instrumentations MUST follow <a href="/docs/gen-ai/gen-ai-system-instructions.json">System instructions JSON schema</a>.
    /// <p>
    /// When recorded on spans, it MAY be recorded as a JSON string if structured
    /// format is not supported and SHOULD be recorded in structured form otherwise.
    /// <p>
    /// Instrumentations MAY provide a way for users to filter or truncate
    /// system instructions.
    /// <blockquote>
    /// [!Warning]
    /// This attribute may contain sensitive information.</blockquote>
    /// <p>
    /// See <a href="/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes">Recording content on attributes</a>
    /// section for more details.
    /// </remarks>
    public const string AttributeGenAiSystemInstructions = "gen_ai.system_instructions";

    /// <summary>
    /// The type of token being counted.
    /// </summary>
    public const string AttributeGenAiTokenType = "gen_ai.token.type";

    /// <summary>
    /// The tool call identifier.
    /// </summary>
    public const string AttributeGenAiToolCallId = "gen_ai.tool.call.id";

    /// <summary>
    /// The tool description.
    /// </summary>
    public const string AttributeGenAiToolDescription = "gen_ai.tool.description";

    /// <summary>
    /// Name of the tool utilized by the agent.
    /// </summary>
    public const string AttributeGenAiToolName = "gen_ai.tool.name";

    /// <summary>
    /// Type of the tool utilized by the agent.
    /// </summary>
    /// <remarks>
    /// Extension: A tool executed on the agent-side to directly call external APIs, bridging the gap between the agent and real-world systems.
    /// Agent-side operations involve actions that are performed by the agent on the server or within the agent's controlled environment.
    /// Function: A tool executed on the client-side, where the agent generates parameters for a predefined function, and the client executes the logic.
    /// Client-side operations are actions taken on the user's end or within the client application.
    /// Datastore: A tool used by the agent to access and query structured or unstructured external data for retrieval-augmented tasks or knowledge updates.
    /// </remarks>
    public const string AttributeGenAiToolType = "gen_ai.tool.type";

    /// <summary>
    /// Deprecated, use <c>gen_ai.usage.output_tokens</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>gen_ai.usage.output_tokens</c>.")]
    public const string AttributeGenAiUsageCompletionTokens = "gen_ai.usage.completion_tokens";

    /// <summary>
    /// The number of tokens used in the GenAI input (prompt).
    /// </summary>
    public const string AttributeGenAiUsageInputTokens = "gen_ai.usage.input_tokens";

    /// <summary>
    /// The number of tokens used in the GenAI response (completion).
    /// </summary>
    public const string AttributeGenAiUsageOutputTokens = "gen_ai.usage.output_tokens";

    /// <summary>
    /// Deprecated, use <c>gen_ai.usage.input_tokens</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>gen_ai.usage.input_tokens</c>.")]
    public const string AttributeGenAiUsagePromptTokens = "gen_ai.usage.prompt_tokens";

    /// <summary>
    /// Deprecated, use <c>gen_ai.output.type</c>.
    /// </summary>
    [Obsolete("Replaced by <c>gen_ai.output.type</c>.")]
    public static class GenAiOpenaiRequestResponseFormatValues
    {
        /// <summary>
        /// Text response format.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.output.type</c>.")]
        public const string Text = "text";

        /// <summary>
        /// JSON object response format.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.output.type</c>.")]
        public const string JsonObject = "json_object";

        /// <summary>
        /// JSON schema response format.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.output.type</c>.")]
        public const string JsonSchema = "json_schema";
    }

    /// <summary>
    /// Deprecated, use <c>openai.request.service_tier</c>.
    /// </summary>
    [Obsolete("Replaced by <c>openai.request.service_tier</c>.")]
    public static class GenAiOpenaiRequestServiceTierValues
    {
        /// <summary>
        /// The system will utilize scale tier credits until they are exhausted.
        /// </summary>
        [Obsolete("Replaced by <c>openai.request.service_tier</c>.")]
        public const string Auto = "auto";

        /// <summary>
        /// The system will utilize the default scale tier.
        /// </summary>
        [Obsolete("Replaced by <c>openai.request.service_tier</c>.")]
        public const string Default = "default";
    }

    /// <summary>
    /// The name of the operation being performed.
    /// </summary>
    public static class GenAiOperationNameValues
    {
        /// <summary>
        /// Chat completion operation such as <a href="https://platform.openai.com/docs/api-reference/chat">OpenAI Chat API</a>.
        /// </summary>
        public const string Chat = "chat";

        /// <summary>
        /// Multimodal content generation operation such as <a href="https://ai.google.dev/api/generate-content">Gemini Generate Content</a>.
        /// </summary>
        public const string GenerateContent = "generate_content";

        /// <summary>
        /// Text completions operation such as <a href="https://platform.openai.com/docs/api-reference/completions">OpenAI Completions API (Legacy)</a>.
        /// </summary>
        public const string TextCompletion = "text_completion";

        /// <summary>
        /// Embeddings operation such as <a href="https://platform.openai.com/docs/api-reference/embeddings/create">OpenAI Create embeddings API</a>.
        /// </summary>
        public const string Embeddings = "embeddings";

        /// <summary>
        /// Create GenAI agent.
        /// </summary>
        public const string CreateAgent = "create_agent";

        /// <summary>
        /// Invoke GenAI agent.
        /// </summary>
        public const string InvokeAgent = "invoke_agent";

        /// <summary>
        /// Execute a tool.
        /// </summary>
        public const string ExecuteTool = "execute_tool";
    }

    /// <summary>
    /// Represents the content type requested by the client.
    /// </summary>
    public static class GenAiOutputTypeValues
    {
        /// <summary>
        /// Plain text.
        /// </summary>
        public const string Text = "text";

        /// <summary>
        /// JSON object with known or unknown schema.
        /// </summary>
        public const string Json = "json";

        /// <summary>
        /// Image.
        /// </summary>
        public const string Image = "image";

        /// <summary>
        /// Speech.
        /// </summary>
        public const string Speech = "speech";
    }

    /// <summary>
    /// The Generative AI provider as identified by the client or server instrumentation.
    /// </summary>
    public static class GenAiProviderNameValues
    {
        /// <summary>
        /// <a href="https://openai.com/">OpenAI</a>.
        /// </summary>
        public const string Openai = "openai";

        /// <summary>
        /// Any Google generative AI endpoint.
        /// </summary>
        public const string GcpGenAi = "gcp.gen_ai";

        /// <summary>
        /// <a href="https://cloud.google.com/vertex-ai">Vertex AI</a>.
        /// </summary>
        public const string GcpVertexAi = "gcp.vertex_ai";

        /// <summary>
        /// <a href="https://cloud.google.com/products/gemini">Gemini</a>.
        /// </summary>
        public const string GcpGemini = "gcp.gemini";

        /// <summary>
        /// <a href="https://www.anthropic.com/">Anthropic</a>.
        /// </summary>
        public const string Anthropic = "anthropic";

        /// <summary>
        /// <a href="https://cohere.com/">Cohere</a>.
        /// </summary>
        public const string Cohere = "cohere";

        /// <summary>
        /// Azure AI Inference.
        /// </summary>
        public const string AzureAiInference = "azure.ai.inference";

        /// <summary>
        /// <a href="https://azure.microsoft.com/products/ai-services/openai-service/">Azure OpenAI</a>.
        /// </summary>
        public const string AzureAiOpenai = "azure.ai.openai";

        /// <summary>
        /// <a href="https://www.ibm.com/products/watsonx-ai">IBM Watsonx AI</a>.
        /// </summary>
        public const string IbmWatsonxAi = "ibm.watsonx.ai";

        /// <summary>
        /// <a href="https://aws.amazon.com/bedrock">AWS Bedrock</a>.
        /// </summary>
        public const string AwsBedrock = "aws.bedrock";

        /// <summary>
        /// <a href="https://www.perplexity.ai/">Perplexity</a>.
        /// </summary>
        public const string Perplexity = "perplexity";

        /// <summary>
        /// <a href="https://x.ai/">xAI</a>.
        /// </summary>
        public const string XAi = "x_ai";

        /// <summary>
        /// <a href="https://www.deepseek.com/">DeepSeek</a>.
        /// </summary>
        public const string Deepseek = "deepseek";

        /// <summary>
        /// <a href="https://groq.com/">Groq</a>.
        /// </summary>
        public const string Groq = "groq";

        /// <summary>
        /// <a href="https://mistral.ai/">Mistral AI</a>.
        /// </summary>
        public const string MistralAi = "mistral_ai";
    }

    /// <summary>
    /// Deprecated, use <c>gen_ai.provider.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
    public static class GenAiSystemValues
    {
        /// <summary>
        /// OpenAI.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string Openai = "openai";

        /// <summary>
        /// Any Google generative AI endpoint.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string GcpGenAi = "gcp.gen_ai";

        /// <summary>
        /// Vertex AI.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string GcpVertexAi = "gcp.vertex_ai";

        /// <summary>
        /// Gemini.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string GcpGemini = "gcp.gemini";

        /// <summary>
        /// Vertex AI.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string VertexAi = "vertex_ai";

        /// <summary>
        /// Gemini.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string Gemini = "gemini";

        /// <summary>
        /// Anthropic.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string Anthropic = "anthropic";

        /// <summary>
        /// Cohere.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string Cohere = "cohere";

        /// <summary>
        /// Azure AI Inference.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string AzAiInference = "az.ai.inference";

        /// <summary>
        /// Azure OpenAI.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string AzAiOpenai = "az.ai.openai";

        /// <summary>
        /// Azure AI Inference.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string AzureAiInference = "azure.ai.inference";

        /// <summary>
        /// Azure OpenAI.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string AzureAiOpenai = "azure.ai.openai";

        /// <summary>
        /// IBM Watsonx AI.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string IbmWatsonxAi = "ibm.watsonx.ai";

        /// <summary>
        /// AWS Bedrock.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string AwsBedrock = "aws.bedrock";

        /// <summary>
        /// Perplexity.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string Perplexity = "perplexity";

        /// <summary>
        /// xAI.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string Xai = "xai";

        /// <summary>
        /// DeepSeek.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string Deepseek = "deepseek";

        /// <summary>
        /// Groq.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string Groq = "groq";

        /// <summary>
        /// Mistral AI.
        /// </summary>
        [Obsolete("Replaced by <c>gen_ai.provider.name</c>.")]
        public const string MistralAi = "mistral_ai";
    }

    /// <summary>
    /// The type of token being counted.
    /// </summary>
    public static class GenAiTokenTypeValues
    {
        /// <summary>
        /// Input tokens (prompt, input, etc.).
        /// </summary>
        public const string Input = "input";

        /// <summary>
        /// Output tokens (completion, response, etc.).
        /// </summary>
        public const string Completion = "output";

        /// <summary>
        /// Output tokens (completion, response, etc.).
        /// </summary>
        public const string Output = "output";
    }
}
