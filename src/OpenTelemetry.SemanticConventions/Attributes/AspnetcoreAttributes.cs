// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// <auto-generated>This file has been auto generated from 'src\OpenTelemetry.SemanticConventions\scripts\templates\registry\SemanticConventionsAttributes.cs.j2' </auto-generated>

#nullable enable

#pragma warning disable CS1570 // XML comment has badly formed XML

namespace OpenTelemetry.SemanticConventions;

/// <summary>
/// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
/// </summary>
public static class AspnetcoreAttributes
{
    /// <summary>
    /// The result of the authentication operation.
    /// </summary>
    public const string AttributeAspnetcoreAuthenticationResult = "aspnetcore.authentication.result";

    /// <summary>
    /// The identifier that names a particular authentication handler.
    /// </summary>
    public const string AttributeAspnetcoreAuthenticationScheme = "aspnetcore.authentication.scheme";

    /// <summary>
    /// The name of the authorization policy.
    /// </summary>
    public const string AttributeAspnetcoreAuthorizationPolicy = "aspnetcore.authorization.policy";

    /// <summary>
    /// The result of calling the authorization service.
    /// </summary>
    public const string AttributeAspnetcoreAuthorizationResult = "aspnetcore.authorization.result";

    /// <summary>
    /// ASP.NET Core exception middleware handling result.
    /// </summary>
    public const string AttributeAspnetcoreDiagnosticsExceptionResult = "aspnetcore.diagnostics.exception.result";

    /// <summary>
    /// Full type name of the <a href="https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler"><c>IExceptionHandler</c></a> implementation that handled the exception.
    /// </summary>
    public const string AttributeAspnetcoreDiagnosticsHandlerType = "aspnetcore.diagnostics.handler.type";

    /// <summary>
    /// The error code for a failed identity operation.
    /// </summary>
    public const string AttributeAspnetcoreIdentityErrorCode = "aspnetcore.identity.error_code";

    /// <summary>
    /// The result from checking the password.
    /// </summary>
    public const string AttributeAspnetcoreIdentityPasswordCheckResult = "aspnetcore.identity.password_check_result";

    /// <summary>
    /// The result of the identity operation.
    /// </summary>
    public const string AttributeAspnetcoreIdentityResult = "aspnetcore.identity.result";

    /// <summary>
    /// Whether the sign in result was success or failure.
    /// </summary>
    public const string AttributeAspnetcoreIdentitySignInResult = "aspnetcore.identity.sign_in.result";

    /// <summary>
    /// The authentication type.
    /// </summary>
    public const string AttributeAspnetcoreIdentitySignInType = "aspnetcore.identity.sign_in.type";

    /// <summary>
    /// What the token will be used for.
    /// </summary>
    public const string AttributeAspnetcoreIdentityTokenPurpose = "aspnetcore.identity.token_purpose";

    /// <summary>
    /// The result of token verification.
    /// </summary>
    public const string AttributeAspnetcoreIdentityTokenVerified = "aspnetcore.identity.token_verified";

    /// <summary>
    /// The user update type.
    /// </summary>
    public const string AttributeAspnetcoreIdentityUserUpdateType = "aspnetcore.identity.user.update_type";

    /// <summary>
    /// The full name of the identity user type.
    /// </summary>
    public const string AttributeAspnetcoreIdentityUserType = "aspnetcore.identity.user_type";

    /// <summary>
    /// The name of the library or subsystem using the memory pool instance.
    /// </summary>
    public const string AttributeAspnetcoreMemoryPoolOwner = "aspnetcore.memory_pool.owner";

    /// <summary>
    /// Rate limiting policy name.
    /// </summary>
    public const string AttributeAspnetcoreRateLimitingPolicy = "aspnetcore.rate_limiting.policy";

    /// <summary>
    /// Rate-limiting result, shows whether the lease was acquired or contains a rejection reason.
    /// </summary>
    public const string AttributeAspnetcoreRateLimitingResult = "aspnetcore.rate_limiting.result";

    /// <summary>
    /// Flag indicating if request was handled by the application pipeline.
    /// </summary>
    public const string AttributeAspnetcoreRequestIsUnhandled = "aspnetcore.request.is_unhandled";

    /// <summary>
    /// A value that indicates whether the matched route is a fallback route.
    /// </summary>
    public const string AttributeAspnetcoreRoutingIsFallback = "aspnetcore.routing.is_fallback";

    /// <summary>
    /// Match result - success or failure.
    /// </summary>
    public const string AttributeAspnetcoreRoutingMatchStatus = "aspnetcore.routing.match_status";

    /// <summary>
    /// A flag indicating whether the sign in is persistent.
    /// </summary>
    public const string AttributeAspnetcoreSignInIsPersistent = "aspnetcore.sign_in.is_persistent";

    /// <summary>
    /// A value that indicates whether the user is authenticated.
    /// </summary>
    public const string AttributeAspnetcoreUserIsAuthenticated = "aspnetcore.user.is_authenticated";

    /// <summary>
    /// The result of the authentication operation.
    /// </summary>
    public static class AspnetcoreAuthenticationResultValues
    {
        /// <summary>
        /// Authentication was successful.
        /// </summary>
        public const string Success = "success";

        /// <summary>
        /// Authentication failed.
        /// </summary>
        public const string Failure = "failure";

        /// <summary>
        /// No authentication information returned.
        /// </summary>
        public const string None = "none";
    }

    /// <summary>
    /// The result of calling the authorization service.
    /// </summary>
    public static class AspnetcoreAuthorizationResultValues
    {
        /// <summary>
        /// Authorization was successful.
        /// </summary>
        public const string Success = "success";

        /// <summary>
        /// Authorization failed.
        /// </summary>
        public const string Failure = "failure";
    }

    /// <summary>
    /// ASP.NET Core exception middleware handling result.
    /// </summary>
    public static class AspnetcoreDiagnosticsExceptionResultValues
    {
        /// <summary>
        /// Exception was handled by the exception handling middleware.
        /// </summary>
        public const string Handled = "handled";

        /// <summary>
        /// Exception was not handled by the exception handling middleware.
        /// </summary>
        public const string Unhandled = "unhandled";

        /// <summary>
        /// Exception handling was skipped because the response had started.
        /// </summary>
        public const string Skipped = "skipped";

        /// <summary>
        /// Exception handling didn't run because the request was aborted.
        /// </summary>
        public const string Aborted = "aborted";
    }

    /// <summary>
    /// The result from checking the password.
    /// </summary>
    public static class AspnetcoreIdentityPasswordCheckResultValues
    {
        /// <summary>
        /// Password check was successful.
        /// </summary>
        public const string Success = "success";

        /// <summary>
        /// Password check was successful however the password was encoded using a deprecated algorithm and should be rehashed and updated.
        /// </summary>
        public const string SuccessRehashNeeded = "success_rehash_needed";

        /// <summary>
        /// Password check failed.
        /// </summary>
        public const string Failure = "failure";

        /// <summary>
        /// Password check couldn't proceed because the password was missing from the user.
        /// </summary>
        public const string PasswordMissing = "password_missing";

        /// <summary>
        /// Password check couldn't proceed because the user was missing.
        /// </summary>
        public const string UserMissing = "user_missing";
    }

    /// <summary>
    /// The result of the identity operation.
    /// </summary>
    public static class AspnetcoreIdentityResultValues
    {
        /// <summary>
        /// Identity operation was successful.
        /// </summary>
        public const string Success = "success";

        /// <summary>
        /// Identity operation failed.
        /// </summary>
        public const string Failure = "failure";
    }

    /// <summary>
    /// Whether the sign in result was success or failure.
    /// </summary>
    public static class AspnetcoreIdentitySignInResultValues
    {
        /// <summary>
        /// Sign in was successful.
        /// </summary>
        public const string Success = "success";

        /// <summary>
        /// User is locked out.
        /// </summary>
        public const string LockedOut = "locked_out";

        /// <summary>
        /// User is not allowed to sign in.
        /// </summary>
        public const string NotAllowed = "not_allowed";

        /// <summary>
        /// User requires two factory authentication to sign in.
        /// </summary>
        public const string RequiresTwoFactor = "requires_two_factor";

        /// <summary>
        /// Sign in failed.
        /// </summary>
        public const string Failure = "failure";
    }

    /// <summary>
    /// The authentication type.
    /// </summary>
    public static class AspnetcoreIdentitySignInTypeValues
    {
        /// <summary>
        /// Sign in with password.
        /// </summary>
        public const string Password = "password";

        /// <summary>
        /// Sign in with two factory recovery code.
        /// </summary>
        public const string TwoFactorRecoveryCode = "two_factor_recovery_code";

        /// <summary>
        /// Sign in with two factor authenticator app.
        /// </summary>
        public const string TwoFactorAuthenticator = "two_factor_authenticator";

        /// <summary>
        /// Sign in with a two factor provider.
        /// </summary>
        public const string TwoFactor = "two_factor";

        /// <summary>
        /// Sign in with a previously registered third-party login.
        /// </summary>
        public const string External = "external";

        /// <summary>
        /// Sign in with passkey.
        /// </summary>
        public const string Passkey = "passkey";
    }

    /// <summary>
    /// What the token will be used for.
    /// </summary>
    public static class AspnetcoreIdentityTokenPurposeValues
    {
        /// <summary>
        /// The token is for resetting a user password.
        /// </summary>
        public const string ResetPassword = "reset_password";

        /// <summary>
        /// The token is for changing a user phone number.
        /// </summary>
        public const string ChangePhoneNumber = "change_phone_number";

        /// <summary>
        /// The token is for confirming user email address.
        /// </summary>
        public const string EmailConfirmation = "email_confirmation";

        /// <summary>
        /// The token is for changing the user email address.
        /// </summary>
        public const string ChangeEmail = "change_email";

        /// <summary>
        /// The token is for changing user two factor settings.
        /// </summary>
        public const string TwoFactor = "two_factor";

        /// <summary>
        /// Any token purpose that the instrumentation has no prior knowledge of.
        /// </summary>
        public const string Other = "_OTHER";
    }

    /// <summary>
    /// The result of token verification.
    /// </summary>
    public static class AspnetcoreIdentityTokenVerifiedValues
    {
        /// <summary>
        /// Token verification was successful.
        /// </summary>
        public const string Success = "success";

        /// <summary>
        /// Token verification failed.
        /// </summary>
        public const string Failure = "failure";
    }

    /// <summary>
    /// The user update type.
    /// </summary>
    public static class AspnetcoreIdentityUserUpdateTypeValues
    {
        /// <summary>
        /// Identity user updated.
        /// </summary>
        public const string Update = "update";

        /// <summary>
        /// Identity user name updated.
        /// </summary>
        public const string UserName = "user_name";

        /// <summary>
        /// Identity user password added.
        /// </summary>
        public const string AddPassword = "add_password";

        /// <summary>
        /// Identity user password changed.
        /// </summary>
        public const string ChangePassword = "change_password";

        /// <summary>
        /// Identity user security stamp updated.
        /// </summary>
        public const string SecurityStamp = "security_stamp";

        /// <summary>
        /// Identity user password reset.
        /// </summary>
        public const string ResetPassword = "reset_password";

        /// <summary>
        /// Identity user login removed.
        /// </summary>
        public const string RemoveLogin = "remove_login";

        /// <summary>
        /// Identity user login added.
        /// </summary>
        public const string AddLogin = "add_login";

        /// <summary>
        /// Identity user claims added.
        /// </summary>
        public const string AddClaims = "add_claims";

        /// <summary>
        /// Identity user claim replaced.
        /// </summary>
        public const string ReplaceClaim = "replace_claim";

        /// <summary>
        /// Identity user claims removed.
        /// </summary>
        public const string RemoveClaims = "remove_claims";

        /// <summary>
        /// Identity user added to roles.
        /// </summary>
        public const string AddToRoles = "add_to_roles";

        /// <summary>
        /// Identity user removed from roles.
        /// </summary>
        public const string RemoveFromRoles = "remove_from_roles";

        /// <summary>
        /// Identity user email set.
        /// </summary>
        public const string SetEmail = "set_email";

        /// <summary>
        /// Identity user email confirmed.
        /// </summary>
        public const string ConfirmEmail = "confirm_email";

        /// <summary>
        /// Identity user password rehashed.
        /// </summary>
        public const string PasswordRehash = "password_rehash";

        /// <summary>
        /// Identity user password removed.
        /// </summary>
        public const string RemovePassword = "remove_password";

        /// <summary>
        /// Identity user email changed.
        /// </summary>
        public const string ChangeEmail = "change_email";

        /// <summary>
        /// Identity user phone number set.
        /// </summary>
        public const string SetPhoneNumber = "set_phone_number";

        /// <summary>
        /// Identity user phone number changed.
        /// </summary>
        public const string ChangePhoneNumber = "change_phone_number";

        /// <summary>
        /// Identity user two-factor authentication enabled or disabled.
        /// </summary>
        public const string SetTwoFactorEnabled = "set_two_factor_enabled";

        /// <summary>
        /// Identity user lockout enabled or disabled.
        /// </summary>
        public const string SetLockoutEnabled = "set_lockout_enabled";

        /// <summary>
        /// Identity user lockout end date set.
        /// </summary>
        public const string SetLockoutEndDate = "set_lockout_end_date";

        /// <summary>
        /// Identity user access failure recorded.
        /// </summary>
        public const string AccessFailed = "access_failed";

        /// <summary>
        /// Identity user access failure count reset.
        /// </summary>
        public const string ResetAccessFailedCount = "reset_access_failed_count";

        /// <summary>
        /// Identity user authentication token set.
        /// </summary>
        public const string SetAuthenticationToken = "set_authentication_token";

        /// <summary>
        /// Identity user authentication token removed.
        /// </summary>
        public const string RemoveAuthenticationToken = "remove_authentication_token";

        /// <summary>
        /// Identity user authenticator key reset.
        /// </summary>
        public const string ResetAuthenticatorKey = "reset_authenticator_key";

        /// <summary>
        /// Identity user new two-factor recovery codes generated.
        /// </summary>
        public const string GenerateNewTwoFactorRecoveryCodes = "generate_new_two_factor_recovery_codes";

        /// <summary>
        /// Identity user two-factor recovery code redeemed.
        /// </summary>
        public const string RedeemTwoFactorRecoveryCode = "redeem_two_factor_recovery_code";

        /// <summary>
        /// Identity user passkey set.
        /// </summary>
        public const string SetPasskey = "set_passkey";

        /// <summary>
        /// Identity user passkey removed.
        /// </summary>
        public const string RemovePasskey = "remove_passkey";

        /// <summary>
        /// Any update type that the instrumentation has no prior knowledge of.
        /// </summary>
        public const string Other = "_OTHER";
    }

    /// <summary>
    /// Rate-limiting result, shows whether the lease was acquired or contains a rejection reason.
    /// </summary>
    public static class AspnetcoreRateLimitingResultValues
    {
        /// <summary>
        /// Lease was acquired.
        /// </summary>
        public const string Acquired = "acquired";

        /// <summary>
        /// Lease request was rejected by the endpoint limiter.
        /// </summary>
        public const string EndpointLimiter = "endpoint_limiter";

        /// <summary>
        /// Lease request was rejected by the global limiter.
        /// </summary>
        public const string GlobalLimiter = "global_limiter";

        /// <summary>
        /// Lease request was canceled.
        /// </summary>
        public const string RequestCanceled = "request_canceled";
    }

    /// <summary>
    /// Match result - success or failure.
    /// </summary>
    public static class AspnetcoreRoutingMatchStatusValues
    {
        /// <summary>
        /// Match succeeded.
        /// </summary>
        public const string Success = "success";

        /// <summary>
        /// Match failed.
        /// </summary>
        public const string Failure = "failure";
    }
}
