// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// <auto-generated>This file has been auto generated from 'src\OpenTelemetry.SemanticConventions\scripts\templates\registry\SemanticConventionsAttributes.cs.j2' </auto-generated>

#nullable enable

#pragma warning disable CS1570 // XML comment has badly formed XML

namespace OpenTelemetry.SemanticConventions;

/// <summary>
/// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
/// </summary>
public static class ThreadAttributes
{
    /// <summary>
    /// Current "managed" thread ID (as opposed to OS thread ID).
    /// </summary>
    /// <remarks>
    /// Examples of where the value can be extracted from:
    /// <p>
    /// | Language or platform  | Source |
    /// | --- | --- |
    /// | JVM | <c>Thread.currentThread().threadId()</c> |
    /// | .NET | <c>Thread.CurrentThread.ManagedThreadId</c> |
    /// | Python | <c>threading.current_thread().ident</c> |
    /// | Ruby | <c>Thread.current.object_id</c> |
    /// | C++ | <c>std::this_thread::get_id()</c> |
    /// | Erlang | <c>erlang:self()</c> |.
    /// </remarks>
    public const string AttributeThreadId = "thread.id";

    /// <summary>
    /// Current thread name.
    /// </summary>
    /// <remarks>
    /// Examples of where the value can be extracted from:
    /// <p>
    /// | Language or platform  | Source |
    /// | --- | --- |
    /// | JVM | <c>Thread.currentThread().getName()</c> |
    /// | .NET | <c>Thread.CurrentThread.Name</c> |
    /// | Python | <c>threading.current_thread().name</c> |
    /// | Ruby | <c>Thread.current.name</c> |
    /// | Erlang | <c>erlang:process_info(self(), registered_name)</c> |.
    /// </remarks>
    public const string AttributeThreadName = "thread.name";
}
