// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// <auto-generated>This file has been auto generated from 'src\OpenTelemetry.SemanticConventions\scripts\templates\registry\SemanticConventionsAttributes.cs.j2' </auto-generated>

#nullable enable

#pragma warning disable CS1570 // XML comment has badly formed XML

namespace OpenTelemetry.SemanticConventions;

/// <summary>
/// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
/// </summary>
public static class DbAttributes
{
    /// <summary>
    /// Deprecated, use <c>cassandra.consistency.level</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
    public const string AttributeDbCassandraConsistencyLevel = "db.cassandra.consistency_level";

    /// <summary>
    /// Deprecated, use <c>cassandra.coordinator.dc</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>cassandra.coordinator.dc</c>.")]
    public const string AttributeDbCassandraCoordinatorDc = "db.cassandra.coordinator.dc";

    /// <summary>
    /// Deprecated, use <c>cassandra.coordinator.id</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>cassandra.coordinator.id</c>.")]
    public const string AttributeDbCassandraCoordinatorId = "db.cassandra.coordinator.id";

    /// <summary>
    /// Deprecated, use <c>cassandra.query.idempotent</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>cassandra.query.idempotent</c>.")]
    public const string AttributeDbCassandraIdempotence = "db.cassandra.idempotence";

    /// <summary>
    /// Deprecated, use <c>cassandra.page.size</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>cassandra.page.size</c>.")]
    public const string AttributeDbCassandraPageSize = "db.cassandra.page_size";

    /// <summary>
    /// Deprecated, use <c>cassandra.speculative_execution.count</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>cassandra.speculative_execution.count</c>.")]
    public const string AttributeDbCassandraSpeculativeExecutionCount = "db.cassandra.speculative_execution_count";

    /// <summary>
    /// Deprecated, use <c>db.collection.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.collection.name</c>.")]
    public const string AttributeDbCassandraTable = "db.cassandra.table";

    /// <summary>
    /// The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes <c>server.address</c>, <c>server.port</c>, and <c>db.namespace</c>, formatted as <c>server.address:server.port/db.namespace</c>. Instrumentations that generate connection pool name following different patterns SHOULD document it.
    /// </summary>
    public const string AttributeDbClientConnectionPoolName = "db.client.connection.pool.name";

    /// <summary>
    /// The state of a connection in the pool.
    /// </summary>
    public const string AttributeDbClientConnectionState = "db.client.connection.state";

    /// <summary>
    /// Deprecated, use <c>db.client.connection.pool.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.client.connection.pool.name</c>.")]
    public const string AttributeDbClientConnectionsPoolName = "db.client.connections.pool.name";

    /// <summary>
    /// Deprecated, use <c>db.client.connection.state</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.client.connection.state</c>.")]
    public const string AttributeDbClientConnectionsState = "db.client.connections.state";

    /// <summary>
    /// The name of a collection (table, container) within the database.
    /// </summary>
    /// <remarks>
    /// It is RECOMMENDED to capture the value as provided by the application
    /// without attempting to do any case normalization.
    /// <p>
    /// The collection name SHOULD NOT be extracted from <c>db.query.text</c>,
    /// when the database system supports query text with multiple collections
    /// in non-batch operations.
    /// <p>
    /// For batch operations, if the individual operations are known to have the same
    /// collection name then that collection name SHOULD be used.
    /// </remarks>
    public const string AttributeDbCollectionName = "db.collection.name";

    /// <summary>
    /// Deprecated, use <c>server.address</c>, <c>server.port</c> attributes instead.
    /// </summary>
    [Obsolete("Replaced by <c>server.address</c> and <c>server.port</c>.")]
    public const string AttributeDbConnectionString = "db.connection_string";

    /// <summary>
    /// Deprecated, use <c>azure.client.id</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.client.id</c>.")]
    public const string AttributeDbCosmosdbClientId = "db.cosmosdb.client_id";

    /// <summary>
    /// Deprecated, use <c>azure.cosmosdb.connection.mode</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.cosmosdb.connection.mode</c>.")]
    public const string AttributeDbCosmosdbConnectionMode = "db.cosmosdb.connection_mode";

    /// <summary>
    /// Deprecated, use <c>cosmosdb.consistency.level</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.cosmosdb.consistency.level</c>.")]
    public const string AttributeDbCosmosdbConsistencyLevel = "db.cosmosdb.consistency_level";

    /// <summary>
    /// Deprecated, use <c>db.collection.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.collection.name</c>.")]
    public const string AttributeDbCosmosdbContainer = "db.cosmosdb.container";

    /// <summary>
    /// Deprecated, no replacement at this time.
    /// </summary>
    [Obsolete("Removed, no replacement at this time.")]
    public const string AttributeDbCosmosdbOperationType = "db.cosmosdb.operation_type";

    /// <summary>
    /// Deprecated, use <c>azure.cosmosdb.operation.contacted_regions</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.cosmosdb.operation.contacted_regions</c>.")]
    public const string AttributeDbCosmosdbRegionsContacted = "db.cosmosdb.regions_contacted";

    /// <summary>
    /// Deprecated, use <c>azure.cosmosdb.operation.request_charge</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.cosmosdb.operation.request_charge</c>.")]
    public const string AttributeDbCosmosdbRequestCharge = "db.cosmosdb.request_charge";

    /// <summary>
    /// Deprecated, use <c>azure.cosmosdb.request.body.size</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.cosmosdb.request.body.size</c>.")]
    public const string AttributeDbCosmosdbRequestContentLength = "db.cosmosdb.request_content_length";

    /// <summary>
    /// Deprecated, use <c>db.response.status_code</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.response.status_code</c>.")]
    public const string AttributeDbCosmosdbStatusCode = "db.cosmosdb.status_code";

    /// <summary>
    /// Deprecated, use <c>azure.cosmosdb.response.sub_status_code</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.cosmosdb.response.sub_status_code</c>.")]
    public const string AttributeDbCosmosdbSubStatusCode = "db.cosmosdb.sub_status_code";

    /// <summary>
    /// Deprecated, use <c>db.namespace</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.namespace</c>.")]
    public const string AttributeDbElasticsearchClusterName = "db.elasticsearch.cluster.name";

    /// <summary>
    /// Deprecated, use <c>elasticsearch.node.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>elasticsearch.node.name</c>.")]
    public const string AttributeDbElasticsearchNodeName = "db.elasticsearch.node.name";

    /// <summary>
    /// Deprecated, use <c>db.operation.parameter</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.operation.parameter</c>.")]
    public const string AttributeDbElasticsearchPathPartsTemplate = "db.elasticsearch.path_parts";

    /// <summary>
    /// Deprecated, no general replacement at this time. For Elasticsearch, use <c>db.elasticsearch.node.name</c> instead.
    /// </summary>
    [Obsolete("Removed, no general replacement at this time. For Elasticsearch, use <c>db.elasticsearch.node.name</c> instead.")]
    public const string AttributeDbInstanceId = "db.instance.id";

    /// <summary>
    /// Removed, no replacement at this time.
    /// </summary>
    [Obsolete("Removed, no replacement at this time.")]
    public const string AttributeDbJdbcDriverClassname = "db.jdbc.driver_classname";

    /// <summary>
    /// Deprecated, use <c>db.collection.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.collection.name</c>.")]
    public const string AttributeDbMongodbCollection = "db.mongodb.collection";

    /// <summary>
    /// Deprecated, SQL Server instance is now populated as a part of <c>db.namespace</c> attribute.
    /// </summary>
    [Obsolete("Removed, no replacement at this time.")]
    public const string AttributeDbMssqlInstanceName = "db.mssql.instance_name";

    /// <summary>
    /// Deprecated, use <c>db.namespace</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.namespace</c>.")]
    public const string AttributeDbName = "db.name";

    /// <summary>
    /// The name of the database, fully qualified within the server address and port.
    /// </summary>
    /// <remarks>
    /// If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using <c>|</c> as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
    /// Semantic conventions for individual database systems SHOULD document what <c>db.namespace</c> means in the context of that system.
    /// It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.
    /// </remarks>
    public const string AttributeDbNamespace = "db.namespace";

    /// <summary>
    /// Deprecated, use <c>db.operation.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.operation.name</c>.")]
    public const string AttributeDbOperation = "db.operation";

    /// <summary>
    /// The number of queries included in a batch operation.
    /// </summary>
    /// <remarks>
    /// Operations are only considered batches when they contain two or more operations, and so <c>db.operation.batch.size</c> SHOULD never be <c>1</c>.
    /// </remarks>
    public const string AttributeDbOperationBatchSize = "db.operation.batch.size";

    /// <summary>
    /// The name of the operation or command being executed.
    /// </summary>
    /// <remarks>
    /// It is RECOMMENDED to capture the value as provided by the application
    /// without attempting to do any case normalization.
    /// <p>
    /// The operation name SHOULD NOT be extracted from <c>db.query.text</c>,
    /// when the database system supports query text with multiple operations
    /// in non-batch operations.
    /// <p>
    /// If spaces can occur in the operation name, multiple consecutive spaces
    /// SHOULD be normalized to a single space.
    /// <p>
    /// For batch operations, if the individual operations are known to have the same operation name
    /// then that operation name SHOULD be used prepended by <c>BATCH </c>,
    /// otherwise <c>db.operation.name</c> SHOULD be <c>BATCH</c> or some other database
    /// system specific term if more applicable.
    /// </remarks>
    public const string AttributeDbOperationName = "db.operation.name";

    /// <summary>
    /// A database operation parameter, with <c><key></c> being the parameter name, and the attribute value being a string representation of the parameter value.
    /// </summary>
    /// <remarks>
    /// For example, a client-side maximum number of rows to read from the database
    /// MAY be recorded as the <c>db.operation.parameter.max_rows</c> attribute.
    /// <p>
    /// <c>db.query.text</c> parameters SHOULD be captured using <c>db.query.parameter.<key></c>
    /// instead of <c>db.operation.parameter.<key></c>.
    /// </remarks>
    public const string AttributeDbOperationParameterTemplate = "db.operation.parameter";

    /// <summary>
    /// A database query parameter, with <c><key></c> being the parameter name, and the attribute value being a string representation of the parameter value.
    /// </summary>
    /// <remarks>
    /// If a query parameter has no name and instead is referenced only by index,
    /// then <c><key></c> SHOULD be the 0-based index.
    /// <p>
    /// <c>db.query.parameter.<key></c> SHOULD match
    /// up with the parameterized placeholders present in <c>db.query.text</c>.
    /// <p>
    /// <c>db.query.parameter.<key></c> SHOULD NOT be captured on batch operations.
    /// <p>
    /// Examples:
    /// <ul>
    ///   <li>For a query <c>SELECT * FROM users where username =  %s</c> with the parameter <c>"jdoe"</c>,
    /// the attribute <c>db.query.parameter.0</c> SHOULD be set to <c>"jdoe"</c>.</li>
    ///   <li>For a query <c>"SELECT * FROM users WHERE username = %(username)s;</c> with parameter
    /// <c>username = "jdoe"</c>, the attribute <c>db.query.parameter.username</c> SHOULD be set to <c>"jdoe"</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeDbQueryParameterTemplate = "db.query.parameter";

    /// <summary>
    /// Low cardinality summary of a database query.
    /// </summary>
    /// <remarks>
    /// The query summary describes a class of database queries and is useful
    /// as a grouping key, especially when analyzing telemetry for database
    /// calls involving complex queries.
    /// <p>
    /// Summary may be available to the instrumentation through
    /// instrumentation hooks or other means. If it is not available, instrumentations
    /// that support query parsing SHOULD generate a summary following
    /// <a href="/docs/database/database-spans.md#generating-a-summary-of-the-query">Generating query summary</a>
    /// section.
    /// </remarks>
    public const string AttributeDbQuerySummary = "db.query.summary";

    /// <summary>
    /// The database query being executed.
    /// </summary>
    /// <remarks>
    /// For sanitization see <a href="/docs/database/database-spans.md#sanitization-of-dbquerytext">Sanitization of <c>db.query.text</c></a>.
    /// For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator <c>; </c> or some other database system specific separator if more applicable.
    /// Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.
    /// </remarks>
    public const string AttributeDbQueryText = "db.query.text";

    /// <summary>
    /// Deprecated, use <c>db.namespace</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.namespace</c>.")]
    public const string AttributeDbRedisDatabaseIndex = "db.redis.database_index";

    /// <summary>
    /// Number of rows returned by the operation.
    /// </summary>
    public const string AttributeDbResponseReturnedRows = "db.response.returned_rows";

    /// <summary>
    /// Database response status code.
    /// </summary>
    /// <remarks>
    /// The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
    /// Semantic conventions for individual database systems SHOULD document what <c>db.response.status_code</c> means in the context of that system.
    /// </remarks>
    public const string AttributeDbResponseStatusCode = "db.response.status_code";

    /// <summary>
    /// Deprecated, use <c>db.collection.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.collection.name</c>, but only if not extracting the value from <c>db.query.text</c>.")]
    public const string AttributeDbSqlTable = "db.sql.table";

    /// <summary>
    /// The database statement being executed.
    /// </summary>
    [Obsolete("Replaced by <c>db.query.text</c>.")]
    public const string AttributeDbStatement = "db.statement";

    /// <summary>
    /// The name of a stored procedure within the database.
    /// </summary>
    /// <remarks>
    /// It is RECOMMENDED to capture the value as provided by the application
    /// without attempting to do any case normalization.
    /// <p>
    /// For batch operations, if the individual operations are known to have the same
    /// stored procedure name then that stored procedure name SHOULD be used.
    /// </remarks>
    public const string AttributeDbStoredProcedureName = "db.stored_procedure.name";

    /// <summary>
    /// Deprecated, use <c>db.system.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.system.name</c>.")]
    public const string AttributeDbSystem = "db.system";

    /// <summary>
    /// The database management system (DBMS) product as identified by the client instrumentation.
    /// </summary>
    /// <remarks>
    /// The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the <c>db.system.name</c> is set to <c>postgresql</c> based on the instrumentation's best knowledge.
    /// </remarks>
    public const string AttributeDbSystemName = "db.system.name";

    /// <summary>
    /// Deprecated, no replacement at this time.
    /// </summary>
    [Obsolete("Removed, no replacement at this time.")]
    public const string AttributeDbUser = "db.user";

    /// <summary>
    /// Deprecated, use <c>cassandra.consistency.level</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
    public static class DbCassandraConsistencyLevelValues
    {
        /// <summary>
        /// all.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string All = "all";

        /// <summary>
        /// each_quorum.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string EachQuorum = "each_quorum";

        /// <summary>
        /// quorum.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string Quorum = "quorum";

        /// <summary>
        /// local_quorum.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string LocalQuorum = "local_quorum";

        /// <summary>
        /// one.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string One = "one";

        /// <summary>
        /// two.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string Two = "two";

        /// <summary>
        /// three.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string Three = "three";

        /// <summary>
        /// local_one.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string LocalOne = "local_one";

        /// <summary>
        /// any.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string Any = "any";

        /// <summary>
        /// serial.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string Serial = "serial";

        /// <summary>
        /// local_serial.
        /// </summary>
        [Obsolete("Replaced by <c>cassandra.consistency.level</c>.")]
        public const string LocalSerial = "local_serial";
    }

    /// <summary>
    /// The state of a connection in the pool.
    /// </summary>
    public static class DbClientConnectionStateValues
    {
        /// <summary>
        /// idle.
        /// </summary>
        public const string Idle = "idle";

        /// <summary>
        /// used.
        /// </summary>
        public const string Used = "used";
    }

    /// <summary>
    /// Deprecated, use <c>db.client.connection.state</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.client.connection.state</c>.")]
    public static class DbClientConnectionsStateValues
    {
        /// <summary>
        /// idle.
        /// </summary>
        [Obsolete("Replaced by <c>db.client.connection.state</c>.")]
        public const string Idle = "idle";

        /// <summary>
        /// used.
        /// </summary>
        [Obsolete("Replaced by <c>db.client.connection.state</c>.")]
        public const string Used = "used";
    }

    /// <summary>
    /// Deprecated, use <c>azure.cosmosdb.connection.mode</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.cosmosdb.connection.mode</c>.")]
    public static class DbCosmosdbConnectionModeValues
    {
        /// <summary>
        /// Gateway (HTTP) connection.
        /// </summary>
        [Obsolete("Replaced by <c>azure.cosmosdb.connection.mode</c>.")]
        public const string Gateway = "gateway";

        /// <summary>
        /// Direct connection.
        /// </summary>
        [Obsolete("Replaced by <c>azure.cosmosdb.connection.mode</c>.")]
        public const string Direct = "direct";
    }

    /// <summary>
    /// Deprecated, use <c>cosmosdb.consistency.level</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>azure.cosmosdb.consistency.level</c>.")]
    public static class DbCosmosdbConsistencyLevelValues
    {
        /// <summary>
        /// strong.
        /// </summary>
        [Obsolete("Replaced by <c>azure.cosmosdb.consistency.level</c>.")]
        public const string Strong = "Strong";

        /// <summary>
        /// bounded_staleness.
        /// </summary>
        [Obsolete("Replaced by <c>azure.cosmosdb.consistency.level</c>.")]
        public const string BoundedStaleness = "BoundedStaleness";

        /// <summary>
        /// session.
        /// </summary>
        [Obsolete("Replaced by <c>azure.cosmosdb.consistency.level</c>.")]
        public const string Session = "Session";

        /// <summary>
        /// eventual.
        /// </summary>
        [Obsolete("Replaced by <c>azure.cosmosdb.consistency.level</c>.")]
        public const string Eventual = "Eventual";

        /// <summary>
        /// consistent_prefix.
        /// </summary>
        [Obsolete("Replaced by <c>azure.cosmosdb.consistency.level</c>.")]
        public const string ConsistentPrefix = "ConsistentPrefix";
    }

    /// <summary>
    /// Deprecated, no replacement at this time.
    /// </summary>
    [Obsolete("Removed, no replacement at this time.")]
    public static class DbCosmosdbOperationTypeValues
    {
        /// <summary>
        /// batch.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Batch = "batch";

        /// <summary>
        /// create.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Create = "create";

        /// <summary>
        /// delete.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Delete = "delete";

        /// <summary>
        /// execute.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Execute = "execute";

        /// <summary>
        /// execute_javascript.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string ExecuteJavascript = "execute_javascript";

        /// <summary>
        /// invalid.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Invalid = "invalid";

        /// <summary>
        /// head.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Head = "head";

        /// <summary>
        /// head_feed.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string HeadFeed = "head_feed";

        /// <summary>
        /// patch.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Patch = "patch";

        /// <summary>
        /// query.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Query = "query";

        /// <summary>
        /// query_plan.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string QueryPlan = "query_plan";

        /// <summary>
        /// read.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Read = "read";

        /// <summary>
        /// read_feed.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string ReadFeed = "read_feed";

        /// <summary>
        /// replace.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Replace = "replace";

        /// <summary>
        /// upsert.
        /// </summary>
        [Obsolete("Removed, no replacement at this time.")]
        public const string Upsert = "upsert";
    }

    /// <summary>
    /// Deprecated, use <c>db.system.name</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>db.system.name</c>.")]
    public static class DbSystemValues
    {
        /// <summary>
        /// Some other SQL database. Fallback only. See notes.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string OtherSql = "other_sql";

        /// <summary>
        /// Adabas (Adaptable Database System).
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Adabas = "adabas";

        /// <summary>
        /// Deprecated, use <c>intersystems_cache</c> instead.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Cache = "cache";

        /// <summary>
        /// InterSystems Caché.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string IntersystemsCache = "intersystems_cache";

        /// <summary>
        /// Apache Cassandra.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Cassandra = "cassandra";

        /// <summary>
        /// ClickHouse.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Clickhouse = "clickhouse";

        /// <summary>
        /// Deprecated, use <c>other_sql</c> instead.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Cloudscape = "cloudscape";

        /// <summary>
        /// CockroachDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Cockroachdb = "cockroachdb";

        /// <summary>
        /// Deprecated, no replacement at this time.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Coldfusion = "coldfusion";

        /// <summary>
        /// Microsoft Azure Cosmos DB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Cosmosdb = "cosmosdb";

        /// <summary>
        /// Couchbase.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Couchbase = "couchbase";

        /// <summary>
        /// CouchDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Couchdb = "couchdb";

        /// <summary>
        /// IBM Db2.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Db2 = "db2";

        /// <summary>
        /// Apache Derby.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Derby = "derby";

        /// <summary>
        /// Amazon DynamoDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Dynamodb = "dynamodb";

        /// <summary>
        /// EnterpriseDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Edb = "edb";

        /// <summary>
        /// Elasticsearch.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Elasticsearch = "elasticsearch";

        /// <summary>
        /// FileMaker.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Filemaker = "filemaker";

        /// <summary>
        /// Firebird.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Firebird = "firebird";

        /// <summary>
        /// Deprecated, use <c>other_sql</c> instead.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Firstsql = "firstsql";

        /// <summary>
        /// Apache Geode.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Geode = "geode";

        /// <summary>
        /// H2.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string H2 = "h2";

        /// <summary>
        /// SAP HANA.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Hanadb = "hanadb";

        /// <summary>
        /// Apache HBase.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Hbase = "hbase";

        /// <summary>
        /// Apache Hive.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Hive = "hive";

        /// <summary>
        /// HyperSQL DataBase.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Hsqldb = "hsqldb";

        /// <summary>
        /// InfluxDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Influxdb = "influxdb";

        /// <summary>
        /// Informix.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Informix = "informix";

        /// <summary>
        /// Ingres.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Ingres = "ingres";

        /// <summary>
        /// InstantDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Instantdb = "instantdb";

        /// <summary>
        /// InterBase.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Interbase = "interbase";

        /// <summary>
        /// MariaDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Mariadb = "mariadb";

        /// <summary>
        /// SAP MaxDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Maxdb = "maxdb";

        /// <summary>
        /// Memcached.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Memcached = "memcached";

        /// <summary>
        /// MongoDB.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Mongodb = "mongodb";

        /// <summary>
        /// Microsoft SQL Server.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Mssql = "mssql";

        /// <summary>
        /// Deprecated, Microsoft SQL Server Compact is discontinued.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Mssqlcompact = "mssqlcompact";

        /// <summary>
        /// MySQL.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Mysql = "mysql";

        /// <summary>
        /// Neo4j.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Neo4j = "neo4j";

        /// <summary>
        /// Netezza.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Netezza = "netezza";

        /// <summary>
        /// OpenSearch.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Opensearch = "opensearch";

        /// <summary>
        /// Oracle Database.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Oracle = "oracle";

        /// <summary>
        /// Pervasive PSQL.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Pervasive = "pervasive";

        /// <summary>
        /// PointBase.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Pointbase = "pointbase";

        /// <summary>
        /// PostgreSQL.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Postgresql = "postgresql";

        /// <summary>
        /// Progress Database.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Progress = "progress";

        /// <summary>
        /// Redis.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Redis = "redis";

        /// <summary>
        /// Amazon Redshift.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Redshift = "redshift";

        /// <summary>
        /// Cloud Spanner.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Spanner = "spanner";

        /// <summary>
        /// SQLite.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Sqlite = "sqlite";

        /// <summary>
        /// Sybase.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Sybase = "sybase";

        /// <summary>
        /// Teradata.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Teradata = "teradata";

        /// <summary>
        /// Trino.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Trino = "trino";

        /// <summary>
        /// Vertica.
        /// </summary>
        [Obsolete("Replaced by <c>db.system.name</c>.")]
        public const string Vertica = "vertica";
    }

    /// <summary>
    /// The database management system (DBMS) product as identified by the client instrumentation.
    /// </summary>
    public static class DbSystemNameValues
    {
        /// <summary>
        /// Some other SQL database. Fallback only.
        /// </summary>
        public const string OtherSql = "other_sql";

        /// <summary>
        /// <a href="https://documentation.softwareag.com/?pf=adabas">Adabas (Adaptable Database System)</a>.
        /// </summary>
        public const string SoftwareagAdabas = "softwareag.adabas";

        /// <summary>
        /// <a href="https://www.actian.com/databases/ingres/">Actian Ingres</a>.
        /// </summary>
        public const string ActianIngres = "actian.ingres";

        /// <summary>
        /// <a href="https://aws.amazon.com/pm/dynamodb/">Amazon DynamoDB</a>.
        /// </summary>
        public const string AwsDynamodb = "aws.dynamodb";

        /// <summary>
        /// <a href="https://aws.amazon.com/redshift/">Amazon Redshift</a>.
        /// </summary>
        public const string AwsRedshift = "aws.redshift";

        /// <summary>
        /// <a href="https://learn.microsoft.com/azure/cosmos-db">Azure Cosmos DB</a>.
        /// </summary>
        public const string AzureCosmosdb = "azure.cosmosdb";

        /// <summary>
        /// <a href="https://www.intersystems.com/products/cache/">InterSystems Caché</a>.
        /// </summary>
        public const string IntersystemsCache = "intersystems.cache";

        /// <summary>
        /// <a href="https://cassandra.apache.org/">Apache Cassandra</a>.
        /// </summary>
        public const string Cassandra = "cassandra";

        /// <summary>
        /// <a href="https://clickhouse.com/">ClickHouse</a>.
        /// </summary>
        public const string Clickhouse = "clickhouse";

        /// <summary>
        /// <a href="https://www.cockroachlabs.com/">CockroachDB</a>.
        /// </summary>
        public const string Cockroachdb = "cockroachdb";

        /// <summary>
        /// <a href="https://www.couchbase.com/">Couchbase</a>.
        /// </summary>
        public const string Couchbase = "couchbase";

        /// <summary>
        /// <a href="https://couchdb.apache.org/">Apache CouchDB</a>.
        /// </summary>
        public const string Couchdb = "couchdb";

        /// <summary>
        /// <a href="https://db.apache.org/derby/">Apache Derby</a>.
        /// </summary>
        public const string Derby = "derby";

        /// <summary>
        /// <a href="https://www.elastic.co/elasticsearch">Elasticsearch</a>.
        /// </summary>
        public const string Elasticsearch = "elasticsearch";

        /// <summary>
        /// <a href="https://www.firebirdsql.org/">Firebird</a>.
        /// </summary>
        public const string Firebirdsql = "firebirdsql";

        /// <summary>
        /// <a href="https://cloud.google.com/spanner">Google Cloud Spanner</a>.
        /// </summary>
        public const string GcpSpanner = "gcp.spanner";

        /// <summary>
        /// <a href="https://geode.apache.org/">Apache Geode</a>.
        /// </summary>
        public const string Geode = "geode";

        /// <summary>
        /// <a href="https://h2database.com/">H2 Database</a>.
        /// </summary>
        public const string H2database = "h2database";

        /// <summary>
        /// <a href="https://hbase.apache.org/">Apache HBase</a>.
        /// </summary>
        public const string Hbase = "hbase";

        /// <summary>
        /// <a href="https://hive.apache.org/">Apache Hive</a>.
        /// </summary>
        public const string Hive = "hive";

        /// <summary>
        /// <a href="https://hsqldb.org/">HyperSQL Database</a>.
        /// </summary>
        public const string Hsqldb = "hsqldb";

        /// <summary>
        /// <a href="https://www.ibm.com/db2">IBM Db2</a>.
        /// </summary>
        public const string IbmDb2 = "ibm.db2";

        /// <summary>
        /// <a href="https://www.ibm.com/products/informix">IBM Informix</a>.
        /// </summary>
        public const string IbmInformix = "ibm.informix";

        /// <summary>
        /// <a href="https://www.ibm.com/products/netezza">IBM Netezza</a>.
        /// </summary>
        public const string IbmNetezza = "ibm.netezza";

        /// <summary>
        /// <a href="https://www.influxdata.com/">InfluxDB</a>.
        /// </summary>
        public const string Influxdb = "influxdb";

        /// <summary>
        /// <a href="https://www.instantdb.com/">Instant</a>.
        /// </summary>
        public const string Instantdb = "instantdb";

        /// <summary>
        /// <a href="https://mariadb.org/">MariaDB</a>.
        /// </summary>
        public const string Mariadb = "mariadb";

        /// <summary>
        /// <a href="https://memcached.org/">Memcached</a>.
        /// </summary>
        public const string Memcached = "memcached";

        /// <summary>
        /// <a href="https://www.mongodb.com/">MongoDB</a>.
        /// </summary>
        public const string Mongodb = "mongodb";

        /// <summary>
        /// <a href="https://www.microsoft.com/sql-server">Microsoft SQL Server</a>.
        /// </summary>
        public const string MicrosoftSqlServer = "microsoft.sql_server";

        /// <summary>
        /// <a href="https://www.mysql.com/">MySQL</a>.
        /// </summary>
        public const string Mysql = "mysql";

        /// <summary>
        /// <a href="https://neo4j.com/">Neo4j</a>.
        /// </summary>
        public const string Neo4j = "neo4j";

        /// <summary>
        /// <a href="https://opensearch.org/">OpenSearch</a>.
        /// </summary>
        public const string Opensearch = "opensearch";

        /// <summary>
        /// <a href="https://www.oracle.com/database/">Oracle Database</a>.
        /// </summary>
        public const string OracleDb = "oracle.db";

        /// <summary>
        /// <a href="https://www.postgresql.org/">PostgreSQL</a>.
        /// </summary>
        public const string Postgresql = "postgresql";

        /// <summary>
        /// <a href="https://redis.io/">Redis</a>.
        /// </summary>
        public const string Redis = "redis";

        /// <summary>
        /// <a href="https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html">SAP HANA</a>.
        /// </summary>
        public const string SapHana = "sap.hana";

        /// <summary>
        /// <a href="https://maxdb.sap.com/">SAP MaxDB</a>.
        /// </summary>
        public const string SapMaxdb = "sap.maxdb";

        /// <summary>
        /// <a href="https://www.sqlite.org/">SQLite</a>.
        /// </summary>
        public const string Sqlite = "sqlite";

        /// <summary>
        /// <a href="https://www.teradata.com/">Teradata</a>.
        /// </summary>
        public const string Teradata = "teradata";

        /// <summary>
        /// <a href="https://trino.io/">Trino</a>.
        /// </summary>
        public const string Trino = "trino";
    }
}
