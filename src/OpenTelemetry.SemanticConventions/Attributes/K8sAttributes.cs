// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// <auto-generated>This file has been auto generated from 'src\OpenTelemetry.SemanticConventions\scripts\templates\registry\SemanticConventionsAttributes.cs.j2' </auto-generated>

#nullable enable

#pragma warning disable CS1570 // XML comment has badly formed XML

namespace OpenTelemetry.SemanticConventions;

/// <summary>
/// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
/// </summary>
public static class K8sAttributes
{
    /// <summary>
    /// The name of the cluster.
    /// </summary>
    public const string AttributeK8sClusterName = "k8s.cluster.name";

    /// <summary>
    /// A pseudo-ID for the cluster, set to the UID of the <c>kube-system</c> namespace.
    /// </summary>
    /// <remarks>
    /// K8s doesn't have support for obtaining a cluster ID. If this is ever
    /// added, we will recommend collecting the <c>k8s.cluster.uid</c> through the
    /// official APIs. In the meantime, we are able to use the <c>uid</c> of the
    /// <c>kube-system</c> namespace as a proxy for cluster ID. Read on for the
    /// rationale.
    /// <p>
    /// Every object created in a K8s cluster is assigned a distinct UID. The
    /// <c>kube-system</c> namespace is used by Kubernetes itself and will exist
    /// for the lifetime of the cluster. Using the <c>uid</c> of the <c>kube-system</c>
    /// namespace is a reasonable proxy for the K8s ClusterID as it will only
    /// change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
    /// UUIDs as standardized by
    /// <a href="https://www.itu.int/ITU-T/studygroups/com17/oid.html">ISO/IEC 9834-8 and ITU-T X.667</a>.
    /// Which states:
    /// <blockquote>
    /// If generated according to one of the mechanisms defined in Rec.
    /// ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
    /// different from all other UUIDs generated before 3603 A.D., or is
    /// extremely likely to be different (depending on the mechanism chosen).</blockquote>
    /// <p>
    /// Therefore, UIDs between clusters should be extremely unlikely to
    /// conflict.
    /// </remarks>
    public const string AttributeK8sClusterUid = "k8s.cluster.uid";

    /// <summary>
    /// The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (<c>container.name</c>).
    /// </summary>
    public const string AttributeK8sContainerName = "k8s.container.name";

    /// <summary>
    /// Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.
    /// </summary>
    public const string AttributeK8sContainerRestartCount = "k8s.container.restart_count";

    /// <summary>
    /// Last terminated reason of the Container.
    /// </summary>
    public const string AttributeK8sContainerStatusLastTerminatedReason = "k8s.container.status.last_terminated_reason";

    /// <summary>
    /// The reason for the container state. Corresponds to the <c>reason</c> field of the: <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstatewaiting-v1-core">K8s ContainerStateWaiting</a> or <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstateterminated-v1-core">K8s ContainerStateTerminated</a>.
    /// </summary>
    public const string AttributeK8sContainerStatusReason = "k8s.container.status.reason";

    /// <summary>
    /// The state of the container. <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstate-v1-core">K8s ContainerState</a>.
    /// </summary>
    public const string AttributeK8sContainerStatusState = "k8s.container.status.state";

    /// <summary>
    /// The cronjob annotation placed on the CronJob, the <c><key></c> being the annotation name, the value being the annotation value.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>An annotation <c>retries</c> with value <c>4</c> SHOULD be recorded as the
    /// <c>k8s.cronjob.annotation.retries</c> attribute with value <c>"4"</c>.</li>
    ///   <li>An annotation <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.cronjob.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sCronjobAnnotationTemplate = "k8s.cronjob.annotation";

    /// <summary>
    /// The label placed on the CronJob, the <c><key></c> being the label name, the value being the label value.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>type</c> with value <c>weekly</c> SHOULD be recorded as the
    /// <c>k8s.cronjob.label.type</c> attribute with value <c>"weekly"</c>.</li>
    ///   <li>A label <c>automated</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.cronjob.label.automated</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sCronjobLabelTemplate = "k8s.cronjob.label";

    /// <summary>
    /// The name of the CronJob.
    /// </summary>
    public const string AttributeK8sCronjobName = "k8s.cronjob.name";

    /// <summary>
    /// The UID of the CronJob.
    /// </summary>
    public const string AttributeK8sCronjobUid = "k8s.cronjob.uid";

    /// <summary>
    /// The annotation placed on the DaemonSet, the <c><key></c> being the annotation name, the value being the annotation value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>replicas</c> with value <c>1</c> SHOULD be recorded
    /// as the <c>k8s.daemonset.annotation.replicas</c> attribute with value <c>"1"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.daemonset.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sDaemonsetAnnotationTemplate = "k8s.daemonset.annotation";

    /// <summary>
    /// The label placed on the DaemonSet, the <c><key></c> being the label name, the value being the label value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>app</c> with value <c>guestbook</c> SHOULD be recorded
    /// as the <c>k8s.daemonset.label.app</c> attribute with value <c>"guestbook"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.daemonset.label.injected</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sDaemonsetLabelTemplate = "k8s.daemonset.label";

    /// <summary>
    /// The name of the DaemonSet.
    /// </summary>
    public const string AttributeK8sDaemonsetName = "k8s.daemonset.name";

    /// <summary>
    /// The UID of the DaemonSet.
    /// </summary>
    public const string AttributeK8sDaemonsetUid = "k8s.daemonset.uid";

    /// <summary>
    /// The annotation placed on the Deployment, the <c><key></c> being the annotation name, the value being the annotation value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>replicas</c> with value <c>1</c> SHOULD be recorded
    /// as the <c>k8s.deployment.annotation.replicas</c> attribute with value <c>"1"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.deployment.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sDeploymentAnnotationTemplate = "k8s.deployment.annotation";

    /// <summary>
    /// The label placed on the Deployment, the <c><key></c> being the label name, the value being the label value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>replicas</c> with value <c>0</c> SHOULD be recorded
    /// as the <c>k8s.deployment.label.app</c> attribute with value <c>"guestbook"</c>.</li>
    ///   <li>A label <c>injected</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.deployment.label.injected</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sDeploymentLabelTemplate = "k8s.deployment.label";

    /// <summary>
    /// The name of the Deployment.
    /// </summary>
    public const string AttributeK8sDeploymentName = "k8s.deployment.name";

    /// <summary>
    /// The UID of the Deployment.
    /// </summary>
    public const string AttributeK8sDeploymentUid = "k8s.deployment.uid";

    /// <summary>
    /// The type of metric source for the horizontal pod autoscaler.
    /// </summary>
    /// <remarks>
    /// This attribute reflects the <c>type</c> field of spec.metrics[] in the HPA.
    /// </remarks>
    public const string AttributeK8sHpaMetricType = "k8s.hpa.metric.type";

    /// <summary>
    /// The name of the horizontal pod autoscaler.
    /// </summary>
    public const string AttributeK8sHpaName = "k8s.hpa.name";

    /// <summary>
    /// The API version of the target resource to scale for the HorizontalPodAutoscaler.
    /// </summary>
    /// <remarks>
    /// This maps to the <c>apiVersion</c> field in the <c>scaleTargetRef</c> of the HPA spec.
    /// </remarks>
    public const string AttributeK8sHpaScaletargetrefApiVersion = "k8s.hpa.scaletargetref.api_version";

    /// <summary>
    /// The kind of the target resource to scale for the HorizontalPodAutoscaler.
    /// </summary>
    /// <remarks>
    /// This maps to the <c>kind</c> field in the <c>scaleTargetRef</c> of the HPA spec.
    /// </remarks>
    public const string AttributeK8sHpaScaletargetrefKind = "k8s.hpa.scaletargetref.kind";

    /// <summary>
    /// The name of the target resource to scale for the HorizontalPodAutoscaler.
    /// </summary>
    /// <remarks>
    /// This maps to the <c>name</c> field in the <c>scaleTargetRef</c> of the HPA spec.
    /// </remarks>
    public const string AttributeK8sHpaScaletargetrefName = "k8s.hpa.scaletargetref.name";

    /// <summary>
    /// The UID of the horizontal pod autoscaler.
    /// </summary>
    public const string AttributeK8sHpaUid = "k8s.hpa.uid";

    /// <summary>
    /// The size (identifier) of the K8s huge page.
    /// </summary>
    public const string AttributeK8sHugepageSize = "k8s.hugepage.size";

    /// <summary>
    /// The annotation placed on the Job, the <c><key></c> being the annotation name, the value being the annotation value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>number</c> with value <c>1</c> SHOULD be recorded
    /// as the <c>k8s.job.annotation.number</c> attribute with value <c>"1"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.job.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sJobAnnotationTemplate = "k8s.job.annotation";

    /// <summary>
    /// The label placed on the Job, the <c><key></c> being the label name, the value being the label value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>jobtype</c> with value <c>ci</c> SHOULD be recorded
    /// as the <c>k8s.job.label.jobtype</c> attribute with value <c>"ci"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.job.label.automated</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sJobLabelTemplate = "k8s.job.label";

    /// <summary>
    /// The name of the Job.
    /// </summary>
    public const string AttributeK8sJobName = "k8s.job.name";

    /// <summary>
    /// The UID of the Job.
    /// </summary>
    public const string AttributeK8sJobUid = "k8s.job.uid";

    /// <summary>
    /// The annotation placed on the Namespace, the <c><key></c> being the annotation name, the value being the annotation value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>ttl</c> with value <c>0</c> SHOULD be recorded
    /// as the <c>k8s.namespace.annotation.ttl</c> attribute with value <c>"0"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.namespace.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sNamespaceAnnotationTemplate = "k8s.namespace.annotation";

    /// <summary>
    /// The label placed on the Namespace, the <c><key></c> being the label name, the value being the label value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>kubernetes.io/metadata.name</c> with value <c>default</c> SHOULD be recorded
    /// as the <c>k8s.namespace.label.kubernetes.io/metadata.name</c> attribute with value <c>"default"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.namespace.label.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sNamespaceLabelTemplate = "k8s.namespace.label";

    /// <summary>
    /// The name of the namespace that the pod is running in.
    /// </summary>
    public const string AttributeK8sNamespaceName = "k8s.namespace.name";

    /// <summary>
    /// The phase of the K8s namespace.
    /// </summary>
    /// <remarks>
    /// This attribute aligns with the <c>phase</c> field of the
    /// <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#namespacestatus-v1-core">K8s NamespaceStatus</a>.
    /// </remarks>
    public const string AttributeK8sNamespacePhase = "k8s.namespace.phase";

    /// <summary>
    /// The annotation placed on the Node, the <c><key></c> being the annotation name, the value being the annotation value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>An annotation <c>node.alpha.kubernetes.io/ttl</c> with value <c>0</c> SHOULD be recorded as
    /// the <c>k8s.node.annotation.node.alpha.kubernetes.io/ttl</c> attribute with value <c>"0"</c>.</li>
    ///   <li>An annotation <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.node.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sNodeAnnotationTemplate = "k8s.node.annotation";

    /// <summary>
    /// The status of the condition, one of True, False, Unknown.
    /// </summary>
    /// <remarks>
    /// This attribute aligns with the <c>status</c> field of the
    /// <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#nodecondition-v1-core">NodeCondition</a>.
    /// </remarks>
    public const string AttributeK8sNodeConditionStatus = "k8s.node.condition.status";

    /// <summary>
    /// The condition type of a K8s Node.
    /// </summary>
    /// <remarks>
    /// K8s Node conditions as described
    /// by <a href="https://v1-32.docs.kubernetes.io/docs/reference/node/node-status/#condition">K8s documentation</a>.
    /// <p>
    /// This attribute aligns with the <c>type</c> field of the
    /// <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#nodecondition-v1-core">NodeCondition</a>
    /// <p>
    /// The set of possible values is not limited to those listed here. Managed Kubernetes environments,
    /// or custom controllers MAY introduce additional node condition types.
    /// When this occurs, the exact value as reported by the Kubernetes API SHOULD be used.
    /// </remarks>
    public const string AttributeK8sNodeConditionType = "k8s.node.condition.type";

    /// <summary>
    /// The label placed on the Node, the <c><key></c> being the label name, the value being the label value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>kubernetes.io/arch</c> with value <c>arm64</c> SHOULD be recorded
    /// as the <c>k8s.node.label.kubernetes.io/arch</c> attribute with value <c>"arm64"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.node.label.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sNodeLabelTemplate = "k8s.node.label";

    /// <summary>
    /// The name of the Node.
    /// </summary>
    public const string AttributeK8sNodeName = "k8s.node.name";

    /// <summary>
    /// The UID of the Node.
    /// </summary>
    public const string AttributeK8sNodeUid = "k8s.node.uid";

    /// <summary>
    /// The annotation placed on the Pod, the <c><key></c> being the annotation name, the value being the annotation value.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>An annotation <c>kubernetes.io/enforce-mountable-secrets</c> with value <c>true</c> SHOULD be recorded as
    /// the <c>k8s.pod.annotation.kubernetes.io/enforce-mountable-secrets</c> attribute with value <c>"true"</c>.</li>
    ///   <li>An annotation <c>mycompany.io/arch</c> with value <c>x64</c> SHOULD be recorded as
    /// the <c>k8s.pod.annotation.mycompany.io/arch</c> attribute with value <c>"x64"</c>.</li>
    ///   <li>An annotation <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.pod.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sPodAnnotationTemplate = "k8s.pod.annotation";

    /// <summary>
    /// The label placed on the Pod, the <c><key></c> being the label name, the value being the label value.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>app</c> with value <c>my-app</c> SHOULD be recorded as
    /// the <c>k8s.pod.label.app</c> attribute with value <c>"my-app"</c>.</li>
    ///   <li>A label <c>mycompany.io/arch</c> with value <c>x64</c> SHOULD be recorded as
    /// the <c>k8s.pod.label.mycompany.io/arch</c> attribute with value <c>"x64"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.pod.label.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sPodLabelTemplate = "k8s.pod.label";

    /// <summary>
    /// Deprecated, use <c>k8s.pod.label</c> instead.
    /// </summary>
    [Obsolete("Replaced by <c>k8s.pod.label</c>.")]
    public const string AttributeK8sPodLabelsTemplate = "k8s.pod.labels";

    /// <summary>
    /// The name of the Pod.
    /// </summary>
    public const string AttributeK8sPodName = "k8s.pod.name";

    /// <summary>
    /// The UID of the Pod.
    /// </summary>
    public const string AttributeK8sPodUid = "k8s.pod.uid";

    /// <summary>
    /// The annotation placed on the ReplicaSet, the <c><key></c> being the annotation name, the value being the annotation value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>replicas</c> with value <c>0</c> SHOULD be recorded
    /// as the <c>k8s.replicaset.annotation.replicas</c> attribute with value <c>"0"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.replicaset.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sReplicasetAnnotationTemplate = "k8s.replicaset.annotation";

    /// <summary>
    /// The label placed on the ReplicaSet, the <c><key></c> being the label name, the value being the label value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>app</c> with value <c>guestbook</c> SHOULD be recorded
    /// as the <c>k8s.replicaset.label.app</c> attribute with value <c>"guestbook"</c>.</li>
    ///   <li>A label <c>injected</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.replicaset.label.injected</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sReplicasetLabelTemplate = "k8s.replicaset.label";

    /// <summary>
    /// The name of the ReplicaSet.
    /// </summary>
    public const string AttributeK8sReplicasetName = "k8s.replicaset.name";

    /// <summary>
    /// The UID of the ReplicaSet.
    /// </summary>
    public const string AttributeK8sReplicasetUid = "k8s.replicaset.uid";

    /// <summary>
    /// The name of the replication controller.
    /// </summary>
    public const string AttributeK8sReplicationcontrollerName = "k8s.replicationcontroller.name";

    /// <summary>
    /// The UID of the replication controller.
    /// </summary>
    public const string AttributeK8sReplicationcontrollerUid = "k8s.replicationcontroller.uid";

    /// <summary>
    /// The name of the resource quota.
    /// </summary>
    public const string AttributeK8sResourcequotaName = "k8s.resourcequota.name";

    /// <summary>
    /// The name of the K8s resource a resource quota defines.
    /// </summary>
    /// <remarks>
    /// The value for this attribute can be either the full <c>count/<resource>[.<group>]</c> string (e.g., count/deployments.apps, count/pods), or, for certain core Kubernetes resources, just the resource name (e.g., pods, services, configmaps). Both forms are supported by Kubernetes for object count quotas. See <a href="https://kubernetes.io/docs/concepts/policy/resource-quotas/#object-count-quota">Kubernetes Resource Quotas documentation</a> for more details.
    /// </remarks>
    public const string AttributeK8sResourcequotaResourceName = "k8s.resourcequota.resource_name";

    /// <summary>
    /// The UID of the resource quota.
    /// </summary>
    public const string AttributeK8sResourcequotaUid = "k8s.resourcequota.uid";

    /// <summary>
    /// The annotation placed on the StatefulSet, the <c><key></c> being the annotation name, the value being the annotation value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>replicas</c> with value <c>1</c> SHOULD be recorded
    /// as the <c>k8s.statefulset.annotation.replicas</c> attribute with value <c>"1"</c>.</li>
    ///   <li>A label <c>data</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.statefulset.annotation.data</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sStatefulsetAnnotationTemplate = "k8s.statefulset.annotation";

    /// <summary>
    /// The label placed on the StatefulSet, the <c><key></c> being the label name, the value being the label value, even if the value is empty.
    /// </summary>
    /// <remarks>
    /// Examples:
    /// <ul>
    ///   <li>A label <c>replicas</c> with value <c>0</c> SHOULD be recorded
    /// as the <c>k8s.statefulset.label.app</c> attribute with value <c>"guestbook"</c>.</li>
    ///   <li>A label <c>injected</c> with empty string value SHOULD be recorded as
    /// the <c>k8s.statefulset.label.injected</c> attribute with value <c>""</c>.</li>
    /// </ul>
    /// </remarks>
    public const string AttributeK8sStatefulsetLabelTemplate = "k8s.statefulset.label";

    /// <summary>
    /// The name of the StatefulSet.
    /// </summary>
    public const string AttributeK8sStatefulsetName = "k8s.statefulset.name";

    /// <summary>
    /// The UID of the StatefulSet.
    /// </summary>
    public const string AttributeK8sStatefulsetUid = "k8s.statefulset.uid";

    /// <summary>
    /// The name of K8s <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#storageclass-v1-storage-k8s-io">StorageClass</a> object.
    /// </summary>
    public const string AttributeK8sStorageclassName = "k8s.storageclass.name";

    /// <summary>
    /// The name of the K8s volume.
    /// </summary>
    public const string AttributeK8sVolumeName = "k8s.volume.name";

    /// <summary>
    /// The type of the K8s volume.
    /// </summary>
    public const string AttributeK8sVolumeType = "k8s.volume.type";

    /// <summary>
    /// The reason for the container state. Corresponds to the <c>reason</c> field of the: <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstatewaiting-v1-core">K8s ContainerStateWaiting</a> or <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstateterminated-v1-core">K8s ContainerStateTerminated</a>.
    /// </summary>
    public static class K8sContainerStatusReasonValues
    {
        /// <summary>
        /// The container is being created.
        /// </summary>
        public const string ContainerCreating = "ContainerCreating";

        /// <summary>
        /// The container is in a crash loop back off state.
        /// </summary>
        public const string CrashLoopBackOff = "CrashLoopBackOff";

        /// <summary>
        /// There was an error creating the container configuration.
        /// </summary>
        public const string CreateContainerConfigError = "CreateContainerConfigError";

        /// <summary>
        /// There was an error pulling the container image.
        /// </summary>
        public const string ErrImagePull = "ErrImagePull";

        /// <summary>
        /// The container image pull is in back off state.
        /// </summary>
        public const string ImagePullBackOff = "ImagePullBackOff";

        /// <summary>
        /// The container was killed due to out of memory.
        /// </summary>
        public const string OomKilled = "OOMKilled";

        /// <summary>
        /// The container has completed execution.
        /// </summary>
        public const string Completed = "Completed";

        /// <summary>
        /// There was an error with the container.
        /// </summary>
        public const string Error = "Error";

        /// <summary>
        /// The container cannot run.
        /// </summary>
        public const string ContainerCannotRun = "ContainerCannotRun";
    }

    /// <summary>
    /// The state of the container. <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#containerstate-v1-core">K8s ContainerState</a>.
    /// </summary>
    public static class K8sContainerStatusStateValues
    {
        /// <summary>
        /// The container has terminated.
        /// </summary>
        public const string Terminated = "terminated";

        /// <summary>
        /// The container is running.
        /// </summary>
        public const string Running = "running";

        /// <summary>
        /// The container is waiting.
        /// </summary>
        public const string Waiting = "waiting";
    }

    /// <summary>
    /// The phase of the K8s namespace.
    /// </summary>
    public static class K8sNamespacePhaseValues
    {
        /// <summary>
        /// Active namespace phase as described by <a href="https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase">K8s API</a>.
        /// </summary>
        public const string Active = "active";

        /// <summary>
        /// Terminating namespace phase as described by <a href="https://pkg.go.dev/k8s.io/api@v0.31.3/core/v1#NamespacePhase">K8s API</a>.
        /// </summary>
        public const string Terminating = "terminating";
    }

    /// <summary>
    /// The status of the condition, one of True, False, Unknown.
    /// </summary>
    public static class K8sNodeConditionStatusValues
    {
        /// <summary>
        /// condition_true.
        /// </summary>
        public const string ConditionTrue = "true";

        /// <summary>
        /// condition_false.
        /// </summary>
        public const string ConditionFalse = "false";

        /// <summary>
        /// condition_unknown.
        /// </summary>
        public const string ConditionUnknown = "unknown";
    }

    /// <summary>
    /// The condition type of a K8s Node.
    /// </summary>
    public static class K8sNodeConditionTypeValues
    {
        /// <summary>
        /// The node is healthy and ready to accept pods.
        /// </summary>
        public const string Ready = "Ready";

        /// <summary>
        /// Pressure exists on the disk size—that is, if the disk capacity is low.
        /// </summary>
        public const string DiskPressure = "DiskPressure";

        /// <summary>
        /// Pressure exists on the node memory—that is, if the node memory is low.
        /// </summary>
        public const string MemoryPressure = "MemoryPressure";

        /// <summary>
        /// Pressure exists on the processes—that is, if there are too many processes on the node.
        /// </summary>
        public const string PidPressure = "PIDPressure";

        /// <summary>
        /// The network for the node is not correctly configured.
        /// </summary>
        public const string NetworkUnavailable = "NetworkUnavailable";
    }

    /// <summary>
    /// The type of the K8s volume.
    /// </summary>
    public static class K8sVolumeTypeValues
    {
        /// <summary>
        /// A <a href="https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#persistentvolumeclaim">persistentVolumeClaim</a> volume.
        /// </summary>
        public const string PersistentVolumeClaim = "persistentVolumeClaim";

        /// <summary>
        /// A <a href="https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#configmap">configMap</a> volume.
        /// </summary>
        public const string ConfigMap = "configMap";

        /// <summary>
        /// A <a href="https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#downwardapi">downwardAPI</a> volume.
        /// </summary>
        public const string DownwardApi = "downwardAPI";

        /// <summary>
        /// An <a href="https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#emptydir">emptyDir</a> volume.
        /// </summary>
        public const string EmptyDir = "emptyDir";

        /// <summary>
        /// A <a href="https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#secret">secret</a> volume.
        /// </summary>
        public const string Secret = "secret";

        /// <summary>
        /// A <a href="https://v1-30.docs.kubernetes.io/docs/concepts/storage/volumes/#local">local</a> volume.
        /// </summary>
        public const string Local = "local";
    }
}
