{%- import 'common.j2' as c %}

{%- set my_file_name  = ctx.root_namespace | pascal_case ~ "Attributes.cs" -%}
{%- set my_class_name = ctx.root_namespace | pascal_case ~ "Attributes" -%}
{{- template.set_file_name(my_file_name) -}}

// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// <auto-generated>This file has been auto generated from 'src\OpenTelemetry.SemanticConventions\scripts\templates\registry\SemanticConventionsAttributes.cs.j2' </auto-generated>

#pragma warning disable CS1570 // XML comment has badly formed XML

using System;

namespace OpenTelemetry.SemanticConventions;

/// <summary>
/// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
/// </summary>
public static class {{my_class_name}}
{
{% for attribute in ctx.attributes | sort(attribute="name") %}
{% set attr_name = c.attribute_name(attribute) %}
{% if not loop.first %}{{"\n"}}{% endif %}
    /// <summary>
    /// {{c.to_docstring(attribute.brief) | markdown_to_html}}.
    /// </summary>
{% if attribute.note %}
    /// <remarks>
    /// {{c.format_remarks(attribute.note | markdown_to_html)}}.
    /// </remarks>
{% endif %}
{% if attribute.deprecated %}
    [Obsolete("{{c.to_docstring(attribute.deprecated) | replace('"', "")}}")]
{% endif %}
    public const string Attribute{{attr_name}} = "{{attribute.name}}";
{% endfor %}
{% for attribute in ctx.attributes | sort(attribute="name") %}{% if attribute.type is mapping %}
{% set enum_class_name = attribute.name | pascal_case ~ "Values" %}
{% set attribute_resolved_type = attribute.type | instantiated_type %}

    /// <summary>
    /// {{c.to_docstring(attribute.brief) | markdown_to_html}}.
    /// </summary>
    public static class {{enum_class_name}}
    {
        {% for member in attribute.type.members %}
        /// <summary>
        /// {{c.to_docstring(member.brief or member.id) | markdown_to_html}}.
        /// </summary>
        {% if attribute.deprecated %}
        [Obsolete("{{c.to_docstring(attribute.deprecated) | replace('"', "")}}")]
        {% endif %}
        public const {{c.to_csharp_return_type(attribute_resolved_type)}} {{ member.id | pascal_case }} = {{ c.print_value(attribute_resolved_type, member.value) }};
        {% if not loop.last %}{{"\n"}}{% endif %}
        {% endfor %}
    }
{% endif %}{% endfor %}
}
