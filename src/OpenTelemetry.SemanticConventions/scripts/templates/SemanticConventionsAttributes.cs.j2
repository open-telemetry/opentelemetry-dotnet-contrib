{%- macro print_value(type, value) -%}
  {{ "\"" if type == "string"}}{{value}}{{ "\"" if type == "string"}}
{%- endmacro %}

{%- macro format_remarks(text) -%}
{%- set notes = '\n        /// '.join(text.splitlines()).encode('ascii', 'xmlcharrefreplace').decode() -%}
{{notes}}
{%- endmacro -%}

{%- macro format_xml_doc(text) -%}
{%- set escaped = text.encode('ascii', 'xmlcharrefreplace').decode() -%}
  {%- if not escaped.endswith('.')-%}
    {{escaped + '.'}}
  {%- else -%}
    {{escaped}}
  {%- endif -%}
{%- endmacro -%}

// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// <auto-generated>This file has been auto generated from scripts{{template}}</auto-generated>

#pragma warning disable CS1570 // XML comment has badly formed XML

using System;

namespace OpenTelemetry.SemanticConventions
{
    /// <summary>
    /// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
    /// </summary>
    /// <remarks>
    /// Schema and specification version: {{schemaUrl}}.
    /// </remarks>
    public static class SemanticConventionsAttributes
    {
{% for attribute in attributes if attribute.is_local and not attribute.ref %}
  {% if not loop.first %}{{"\n"}}{% endif %}
        /// <summary>
        /// {{format_xml_doc(attribute.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
        /// </summary>
  {% if attribute.note %}
        /// <remarks>
        /// {{format_remarks(attribute.note | to_doc_brief | escape | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}.
        /// </remarks>
  {% endif %}
  {% if attribute.deprecated %}
        [Obsolete("{{attribute.deprecated | to_doc_brief | replace('"', "")}}")]
  {% endif %}
        public const string Attribute{{attribute.fqn  | replace("-","_") | to_camelcase(True)}} = "{{attribute.fqn}}";
{% endfor %}
{% for semconv in semconvs.values() %}
  {% if semconv.GROUP_TYPE_NAME == 'event' %}

        /// <summary>
        /// Event name for '{{semconv.semconv_id}}'.
        /// </summary>
        public static readonly string Event{{semconv.semconv_id | replace("-","_") | to_camelcase(True)}} = "{{semconv.name}}";
  {% endif %}
{% endfor %}
{% for attribute in attributes if attribute.is_local and not attribute.ref %}
  {% if attribute.is_enum %}
  {% set class_name = attribute.fqn | to_camelcase(True) ~ "Values" %}
  {% set type = attribute.attr_type.enum_type %}

        /// <summary>
        /// {{format_xml_doc(attribute.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
        /// </summary>
        public static class {{class_name}}
        {
            {% for member in attribute.attr_type.members %}
            /// <summary>
            /// {{format_xml_doc(member.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
            /// </summary>
            public const {{ type }} {{ member.member_id | to_camelcase(True) }} = {{ print_value(type, member.value) }};
            {% if not loop.last %}{{"\n"}}{% endif %}
            {% endfor %}
        }
  {% endif %}
{% endfor %}
    }
}

