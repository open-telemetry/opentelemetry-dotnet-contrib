// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// <auto-generated>This file has been auto generated from scripts/templates/SemanticConventionsAttributes.cs.j2</auto-generated>

#pragma warning disable CS1570 // XML comment has badly formed XML

namespace OpenTelemetry.SemanticConventions
{
    /// <summary>
    /// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
    /// </summary>
    /// <remarks>
    /// Schema and specification version: https://opentelemetry.io/schemas/1.25.0.
    /// </remarks>
    public static class SemanticConventionsAttributes
    {
        /// <summary>
        /// Identifies the class / type of event.
        /// </summary>
        /// <remarks>
        /// Event names are subject to the same rules as <a href="https://github.com/open-telemetry/opentelemetry-specification/tree/v1.31.0/specification/common/attribute-naming.md">attribute names</a>. Notably, event names are namespaced to avoid collisions and provide a clean separation of semantics for events in separate domains like browser, mobile, and kubernetes.
        /// </remarks>
        public const string AttributeEventName = "event.name";

        /// <summary>
        /// A unique identifier for the Log Record.
        /// </summary>
        /// <remarks>
        /// If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.
        /// The id MAY be an <a href="https://github.com/ulid/spec">Universally Unique Lexicographically Sortable Identifier (ULID)</a>, but other identifiers (e.g. UUID) may be used as needed.
        /// </remarks>
        public const string AttributeLogRecordUid = "log.record.uid";

        /// <summary>
        /// The stream associated with the log. See below for a list of well-known values.
        /// </summary>
        public const string AttributeLogIostream = "log.iostream";

        /// <summary>
        /// The basename of the file.
        /// </summary>
        public const string AttributeLogFileName = "log.file.name";

        /// <summary>
        /// The basename of the file, with symlinks resolved.
        /// </summary>
        public const string AttributeLogFileNameResolved = "log.file.name_resolved";

        /// <summary>
        /// The full path to the file.
        /// </summary>
        public const string AttributeLogFilePath = "log.file.path";

        /// <summary>
        /// The full path to the file, with symlinks resolved.
        /// </summary>
        public const string AttributeLogFilePathResolved = "log.file.path_resolved";

        /// <summary>
        /// This attribute represents the state the application has transitioned into at the occurrence of the event.
        /// </summary>
        /// <remarks>
        /// The iOS lifecycle states are defined in the <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate#1656902">UIApplicationDelegate documentation</a>, and from which the <c>OS terminology</c> column values are derived.
        /// </remarks>
        public const string AttributeIosState = "ios.state";

        /// <summary>
        /// This attribute represents the state the application has transitioned into at the occurrence of the event.
        /// </summary>
        /// <remarks>
        /// The Android lifecycle states are defined in <a href="https://developer.android.com/guide/components/activities/activity-lifecycle#lc">Activity lifecycle callbacks</a>, and from which the <c>OS identifiers</c> are derived.
        /// </remarks>
        public const string AttributeAndroidState = "android.state";

        /// <summary>
        /// The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation should use a combination of <c>server.address</c> and <c>server.port</c> attributes formatted as <c>server.address:server.port</c>.
        /// </summary>
        public const string AttributePoolName = "pool.name";

        /// <summary>
        /// The state of a connection in the pool.
        /// </summary>
        public const string AttributeState = "state";

        /// <summary>
        /// Rate-limiting result, shows whether the lease was acquired or contains a rejection reason.
        /// </summary>
        public const string AttributeAspnetcoreRateLimitingResult = "aspnetcore.rate_limiting.result";

        /// <summary>
        /// Full type name of the <a href="https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler"><c>IExceptionHandler</c></a> implementation that handled the exception.
        /// </summary>
        public const string AttributeAspnetcoreDiagnosticsHandlerType = "aspnetcore.diagnostics.handler.type";

        /// <summary>
        /// Rate limiting policy name.
        /// </summary>
        public const string AttributeAspnetcoreRateLimitingPolicy = "aspnetcore.rate_limiting.policy";

        /// <summary>
        /// Flag indicating if request was handled by the application pipeline.
        /// </summary>
        public const string AttributeAspnetcoreRequestIsUnhandled = "aspnetcore.request.is_unhandled";

        /// <summary>
        /// A value that indicates whether the matched route is a fallback route.
        /// </summary>
        public const string AttributeAspnetcoreRoutingIsFallback = "aspnetcore.routing.is_fallback";

        /// <summary>
        /// Match result - success or failure.
        /// </summary>
        public const string AttributeAspnetcoreRoutingMatchStatus = "aspnetcore.routing.match_status";

        /// <summary>
        /// ASP.NET Core exception middleware handling result.
        /// </summary>
        public const string AttributeAspnetcoreDiagnosticsExceptionResult = "aspnetcore.diagnostics.exception.result";

        /// <summary>
        /// SignalR HTTP connection closure status.
        /// </summary>
        public const string AttributeSignalrConnectionStatus = "signalr.connection.status";

        /// <summary>
        /// <a href="https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md">SignalR transport type</a>.
        /// </summary>
        public const string AttributeSignalrTransport = "signalr.transport";

        /// <summary>
        /// Name of the buffer pool.
        /// </summary>
        /// <remarks>
        /// Pool names are generally obtained via <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()">BufferPoolMXBean#getName()</a>.
        /// </remarks>
        public const string AttributeJvmBufferPoolName = "jvm.buffer.pool.name";

        /// <summary>
        /// Name of the memory pool.
        /// </summary>
        /// <remarks>
        /// Pool names are generally obtained via <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()">MemoryPoolMXBean#getName()</a>.
        /// </remarks>
        public const string AttributeJvmMemoryPoolName = "jvm.memory.pool.name";

        /// <summary>
        /// The type of memory.
        /// </summary>
        public const string AttributeJvmMemoryType = "jvm.memory.type";

        /// <summary>
        /// Name of the garbage collector action.
        /// </summary>
        /// <remarks>
        /// Garbage collector action is generally obtained via <a href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()">GarbageCollectionNotificationInfo#getGcAction()</a>.
        /// </remarks>
        public const string AttributeJvmGcAction = "jvm.gc.action";

        /// <summary>
        /// Name of the garbage collector.
        /// </summary>
        /// <remarks>
        /// Garbage collector name is generally obtained via <a href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()">GarbageCollectionNotificationInfo#getGcName()</a>.
        /// </remarks>
        public const string AttributeJvmGcName = "jvm.gc.name";

        /// <summary>
        /// Whether the thread is daemon or not.
        /// </summary>
        public const string AttributeJvmThreadDaemon = "jvm.thread.daemon";

        /// <summary>
        /// State of the thread.
        /// </summary>
        public const string AttributeJvmThreadState = "jvm.thread.state";

        /// <summary>
        /// The CPU state for this data point. A process SHOULD be characterized <em>either</em> by data points with no <c>state</c> labels, <em>or only</em> data points with <c>state</c> labels.
        /// </summary>
        public const string AttributeProcessCpuState = "process.cpu.state";

        /// <summary>
        /// Specifies whether the context switches for this data point were voluntary or involuntary.
        /// </summary>
        public const string AttributeProcessContextSwitchType = "process.context_switch_type";

        /// <summary>
        /// The type of page fault for this data point. Type <c>major</c> is for major/hard page faults, and <c>minor</c> is for minor/soft page faults.
        /// </summary>
        public const string AttributeProcessPagingFaultType = "process.paging.fault_type";

        /// <summary>
        /// The device identifier.
        /// </summary>
        public const string AttributeSystemDevice = "system.device";

        /// <summary>
        /// The logical CPU number [0..n-1].
        /// </summary>
        public const string AttributeSystemCpuLogicalNumber = "system.cpu.logical_number";

        /// <summary>
        /// The CPU state for this data point. A system's CPU SHOULD be characterized <em>either</em> by data points with no <c>state</c> labels, <em>or only</em> data points with <c>state</c> labels.
        /// </summary>
        public const string AttributeSystemCpuState = "system.cpu.state";

        /// <summary>
        /// The memory state.
        /// </summary>
        public const string AttributeSystemMemoryState = "system.memory.state";

        /// <summary>
        /// The paging access direction.
        /// </summary>
        public const string AttributeSystemPagingDirection = "system.paging.direction";

        /// <summary>
        /// The memory paging state.
        /// </summary>
        public const string AttributeSystemPagingState = "system.paging.state";

        /// <summary>
        /// The memory paging type.
        /// </summary>
        public const string AttributeSystemPagingType = "system.paging.type";

        /// <summary>
        /// The filesystem mode.
        /// </summary>
        public const string AttributeSystemFilesystemMode = "system.filesystem.mode";

        /// <summary>
        /// The filesystem mount path.
        /// </summary>
        public const string AttributeSystemFilesystemMountpoint = "system.filesystem.mountpoint";

        /// <summary>
        /// The filesystem state.
        /// </summary>
        public const string AttributeSystemFilesystemState = "system.filesystem.state";

        /// <summary>
        /// The filesystem type.
        /// </summary>
        public const string AttributeSystemFilesystemType = "system.filesystem.type";

        /// <summary>
        /// A stateless protocol MUST NOT set this attribute.
        /// </summary>
        public const string AttributeSystemNetworkState = "system.network.state";

        /// <summary>
        /// The process state, e.g., <a href="https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES">Linux Process State Codes</a>.
        /// </summary>
        public const string AttributeSystemProcessStatus = "system.process.status";

        /// <summary>
        /// Uniquely identifies the framework API revision offered by a version (<c>os.version</c>) of the android operating system. More information can be found <a href="https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels">here</a>.
        /// </summary>
        public const string AttributeAndroidOsApiLevel = "android.os.api_level";

        /// <summary>
        /// The JSON-serialized value of each item in the <c>AttributeDefinitions</c> request field.
        /// </summary>
        public const string AttributeAwsDynamodbAttributeDefinitions = "aws.dynamodb.attribute_definitions";

        /// <summary>
        /// The value of the <c>AttributesToGet</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbAttributesToGet = "aws.dynamodb.attributes_to_get";

        /// <summary>
        /// The value of the <c>ConsistentRead</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbConsistentRead = "aws.dynamodb.consistent_read";

        /// <summary>
        /// The JSON-serialized value of each item in the <c>ConsumedCapacity</c> response field.
        /// </summary>
        public const string AttributeAwsDynamodbConsumedCapacity = "aws.dynamodb.consumed_capacity";

        /// <summary>
        /// The value of the <c>Count</c> response parameter.
        /// </summary>
        public const string AttributeAwsDynamodbCount = "aws.dynamodb.count";

        /// <summary>
        /// The value of the <c>ExclusiveStartTableName</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbExclusiveStartTable = "aws.dynamodb.exclusive_start_table";

        /// <summary>
        /// The JSON-serialized value of each item in the <c>GlobalSecondaryIndexUpdates</c> request field.
        /// </summary>
        public const string AttributeAwsDynamodbGlobalSecondaryIndexUpdates = "aws.dynamodb.global_secondary_index_updates";

        /// <summary>
        /// The JSON-serialized value of each item of the <c>GlobalSecondaryIndexes</c> request field.
        /// </summary>
        public const string AttributeAwsDynamodbGlobalSecondaryIndexes = "aws.dynamodb.global_secondary_indexes";

        /// <summary>
        /// The value of the <c>IndexName</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbIndexName = "aws.dynamodb.index_name";

        /// <summary>
        /// The JSON-serialized value of the <c>ItemCollectionMetrics</c> response field.
        /// </summary>
        public const string AttributeAwsDynamodbItemCollectionMetrics = "aws.dynamodb.item_collection_metrics";

        /// <summary>
        /// The value of the <c>Limit</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbLimit = "aws.dynamodb.limit";

        /// <summary>
        /// The JSON-serialized value of each item of the <c>LocalSecondaryIndexes</c> request field.
        /// </summary>
        public const string AttributeAwsDynamodbLocalSecondaryIndexes = "aws.dynamodb.local_secondary_indexes";

        /// <summary>
        /// The value of the <c>ProjectionExpression</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbProjection = "aws.dynamodb.projection";

        /// <summary>
        /// The value of the <c>ProvisionedThroughput.ReadCapacityUnits</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbProvisionedReadCapacity = "aws.dynamodb.provisioned_read_capacity";

        /// <summary>
        /// The value of the <c>ProvisionedThroughput.WriteCapacityUnits</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbProvisionedWriteCapacity = "aws.dynamodb.provisioned_write_capacity";

        /// <summary>
        /// The value of the <c>ScanIndexForward</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbScanForward = "aws.dynamodb.scan_forward";

        /// <summary>
        /// The value of the <c>ScannedCount</c> response parameter.
        /// </summary>
        public const string AttributeAwsDynamodbScannedCount = "aws.dynamodb.scanned_count";

        /// <summary>
        /// The value of the <c>Segment</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbSegment = "aws.dynamodb.segment";

        /// <summary>
        /// The value of the <c>Select</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbSelect = "aws.dynamodb.select";

        /// <summary>
        /// The number of items in the <c>TableNames</c> response parameter.
        /// </summary>
        public const string AttributeAwsDynamodbTableCount = "aws.dynamodb.table_count";

        /// <summary>
        /// The keys in the <c>RequestItems</c> object field.
        /// </summary>
        public const string AttributeAwsDynamodbTableNames = "aws.dynamodb.table_names";

        /// <summary>
        /// The value of the <c>TotalSegments</c> request parameter.
        /// </summary>
        public const string AttributeAwsDynamodbTotalSegments = "aws.dynamodb.total_segments";

        /// <summary>
        /// Array of brand name and version separated by a space.
        /// </summary>
        /// <remarks>
        /// This value is intended to be taken from the <a href="https://wicg.github.io/ua-client-hints/#interface">UA client hints API</a> (<c>navigator.userAgentData.brands</c>).
        /// </remarks>
        public const string AttributeBrowserBrands = "browser.brands";

        /// <summary>
        /// Preferred language of the user using the browser.
        /// </summary>
        /// <remarks>
        /// This value is intended to be taken from the Navigator API <c>navigator.language</c>.
        /// </remarks>
        public const string AttributeBrowserLanguage = "browser.language";

        /// <summary>
        /// A boolean that is true if the browser is running on a mobile device.
        /// </summary>
        /// <remarks>
        /// This value is intended to be taken from the <a href="https://wicg.github.io/ua-client-hints/#interface">UA client hints API</a> (<c>navigator.userAgentData.mobile</c>). If unavailable, this attribute SHOULD be left unset.
        /// </remarks>
        public const string AttributeBrowserMobile = "browser.mobile";

        /// <summary>
        /// The platform on which the browser is running.
        /// </summary>
        /// <remarks>
        /// This value is intended to be taken from the <a href="https://wicg.github.io/ua-client-hints/#interface">UA client hints API</a> (<c>navigator.userAgentData.platform</c>). If unavailable, the legacy <c>navigator.platform</c> API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.
        /// The list of possible values is defined in the <a href="https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform">W3C User-Agent Client Hints specification</a>. Note that some (but not all) of these values can overlap with values in the <a href="./os.md"><c>os.type</c> and <c>os.name</c> attributes</a>. However, for consistency, the values in the <c>browser.platform</c> attribute should capture the exact value that the user agent provides.
        /// </remarks>
        public const string AttributeBrowserPlatform = "browser.platform";

        /// <summary>
        /// Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
        /// </summary>
        /// <remarks>
        /// When observed from the server side, and when communicating through an intermediary, <c>client.address</c> SHOULD represent the client address behind any intermediaries,  for example proxies, if it&amp;#39;s available.
        /// </remarks>
        public const string AttributeClientAddress = "client.address";

        /// <summary>
        /// Client port number.
        /// </summary>
        /// <remarks>
        /// When observed from the server side, and when communicating through an intermediary, <c>client.port</c> SHOULD represent the client port behind any intermediaries,  for example proxies, if it&amp;#39;s available.
        /// </remarks>
        public const string AttributeClientPort = "client.port";

        /// <summary>
        /// The cloud account ID the resource is assigned to.
        /// </summary>
        public const string AttributeCloudAccountId = "cloud.account.id";

        /// <summary>
        /// Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.
        /// </summary>
        /// <remarks>
        /// Availability zones are called &amp;#34;zones&amp;#34; on Alibaba Cloud and Google Cloud.
        /// </remarks>
        public const string AttributeCloudAvailabilityZone = "cloud.availability_zone";

        /// <summary>
        /// The cloud platform in use.
        /// </summary>
        /// <remarks>
        /// The prefix of the service SHOULD match the one specified in <c>cloud.provider</c>.
        /// </remarks>
        public const string AttributeCloudPlatform = "cloud.platform";

        /// <summary>
        /// Name of the cloud provider.
        /// </summary>
        public const string AttributeCloudProvider = "cloud.provider";

        /// <summary>
        /// The geographical region the resource is running.
        /// </summary>
        /// <remarks>
        /// Refer to your provider&amp;#39;s docs to see the available regions, for example <a href="https://www.alibabacloud.com/help/doc-detail/40654.htm">Alibaba Cloud regions</a>, <a href="https://aws.amazon.com/about-aws/global-infrastructure/regions_az/">AWS regions</a>, <a href="https://azure.microsoft.com/global-infrastructure/geographies/">Azure regions</a>, <a href="https://cloud.google.com/about/locations">Google Cloud regions</a>, or <a href="https://www.tencentcloud.com/document/product/213/6091">Tencent Cloud regions</a>.
        /// </remarks>
        public const string AttributeCloudRegion = "cloud.region";

        /// <summary>
        /// Cloud provider-specific native identifier of the monitored cloud resource (e.g. an <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> on AWS, a <a href="https://learn.microsoft.com/rest/api/resources/resources/get-by-id">fully qualified resource ID</a> on Azure, a <a href="https://cloud.google.com/apis/design/resource_names#full_resource_name">full resource name</a> on GCP).
        /// </summary>
        /// <remarks>
        /// On some cloud providers, it may not be possible to determine the full ID at startup,
        /// so it may be necessary to set <c>cloud.resource_id</c> as a span attribute instead.The exact value to use for <c>cloud.resource_id</c> depends on the cloud provider.
        /// The following well-known definitions MUST be used if you set this attribute and they apply:<ul>
        /// <li><strong>AWS Lambda:</strong> The function <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>.
        /// Take care not to use the &amp;#34;invoked ARN&amp;#34; directly but replace any
        /// <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html">alias suffix</a>
        /// with the resolved function version, as the same runtime instance may be invokable with
        /// multiple different aliases.</li>
        /// <li><strong>GCP:</strong> The <a href="https://cloud.google.com/iam/docs/full-resource-names">URI of the resource</a></li>
        /// <li><strong>Azure:</strong> The <a href="https://docs.microsoft.com/rest/api/resources/resources/get-by-id">Fully Qualified Resource ID</a> of the invoked function,
        /// <em>not</em> the function app, having the form
        /// <c>/subscriptions/&lt;SUBSCIPTION_GUID&gt;/resourceGroups/&lt;RG&gt;/providers/Microsoft.Web/sites/&lt;FUNCAPP&gt;/functions/&lt;FUNC&gt;</c>.
        /// This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        /// a TracerProvider</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeCloudResourceId = "cloud.resource_id";

        /// <summary>
        /// The <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#id">event_id</a> uniquely identifies the event.
        /// </summary>
        public const string AttributeCloudeventsEventId = "cloudevents.event_id";

        /// <summary>
        /// The <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1">source</a> identifies the context in which an event happened.
        /// </summary>
        public const string AttributeCloudeventsEventSource = "cloudevents.event_source";

        /// <summary>
        /// The <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#specversion">version of the CloudEvents specification</a> which the event uses.
        /// </summary>
        public const string AttributeCloudeventsEventSpecVersion = "cloudevents.event_spec_version";

        /// <summary>
        /// The <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject">subject</a> of the event in the context of the event producer (identified by source).
        /// </summary>
        public const string AttributeCloudeventsEventSubject = "cloudevents.event_subject";

        /// <summary>
        /// The <a href="https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type">event_type</a> contains a value describing the type of event related to the originating occurrence.
        /// </summary>
        public const string AttributeCloudeventsEventType = "cloudevents.event_type";

        /// <summary>
        /// The column number in <c>code.filepath</c> best representing the operation. It SHOULD point within the code unit named in <c>code.function</c>.
        /// </summary>
        public const string AttributeCodeColumn = "code.column";

        /// <summary>
        /// The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).
        /// </summary>
        public const string AttributeCodeFilepath = "code.filepath";

        /// <summary>
        /// The method or function name, or equivalent (usually rightmost part of the code unit's name).
        /// </summary>
        public const string AttributeCodeFunction = "code.function";

        /// <summary>
        /// The line number in <c>code.filepath</c> best representing the operation. It SHOULD point within the code unit named in <c>code.function</c>.
        /// </summary>
        public const string AttributeCodeLineno = "code.lineno";

        /// <summary>
        /// The &quot;namespace&quot; within which <c>code.function</c> is defined. Usually the qualified class or module name, such that <c>code.namespace</c> + some separator + <c>code.function</c> form a unique identifier for the code unit.
        /// </summary>
        public const string AttributeCodeNamespace = "code.namespace";

        /// <summary>
        /// A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
        /// </summary>
        public const string AttributeCodeStacktrace = "code.stacktrace";

        /// <summary>
        /// The command used to run the container (i.e. the command name).
        /// </summary>
        /// <remarks>
        /// If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.
        /// </remarks>
        public const string AttributeContainerCommand = "container.command";

        /// <summary>
        /// All the command arguments (including the command/executable itself) run by the container. [2].
        /// </summary>
        public const string AttributeContainerCommandArgs = "container.command_args";

        /// <summary>
        /// The full command run by the container as a single string representing the full command. [2].
        /// </summary>
        public const string AttributeContainerCommandLine = "container.command_line";

        /// <summary>
        /// The CPU state for this data point.
        /// </summary>
        public const string AttributeContainerCpuState = "container.cpu.state";

        /// <summary>
        /// Container ID. Usually a UUID, as for example used to <a href="https://docs.docker.com/engine/reference/run/#container-identification">identify Docker containers</a>. The UUID might be abbreviated.
        /// </summary>
        public const string AttributeContainerId = "container.id";

        /// <summary>
        /// Runtime specific image identifier. Usually a hash algorithm followed by a UUID.
        /// </summary>
        /// <remarks>
        /// Docker defines a sha256 of the image id; <c>container.image.id</c> corresponds to the <c>Image</c> field from the Docker container inspect <a href="https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect">API</a> endpoint.
        /// K8s defines a link to the container registry repository with digest <c>&#34;imageID&#34;: &#34;registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625&#34;</c>.
        /// The ID is assinged by the container runtime and can vary in different environments. Consider using <c>oci.manifest.digest</c> if it is important to identify the same image in different environments/runtimes.
        /// </remarks>
        public const string AttributeContainerImageId = "container.image.id";

        /// <summary>
        /// Name of the image the container was built on.
        /// </summary>
        public const string AttributeContainerImageName = "container.image.name";

        /// <summary>
        /// Repo digests of the container image as provided by the container runtime.
        /// </summary>
        /// <remarks>
        /// <a href="https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect">Docker</a> and <a href="https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238">CRI</a> report those under the <c>RepoDigests</c> field.
        /// </remarks>
        public const string AttributeContainerImageRepoDigests = "container.image.repo_digests";

        /// <summary>
        /// Container image tags. An example can be found in <a href="https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect">Docker Image Inspect</a>. Should be only the <c><tag></c> section of the full name for example from <c>registry.example.com/my-org/my-image:<tag></c>.
        /// </summary>
        public const string AttributeContainerImageTags = "container.image.tags";

        /// <summary>
        /// Container name used by container runtime.
        /// </summary>
        public const string AttributeContainerName = "container.name";

        /// <summary>
        /// The container runtime managing this container.
        /// </summary>
        public const string AttributeContainerRuntime = "container.runtime";

        /// <summary>
        /// The consistency level of the query. Based on consistency values from <a href="https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html">CQL</a>.
        /// </summary>
        public const string AttributeDbCassandraConsistencyLevel = "db.cassandra.consistency_level";

        /// <summary>
        /// The data center of the coordinating node for a query.
        /// </summary>
        public const string AttributeDbCassandraCoordinatorDc = "db.cassandra.coordinator.dc";

        /// <summary>
        /// The ID of the coordinating node for a query.
        /// </summary>
        public const string AttributeDbCassandraCoordinatorId = "db.cassandra.coordinator.id";

        /// <summary>
        /// Whether or not the query is idempotent.
        /// </summary>
        public const string AttributeDbCassandraIdempotence = "db.cassandra.idempotence";

        /// <summary>
        /// The fetch size used for paging, i.e. how many rows will be returned at once.
        /// </summary>
        public const string AttributeDbCassandraPageSize = "db.cassandra.page_size";

        /// <summary>
        /// The number of times a query was speculatively executed. Not set or <c>0</c> if the query was not executed speculatively.
        /// </summary>
        public const string AttributeDbCassandraSpeculativeExecutionCount = "db.cassandra.speculative_execution_count";

        /// <summary>
        /// The name of the primary Cassandra table that the operation is acting upon, including the keyspace name (if applicable).
        /// </summary>
        /// <remarks>
        /// This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of <c>db.statement</c> just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
        /// </remarks>
        public const string AttributeDbCassandraTable = "db.cassandra.table";

        /// <summary>
        /// Unique Cosmos client instance id.
        /// </summary>
        public const string AttributeDbCosmosdbClientId = "db.cosmosdb.client_id";

        /// <summary>
        /// Cosmos client connection mode.
        /// </summary>
        public const string AttributeDbCosmosdbConnectionMode = "db.cosmosdb.connection_mode";

        /// <summary>
        /// Cosmos DB container name.
        /// </summary>
        public const string AttributeDbCosmosdbContainer = "db.cosmosdb.container";

        /// <summary>
        /// CosmosDB Operation Type.
        /// </summary>
        public const string AttributeDbCosmosdbOperationType = "db.cosmosdb.operation_type";

        /// <summary>
        /// RU consumed for that operation.
        /// </summary>
        public const string AttributeDbCosmosdbRequestCharge = "db.cosmosdb.request_charge";

        /// <summary>
        /// Request payload size in bytes.
        /// </summary>
        public const string AttributeDbCosmosdbRequestContentLength = "db.cosmosdb.request_content_length";

        /// <summary>
        /// Cosmos DB status code.
        /// </summary>
        public const string AttributeDbCosmosdbStatusCode = "db.cosmosdb.status_code";

        /// <summary>
        /// Cosmos DB sub status code.
        /// </summary>
        public const string AttributeDbCosmosdbSubStatusCode = "db.cosmosdb.sub_status_code";

        /// <summary>
        /// Represents the identifier of an Elasticsearch cluster.
        /// </summary>
        public const string AttributeDbElasticsearchClusterName = "db.elasticsearch.cluster.name";

        /// <summary>
        /// An identifier (address, unique name, or any other identifier) of the database instance that is executing queries or mutations on the current connection. This is useful in cases where the database is running in a clustered environment and the instrumentation is able to record the node executing the query. The client may obtain this value in databases like MySQL using queries like <c>select @@hostname</c>.
        /// </summary>
        public const string AttributeDbInstanceId = "db.instance.id";

        /// <summary>
        /// The MongoDB collection being accessed within the database stated in <c>db.name</c>.
        /// </summary>
        public const string AttributeDbMongodbCollection = "db.mongodb.collection";

        /// <summary>
        /// The Microsoft SQL Server <a href="https://docs.microsoft.com/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15">instance name</a> connecting to. This name is used to determine the port of a named instance.
        /// </summary>
        /// <remarks>
        /// If setting a <c>db.mssql.instance_name</c>, <c>server.port</c> is no longer required (but still recommended if non-standard).
        /// </remarks>
        public const string AttributeDbMssqlInstanceName = "db.mssql.instance_name";

        /// <summary>
        /// This attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).
        /// </summary>
        /// <remarks>
        /// In some SQL databases, the database name to be used is called &amp;#34;schema name&amp;#34;. In case there are multiple layers that could be considered for database name (e.g. Oracle instance name and schema name), the database name to be used is the more specific layer (e.g. Oracle schema name).
        /// </remarks>
        public const string AttributeDbName = "db.name";

        /// <summary>
        /// The name of the operation being executed, e.g. the <a href="https://docs.mongodb.com/manual/reference/command/#database-operations">MongoDB command name</a> such as <c>findAndModify</c>, or the SQL keyword.
        /// </summary>
        /// <remarks>
        /// When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of <c>db.statement</c> just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.
        /// </remarks>
        public const string AttributeDbOperation = "db.operation";

        /// <summary>
        /// The index of the database being accessed as used in the <a href="https://redis.io/commands/select"><c>SELECT</c> command</a>, provided as an integer. To be used instead of the generic <c>db.name</c> attribute.
        /// </summary>
        public const string AttributeDbRedisDatabaseIndex = "db.redis.database_index";

        /// <summary>
        /// The name of the primary table that the operation is acting upon, including the database name (if applicable).
        /// </summary>
        /// <remarks>
        /// It is not recommended to attempt any client-side parsing of <c>db.statement</c> just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.
        /// </remarks>
        public const string AttributeDbSqlTable = "db.sql.table";

        /// <summary>
        /// The database statement being executed.
        /// </summary>
        public const string AttributeDbStatement = "db.statement";

        /// <summary>
        /// An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
        /// </summary>
        public const string AttributeDbSystem = "db.system";

        /// <summary>
        /// Username for accessing the database.
        /// </summary>
        public const string AttributeDbUser = "db.user";

        /// <summary>
        /// Name of the <a href="https://wikipedia.org/wiki/Deployment_environment">deployment environment</a> (aka deployment tier).
        /// </summary>
        /// <remarks>
        /// <c>deployment.environment</c> does not affect the uniqueness constraints defined through
        /// the <c>service.namespace</c>, <c>service.name</c> and <c>service.instance.id</c> resource attributes.
        /// This implies that resources carrying the following attribute combinations MUST be
        /// considered to be identifying the same service:<ul>
        /// <li><c>service.name=frontend</c>, <c>deployment.environment=production</c></li>
        /// <li><c>service.name=frontend</c>, <c>deployment.environment=staging</c></li>
        /// </ul>.
        /// </remarks>
        public const string AttributeDeploymentEnvironment = "deployment.environment";

        /// <summary>
        /// Deprecated, use <c>server.address</c>, <c>server.port</c> attributes instead.
        /// </summary>
        [Obsolete("Replaced by `server.address` and `server.port`.")]
        public const string AttributeDbConnectionString = "db.connection_string";

        /// <summary>
        /// Deprecated, use <c>db.instance.id</c> instead.
        /// </summary>
        [Obsolete("Replaced by `db.instance.id`")]
        public const string AttributeDbElasticsearchNodeName = "db.elasticsearch.node.name";

        /// <summary>
        /// Removed, no replacement at this time.
        /// </summary>
        [Obsolete("Removed as not used")]
        public const string AttributeDbJdbcDriverClassname = "db.jdbc.driver_classname";

        /// <summary>
        /// Deprecated, use <c>network.protocol.name</c> instead.
        /// </summary>
        [Obsolete("Replaced by `network.protocol.name`")]
        public const string AttributeHttpFlavor = "http.flavor";

        /// <summary>
        /// Deprecated, use <c>http.request.method</c> instead.
        /// </summary>
        [Obsolete("Replaced by `http.request.method`")]
        public const string AttributeHttpMethod = "http.method";

        /// <summary>
        /// Deprecated, use <c>http.request.header.content-length</c> instead.
        /// </summary>
        [Obsolete("Replaced by `http.request.header.content-length`")]
        public const string AttributeHttpRequestContentLength = "http.request_content_length";

        /// <summary>
        /// Deprecated, use <c>http.response.header.content-length</c> instead.
        /// </summary>
        [Obsolete("Replaced by `http.response.header.content-length`")]
        public const string AttributeHttpResponseContentLength = "http.response_content_length";

        /// <summary>
        /// Deprecated, use <c>url.scheme</c> instead.
        /// </summary>
        [Obsolete("Replaced by `url.scheme` instead")]
        public const string AttributeHttpScheme = "http.scheme";

        /// <summary>
        /// Deprecated, use <c>http.response.status_code</c> instead.
        /// </summary>
        [Obsolete("Replaced by `http.response.status_code`")]
        public const string AttributeHttpStatusCode = "http.status_code";

        /// <summary>
        /// Deprecated, use <c>url.path</c> and <c>url.query</c> instead.
        /// </summary>
        [Obsolete("Split to `url.path` and `url.query")]
        public const string AttributeHttpTarget = "http.target";

        /// <summary>
        /// Deprecated, use <c>url.full</c> instead.
        /// </summary>
        [Obsolete("Replaced by `url.full`")]
        public const string AttributeHttpUrl = "http.url";

        /// <summary>
        /// Deprecated, use <c>user_agent.original</c> instead.
        /// </summary>
        [Obsolete("Replaced by `user_agent.original`")]
        public const string AttributeHttpUserAgent = "http.user_agent";

        /// <summary>
        /// &quot;Deprecated, use <c>messaging.destination.partition.id</c> instead.&quot;.
        /// </summary>
        [Obsolete("Replaced by `messaging.destination.partition.id`")]
        public const string AttributeMessagingKafkaDestinationPartition = "messaging.kafka.destination.partition";

        /// <summary>
        /// Deprecated, use <c>server.address</c>.
        /// </summary>
        [Obsolete("Replaced by `server.address`")]
        public const string AttributeNetHostName = "net.host.name";

        /// <summary>
        /// Deprecated, use <c>server.port</c>.
        /// </summary>
        [Obsolete("Replaced by `server.port`")]
        public const string AttributeNetHostPort = "net.host.port";

        /// <summary>
        /// Deprecated, use <c>server.address</c> on client spans and <c>client.address</c> on server spans.
        /// </summary>
        [Obsolete("Replaced by `server.address` on client spans and `client.address` on server spans")]
        public const string AttributeNetPeerName = "net.peer.name";

        /// <summary>
        /// Deprecated, use <c>server.port</c> on client spans and <c>client.port</c> on server spans.
        /// </summary>
        [Obsolete("Replaced by `server.port` on client spans and `client.port` on server spans")]
        public const string AttributeNetPeerPort = "net.peer.port";

        /// <summary>
        /// Deprecated, use <c>network.protocol.name</c>.
        /// </summary>
        [Obsolete("Replaced by `network.protocol.name`")]
        public const string AttributeNetProtocolName = "net.protocol.name";

        /// <summary>
        /// Deprecated, use <c>network.protocol.version</c>.
        /// </summary>
        [Obsolete("Replaced by `network.protocol.version`")]
        public const string AttributeNetProtocolVersion = "net.protocol.version";

        /// <summary>
        /// Deprecated, use <c>network.transport</c> and <c>network.type</c>.
        /// </summary>
        [Obsolete("Split to `network.transport` and `network.type`")]
        public const string AttributeNetSockFamily = "net.sock.family";

        /// <summary>
        /// Deprecated, use <c>network.local.address</c>.
        /// </summary>
        [Obsolete("Replaced by `network.local.address`")]
        public const string AttributeNetSockHostAddr = "net.sock.host.addr";

        /// <summary>
        /// Deprecated, use <c>network.local.port</c>.
        /// </summary>
        [Obsolete("Replaced by `network.local.port`")]
        public const string AttributeNetSockHostPort = "net.sock.host.port";

        /// <summary>
        /// Deprecated, use <c>network.peer.address</c>.
        /// </summary>
        [Obsolete("Replaced by `network.peer.address`")]
        public const string AttributeNetSockPeerAddr = "net.sock.peer.addr";

        /// <summary>
        /// Deprecated, no replacement at this time.
        /// </summary>
        [Obsolete("Removed")]
        public const string AttributeNetSockPeerName = "net.sock.peer.name";

        /// <summary>
        /// Deprecated, use <c>network.peer.port</c>.
        /// </summary>
        [Obsolete("Replaced by `network.peer.port`")]
        public const string AttributeNetSockPeerPort = "net.sock.peer.port";

        /// <summary>
        /// Deprecated, use <c>network.transport</c>.
        /// </summary>
        [Obsolete("Replaced by `network.transport`")]
        public const string AttributeNetTransport = "net.transport";

        /// <summary>
        /// Deprecated, use <c>system.process.status</c> instead.
        /// </summary>
        [Obsolete("Replaced by `system.process.status`")]
        public const string AttributeSystemProcessesStatus = "system.processes.status";

        /// <summary>
        /// Destination address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
        /// </summary>
        /// <remarks>
        /// When observed from the source side, and when communicating through an intermediary, <c>destination.address</c> SHOULD represent the destination address behind any intermediaries, for example proxies, if it&amp;#39;s available.
        /// </remarks>
        public const string AttributeDestinationAddress = "destination.address";

        /// <summary>
        /// Destination port number.
        /// </summary>
        public const string AttributeDestinationPort = "destination.port";

        /// <summary>
        /// A unique identifier representing the device.
        /// </summary>
        /// <remarks>
        /// The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the <a href="https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor">vendor identifier</a>. On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found <a href="https://developer.android.com/training/articles/user-data-ids">here</a> on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.
        /// </remarks>
        public const string AttributeDeviceId = "device.id";

        /// <summary>
        /// The name of the device manufacturer.
        /// </summary>
        /// <remarks>
        /// The Android OS provides this field via <a href="https://developer.android.com/reference/android/os/Build#MANUFACTURER">Build</a>. iOS apps SHOULD hardcode the value <c>Apple</c>.
        /// </remarks>
        public const string AttributeDeviceManufacturer = "device.manufacturer";

        /// <summary>
        /// The model identifier for the device.
        /// </summary>
        /// <remarks>
        /// It&amp;#39;s recommended this value represents a machine-readable version of the model identifier rather than the market or consumer-friendly name of the device.
        /// </remarks>
        public const string AttributeDeviceModelIdentifier = "device.model.identifier";

        /// <summary>
        /// The marketing name for the device model.
        /// </summary>
        /// <remarks>
        /// It&amp;#39;s recommended this value represents a human-readable version of the device model rather than a machine-readable alternative.
        /// </remarks>
        public const string AttributeDeviceModelName = "device.model.name";

        /// <summary>
        /// The disk IO operation direction.
        /// </summary>
        public const string AttributeDiskIoDirection = "disk.io.direction";

        /// <summary>
        /// The name being queried.
        /// </summary>
        /// <remarks>
        /// If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.
        /// </remarks>
        public const string AttributeDnsQuestionName = "dns.question.name";

        /// <summary>
        /// Username or client_id extracted from the access token or <a href="https://tools.ietf.org/html/rfc7235#section-4.2">Authorization</a> header in the inbound request from outside the system.
        /// </summary>
        public const string AttributeEnduserId = "enduser.id";

        /// <summary>
        /// Actual/assumed role the client is making the request under extracted from token or application security context.
        /// </summary>
        public const string AttributeEnduserRole = "enduser.role";

        /// <summary>
        /// Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an <a href="https://tools.ietf.org/html/rfc6749#section-3.3">OAuth 2.0 Access Token</a> or an attribute value in a <a href="http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html">SAML 2.0 Assertion</a>.
        /// </summary>
        public const string AttributeEnduserScope = "enduser.scope";

        /// <summary>
        /// Describes a class of error the operation ended with.
        /// </summary>
        /// <remarks>
        /// The <c>error.type</c> SHOULD be predictable and SHOULD have low cardinality.
        /// Instrumentations SHOULD document the list of errors they report.The cardinality of <c>error.type</c> within one instrumentation library SHOULD be low.
        /// Telemetry consumers that aggregate data from multiple instrumentation libraries and applications
        /// should be prepared for <c>error.type</c> to have high cardinality at query time when no
        /// additional filters are applied.If the operation has completed successfully, instrumentations SHOULD NOT set <c>error.type</c>.If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),
        /// it&amp;#39;s RECOMMENDED to:<ul>
        /// <li>Use a domain-specific attribute</li>
        /// <li>Set <c>error.type</c> to capture all errors, regardless of whether they are defined within the domain-specific set or not</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeErrorType = "error.type";

        /// <summary>
        /// SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.
        /// </summary>
        /// <remarks>
        /// An exception is considered to have escaped (or left) the scope of a span,
        /// if that span is ended while the exception is still logically &amp;#34;in flight&amp;#34;.
        /// This may be actually &amp;#34;in flight&amp;#34; in some languages (e.g. if the exception
        /// is passed to a Context manager&amp;#39;s <c>__exit__</c> method in Python) but will
        /// usually be caught at the point of recording the exception in most languages.It is usually not possible to determine at the point where an exception is thrown
        /// whether it will escape the scope of a span.
        /// However, it is trivial to know that an exception
        /// will escape, if one checks for an active exception just before ending the span,
        /// as done in the <a href="#recording-an-exception">example for recording span exceptions</a>.It follows that an exception may still escape the scope of the span
        /// even if the <c>exception.escaped</c> attribute was not set or set to false,
        /// since the event might have been recorded at a time where it was not
        /// clear whether the exception will escape.
        /// </remarks>
        public const string AttributeExceptionEscaped = "exception.escaped";

        /// <summary>
        /// The exception message.
        /// </summary>
        public const string AttributeExceptionMessage = "exception.message";

        /// <summary>
        /// A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
        /// </summary>
        public const string AttributeExceptionStacktrace = "exception.stacktrace";

        /// <summary>
        /// The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
        /// </summary>
        public const string AttributeExceptionType = "exception.type";

        /// <summary>
        /// A boolean that is true if the serverless function is executed for the first time (aka cold-start).
        /// </summary>
        public const string AttributeFaasColdstart = "faas.coldstart";

        /// <summary>
        /// A string containing the schedule period as <a href="https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm">Cron Expression</a>.
        /// </summary>
        public const string AttributeFaasCron = "faas.cron";

        /// <summary>
        /// The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.
        /// </summary>
        public const string AttributeFaasDocumentCollection = "faas.document.collection";

        /// <summary>
        /// The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.
        /// </summary>
        public const string AttributeFaasDocumentName = "faas.document.name";

        /// <summary>
        /// Describes the type of the operation that was performed on the data.
        /// </summary>
        public const string AttributeFaasDocumentOperation = "faas.document.operation";

        /// <summary>
        /// A string containing the time when the data was accessed in the <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format expressed in <a href="https://www.w3.org/TR/NOTE-datetime">UTC</a>.
        /// </summary>
        public const string AttributeFaasDocumentTime = "faas.document.time";

        /// <summary>
        /// The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.
        /// </summary>
        /// <remarks>
        /// <ul>
        /// <li><strong>AWS Lambda:</strong> Use the (full) log stream name</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeFaasInstance = "faas.instance";

        /// <summary>
        /// The invocation ID of the current function invocation.
        /// </summary>
        public const string AttributeFaasInvocationId = "faas.invocation_id";

        /// <summary>
        /// The name of the invoked function.
        /// </summary>
        /// <remarks>
        /// SHOULD be equal to the <c>faas.name</c> resource attribute of the invoked function.
        /// </remarks>
        public const string AttributeFaasInvokedName = "faas.invoked_name";

        /// <summary>
        /// The cloud provider of the invoked function.
        /// </summary>
        /// <remarks>
        /// SHOULD be equal to the <c>cloud.provider</c> resource attribute of the invoked function.
        /// </remarks>
        public const string AttributeFaasInvokedProvider = "faas.invoked_provider";

        /// <summary>
        /// The cloud region of the invoked function.
        /// </summary>
        /// <remarks>
        /// SHOULD be equal to the <c>cloud.region</c> resource attribute of the invoked function.
        /// </remarks>
        public const string AttributeFaasInvokedRegion = "faas.invoked_region";

        /// <summary>
        /// The amount of memory available to the serverless function converted to Bytes.
        /// </summary>
        /// <remarks>
        /// It&amp;#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable <c>AWS_LAMBDA_FUNCTION_MEMORY_SIZE</c> provides this information (which must be multiplied by 1,048,576).
        /// </remarks>
        public const string AttributeFaasMaxMemory = "faas.max_memory";

        /// <summary>
        /// The name of the single function that this runtime instance executes.
        /// </summary>
        /// <remarks>
        /// This is the name of the function as configured/deployed on the FaaS
        /// platform and is usually different from the name of the callback
        /// function (which may be stored in the
        /// <a href="/docs/general/attributes.md#source-code-attributes"><c>code.namespace</c>/<c>code.function</c></a>
        /// span attributes).For some cloud providers, the above definition is ambiguous. The following
        /// definition of function name MUST be used for this attribute
        /// (and consequently the span name) for the listed cloud providers/products:<ul>
        /// <li><strong>Azure:</strong>  The full name <c>&lt;FUNCAPP&gt;/&lt;FUNC&gt;</c>, i.e., function app name
        /// followed by a forward slash followed by the function name (this form
        /// can also be seen in the resource JSON for the function).
        /// This means that a span attribute MUST be used, as an Azure function
        /// app can host multiple functions that would usually share
        /// a TracerProvider (see also the <c>cloud.resource_id</c> attribute)</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeFaasName = "faas.name";

        /// <summary>
        /// A string containing the function invocation time in the <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format expressed in <a href="https://www.w3.org/TR/NOTE-datetime">UTC</a>.
        /// </summary>
        public const string AttributeFaasTime = "faas.time";

        /// <summary>
        /// Type of the trigger which caused this function invocation.
        /// </summary>
        public const string AttributeFaasTrigger = "faas.trigger";

        /// <summary>
        /// The immutable version of the function being executed.
        /// </summary>
        /// <remarks>
        /// Depending on the cloud provider and platform, use:<ul>
        /// <li><strong>AWS Lambda:</strong> The <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html">function version</a>
        /// (an integer represented as a decimal string).</li>
        /// <li><strong>Google Cloud Run (Services):</strong> The <a href="https://cloud.google.com/run/docs/managing/revisions">revision</a>
        /// (i.e., the function name plus the revision suffix).</li>
        /// <li><strong>Google Cloud Functions:</strong> The value of the
        /// <a href="https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically"><c>K_REVISION</c> environment variable</a>.</li>
        /// <li><strong>Azure Functions:</strong> Not applicable. Do not set this attribute</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeFaasVersion = "faas.version";

        /// <summary>
        /// The unique identifier of the feature flag.
        /// </summary>
        public const string AttributeFeatureFlagKey = "feature_flag.key";

        /// <summary>
        /// The name of the service provider that performs the flag evaluation.
        /// </summary>
        public const string AttributeFeatureFlagProviderName = "feature_flag.provider_name";

        /// <summary>
        /// SHOULD be a semantic identifier for a value. If one is unavailable, a stringified version of the value can be used.
        /// </summary>
        /// <remarks>
        /// A semantic identifier, commonly referred to as a variant, provides a means
        /// for referring to a value without including the value itself. This can
        /// provide additional context for understanding the meaning behind a value.
        /// For example, the variant <c>red</c> maybe be used for the value <c>#c05543</c>.A stringified version of the value can be used in situations where a
        /// semantic identifier is unavailable. String representation of the value
        /// should be determined by the implementer.
        /// </remarks>
        public const string AttributeFeatureFlagVariant = "feature_flag.variant";

        /// <summary>
        /// Directory where the file is located. It should include the drive letter, when appropriate.
        /// </summary>
        public const string AttributeFileDirectory = "file.directory";

        /// <summary>
        /// File extension, excluding the leading dot.
        /// </summary>
        /// <remarks>
        /// When the file name has multiple extensions (example.tar.gz), only the last one should be captured (&amp;#34;gz&amp;#34;, not &amp;#34;tar.gz&amp;#34;).
        /// </remarks>
        public const string AttributeFileExtension = "file.extension";

        /// <summary>
        /// Name of the file including the extension, without the directory.
        /// </summary>
        public const string AttributeFileName = "file.name";

        /// <summary>
        /// Full path to the file, including the file name. It should include the drive letter, when appropriate.
        /// </summary>
        public const string AttributeFilePath = "file.path";

        /// <summary>
        /// File size in bytes.
        /// </summary>
        public const string AttributeFileSize = "file.size";

        /// <summary>
        /// The name of the Cloud Run <a href="https://cloud.google.com/run/docs/managing/job-executions">execution</a> being run for the Job, as set by the <a href="https://cloud.google.com/run/docs/container-contract#jobs-env-vars"><c>CLOUD_RUN_EXECUTION</c></a> environment variable.
        /// </summary>
        public const string AttributeGcpCloudRunJobExecution = "gcp.cloud_run.job.execution";

        /// <summary>
        /// The index for a task within an execution as provided by the <a href="https://cloud.google.com/run/docs/container-contract#jobs-env-vars"><c>CLOUD_RUN_TASK_INDEX</c></a> environment variable.
        /// </summary>
        public const string AttributeGcpCloudRunJobTaskIndex = "gcp.cloud_run.job.task_index";

        /// <summary>
        /// The hostname of a GCE instance. This is the full value of the default or <a href="https://cloud.google.com/compute/docs/instances/custom-hostname-vm">custom hostname</a>.
        /// </summary>
        public const string AttributeGcpGceInstanceHostname = "gcp.gce.instance.hostname";

        /// <summary>
        /// The instance name of a GCE instance. This is the value provided by <c>host.name</c>, the visible name of the instance in the Cloud Console UI, and the prefix for the default hostname of the instance as defined by the <a href="https://cloud.google.com/compute/docs/internal-dns#instance-fully-qualified-domain-names">default internal DNS name</a>.
        /// </summary>
        public const string AttributeGcpGceInstanceName = "gcp.gce.instance.name";

        /// <summary>
        /// The CPU architecture the host system is running on.
        /// </summary>
        public const string AttributeHostArch = "host.arch";

        /// <summary>
        /// The amount of level 2 memory cache available to the processor (in Bytes).
        /// </summary>
        public const string AttributeHostCpuCacheL2Size = "host.cpu.cache.l2.size";

        /// <summary>
        /// Family or generation of the CPU.
        /// </summary>
        public const string AttributeHostCpuFamily = "host.cpu.family";

        /// <summary>
        /// Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.
        /// </summary>
        public const string AttributeHostCpuModelId = "host.cpu.model.id";

        /// <summary>
        /// Model designation of the processor.
        /// </summary>
        public const string AttributeHostCpuModelName = "host.cpu.model.name";

        /// <summary>
        /// Stepping or core revisions.
        /// </summary>
        public const string AttributeHostCpuStepping = "host.cpu.stepping";

        /// <summary>
        /// Processor manufacturer identifier. A maximum 12-character string.
        /// </summary>
        /// <remarks>
        /// <a href="https://wiki.osdev.org/CPUID">CPUID</a> command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.
        /// </remarks>
        public const string AttributeHostCpuVendorId = "host.cpu.vendor.id";

        /// <summary>
        /// Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the <c>machine-id</c>. See the table below for the sources to use to determine the <c>machine-id</c> based on operating system.
        /// </summary>
        public const string AttributeHostId = "host.id";

        /// <summary>
        /// VM image ID or host OS image ID. For Cloud, this value is from the provider.
        /// </summary>
        public const string AttributeHostImageId = "host.image.id";

        /// <summary>
        /// Name of the VM image or OS install the host was instantiated from.
        /// </summary>
        public const string AttributeHostImageName = "host.image.name";

        /// <summary>
        /// The version string of the VM image or host OS as defined in <a href="/docs/resource/README.md#version-attributes">Version Attributes</a>.
        /// </summary>
        public const string AttributeHostImageVersion = "host.image.version";

        /// <summary>
        /// Available IP addresses of the host, excluding loopback interfaces.
        /// </summary>
        /// <remarks>
        /// IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the <a href="https://www.rfc-editor.org/rfc/rfc5952.html">RFC 5952</a> format.
        /// </remarks>
        public const string AttributeHostIp = "host.ip";

        /// <summary>
        /// Available MAC addresses of the host, excluding loopback interfaces.
        /// </summary>
        /// <remarks>
        /// MAC Addresses MUST be represented in <a href="https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf">IEEE RA hexadecimal form</a>: as hyphen-separated octets in uppercase hexadecimal form from most to least significant.
        /// </remarks>
        public const string AttributeHostMac = "host.mac";

        /// <summary>
        /// Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.
        /// </summary>
        public const string AttributeHostName = "host.name";

        /// <summary>
        /// Type of host. For Cloud, this must be the machine type.
        /// </summary>
        public const string AttributeHostType = "host.type";

        /// <summary>
        /// State of the HTTP connection in the HTTP connection pool.
        /// </summary>
        public const string AttributeHttpConnectionState = "http.connection.state";

        /// <summary>
        /// The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the <a href="https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length">Content-Length</a> header. For requests using transport encoding, this should be the compressed size.
        /// </summary>
        public const string AttributeHttpRequestBodySize = "http.request.body.size";

        /// <summary>
        /// HTTP request method.
        /// </summary>
        /// <remarks>
        /// HTTP request method value SHOULD be &amp;#34;known&amp;#34; to the instrumentation.
        /// By default, this convention defines &amp;#34;known&amp;#34; methods as the ones listed in <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-methods">RFC9110</a>
        /// and the PATCH method defined in <a href="https://www.rfc-editor.org/rfc/rfc5789.html">RFC5789</a>.If the HTTP request method is not known to instrumentation, it MUST set the <c>http.request.method</c> attribute to <c>_OTHER</c>.If the HTTP instrumentation could end up converting valid HTTP request methods to <c>_OTHER</c>, then it MUST provide a way to override
        /// the list of known HTTP methods. If this override is done via environment variable, then the environment variable MUST be named
        /// OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods
        /// (this list MUST be a full override of the default known method, it is not a list of known methods in addition to the defaults).HTTP method names are case-sensitive and <c>http.request.method</c> attribute value MUST match a known HTTP method name exactly.
        /// Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, SHOULD populate a canonical equivalent.
        /// Tracing instrumentations that do so, MUST also set <c>http.request.method_original</c> to the original value.
        /// </remarks>
        public const string AttributeHttpRequestMethod = "http.request.method";

        /// <summary>
        /// Original HTTP method sent by the client in the request line.
        /// </summary>
        public const string AttributeHttpRequestMethodOriginal = "http.request.method_original";

        /// <summary>
        /// The ordinal number of request resending attempt (for any reason, including redirects).
        /// </summary>
        /// <remarks>
        /// The resend count SHOULD be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).
        /// </remarks>
        public const string AttributeHttpRequestResendCount = "http.request.resend_count";

        /// <summary>
        /// The total size of the request in bytes. This should be the total number of bytes sent over the wire, including the request line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and request body if any.
        /// </summary>
        public const string AttributeHttpRequestSize = "http.request.size";

        /// <summary>
        /// The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the <a href="https://www.rfc-editor.org/rfc/rfc9110.html#field.content-length">Content-Length</a> header. For requests using transport encoding, this should be the compressed size.
        /// </summary>
        public const string AttributeHttpResponseBodySize = "http.response.body.size";

        /// <summary>
        /// The total size of the response in bytes. This should be the total number of bytes sent over the wire, including the status line (HTTP/1.1), framing (HTTP/2 and HTTP/3), headers, and response body and trailers if any.
        /// </summary>
        public const string AttributeHttpResponseSize = "http.response.size";

        /// <summary>
        /// <a href="https://tools.ietf.org/html/rfc7231#section-6">HTTP response status code</a>.
        /// </summary>
        public const string AttributeHttpResponseStatusCode = "http.response.status_code";

        /// <summary>
        /// The matched route, that is, the path template in the format used by the respective server framework.
        /// </summary>
        /// <remarks>
        /// MUST NOT be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.
        /// SHOULD include the <a href="/docs/http/http-spans.md#http-server-definitions">application root</a> if there is one.
        /// </remarks>
        public const string AttributeHttpRoute = "http.route";

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        public const string AttributeK8sClusterName = "k8s.cluster.name";

        /// <summary>
        /// A pseudo-ID for the cluster, set to the UID of the <c>kube-system</c> namespace.
        /// </summary>
        /// <remarks>
        /// K8s doesn&amp;#39;t have support for obtaining a cluster ID. If this is ever
        /// added, we will recommend collecting the <c>k8s.cluster.uid</c> through the
        /// official APIs. In the meantime, we are able to use the <c>uid</c> of the
        /// <c>kube-system</c> namespace as a proxy for cluster ID. Read on for the
        /// rationale.Every object created in a K8s cluster is assigned a distinct UID. The
        /// <c>kube-system</c> namespace is used by Kubernetes itself and will exist
        /// for the lifetime of the cluster. Using the <c>uid</c> of the <c>kube-system</c>
        /// namespace is a reasonable proxy for the K8s ClusterID as it will only
        /// change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
        /// UUIDs as standardized by
        /// <a href="https://www.itu.int/ITU-T/studygroups/com17/oid.html">ISO/IEC 9834-8 and ITU-T X.667</a>.
        /// Which states:&amp;gt; If generated according to one of the mechanisms defined in Rec.
        ///   ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
        ///   different from all other UUIDs generated before 3603 A.D., or is
        ///   extremely likely to be different (depending on the mechanism chosen).Therefore, UIDs between clusters should be extremely unlikely to
        /// conflict.
        /// </remarks>
        public const string AttributeK8sClusterUid = "k8s.cluster.uid";

        /// <summary>
        /// The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (<c>container.name</c>).
        /// </summary>
        public const string AttributeK8sContainerName = "k8s.container.name";

        /// <summary>
        /// Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.
        /// </summary>
        public const string AttributeK8sContainerRestartCount = "k8s.container.restart_count";

        /// <summary>
        /// The name of the CronJob.
        /// </summary>
        public const string AttributeK8sCronjobName = "k8s.cronjob.name";

        /// <summary>
        /// The UID of the CronJob.
        /// </summary>
        public const string AttributeK8sCronjobUid = "k8s.cronjob.uid";

        /// <summary>
        /// The name of the DaemonSet.
        /// </summary>
        public const string AttributeK8sDaemonsetName = "k8s.daemonset.name";

        /// <summary>
        /// The UID of the DaemonSet.
        /// </summary>
        public const string AttributeK8sDaemonsetUid = "k8s.daemonset.uid";

        /// <summary>
        /// The name of the Deployment.
        /// </summary>
        public const string AttributeK8sDeploymentName = "k8s.deployment.name";

        /// <summary>
        /// The UID of the Deployment.
        /// </summary>
        public const string AttributeK8sDeploymentUid = "k8s.deployment.uid";

        /// <summary>
        /// The name of the Job.
        /// </summary>
        public const string AttributeK8sJobName = "k8s.job.name";

        /// <summary>
        /// The UID of the Job.
        /// </summary>
        public const string AttributeK8sJobUid = "k8s.job.uid";

        /// <summary>
        /// The name of the namespace that the pod is running in.
        /// </summary>
        public const string AttributeK8sNamespaceName = "k8s.namespace.name";

        /// <summary>
        /// The name of the Node.
        /// </summary>
        public const string AttributeK8sNodeName = "k8s.node.name";

        /// <summary>
        /// The UID of the Node.
        /// </summary>
        public const string AttributeK8sNodeUid = "k8s.node.uid";

        /// <summary>
        /// The name of the Pod.
        /// </summary>
        public const string AttributeK8sPodName = "k8s.pod.name";

        /// <summary>
        /// The UID of the Pod.
        /// </summary>
        public const string AttributeK8sPodUid = "k8s.pod.uid";

        /// <summary>
        /// The name of the ReplicaSet.
        /// </summary>
        public const string AttributeK8sReplicasetName = "k8s.replicaset.name";

        /// <summary>
        /// The UID of the ReplicaSet.
        /// </summary>
        public const string AttributeK8sReplicasetUid = "k8s.replicaset.uid";

        /// <summary>
        /// The name of the StatefulSet.
        /// </summary>
        public const string AttributeK8sStatefulsetName = "k8s.statefulset.name";

        /// <summary>
        /// The UID of the StatefulSet.
        /// </summary>
        public const string AttributeK8sStatefulsetUid = "k8s.statefulset.uid";

        /// <summary>
        /// The number of messages sent, received, or processed in the scope of the batching operation.
        /// </summary>
        /// <remarks>
        /// Instrumentations SHOULD NOT set <c>messaging.batch.message_count</c> on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use <c>messaging.batch.message_count</c> for batching APIs and SHOULD NOT use it for single-message APIs.
        /// </remarks>
        public const string AttributeMessagingBatchMessageCount = "messaging.batch.message_count";

        /// <summary>
        /// A unique identifier for the client that consumes or produces a message.
        /// </summary>
        public const string AttributeMessagingClientId = "messaging.client_id";

        /// <summary>
        /// A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).
        /// </summary>
        public const string AttributeMessagingDestinationAnonymous = "messaging.destination.anonymous";

        /// <summary>
        /// The message destination name.
        /// </summary>
        /// <remarks>
        /// Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
        /// the broker doesn&amp;#39;t have such notion, the destination name SHOULD uniquely identify the broker.
        /// </remarks>
        public const string AttributeMessagingDestinationName = "messaging.destination.name";

        /// <summary>
        /// The identifier of the partition messages are sent to or received from, unique within the <c>messaging.destination.name</c>.
        /// </summary>
        public const string AttributeMessagingDestinationPartitionId = "messaging.destination.partition.id";

        /// <summary>
        /// Low cardinality representation of the messaging destination name.
        /// </summary>
        /// <remarks>
        /// Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.
        /// </remarks>
        public const string AttributeMessagingDestinationTemplate = "messaging.destination.template";

        /// <summary>
        /// A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.
        /// </summary>
        public const string AttributeMessagingDestinationTemporary = "messaging.destination.temporary";

        /// <summary>
        /// A boolean that is true if the publish message destination is anonymous (could be unnamed or have auto-generated name).
        /// </summary>
        public const string AttributeMessagingDestinationPublishAnonymous = "messaging.destination_publish.anonymous";

        /// <summary>
        /// The name of the original destination the message was published to.
        /// </summary>
        /// <remarks>
        /// The name SHOULD uniquely identify a specific queue, topic, or other entity within the broker. If
        /// the broker doesn&amp;#39;t have such notion, the original destination name SHOULD uniquely identify the broker.
        /// </remarks>
        public const string AttributeMessagingDestinationPublishName = "messaging.destination_publish.name";

        /// <summary>
        /// The name of the consumer group the event consumer is associated with.
        /// </summary>
        public const string AttributeMessagingEventhubsConsumerGroup = "messaging.eventhubs.consumer.group";

        /// <summary>
        /// The UTC epoch seconds at which the message has been accepted and stored in the entity.
        /// </summary>
        public const string AttributeMessagingEventhubsMessageEnqueuedTime = "messaging.eventhubs.message.enqueued_time";

        /// <summary>
        /// The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.
        /// </summary>
        public const string AttributeMessagingGcpPubsubMessageOrderingKey = "messaging.gcp_pubsub.message.ordering_key";

        /// <summary>
        /// Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.
        /// </summary>
        public const string AttributeMessagingKafkaConsumerGroup = "messaging.kafka.consumer.group";

        /// <summary>
        /// Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from <c>messaging.message.id</c> in that they're not unique. If the key is <c>null</c>, the attribute MUST NOT be set.
        /// </summary>
        /// <remarks>
        /// If the key type is not string, it&amp;#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&amp;#39;t include its value.
        /// </remarks>
        public const string AttributeMessagingKafkaMessageKey = "messaging.kafka.message.key";

        /// <summary>
        /// The offset of a record in the corresponding Kafka partition.
        /// </summary>
        public const string AttributeMessagingKafkaMessageOffset = "messaging.kafka.message.offset";

        /// <summary>
        /// A boolean that is true if the message is a tombstone.
        /// </summary>
        public const string AttributeMessagingKafkaMessageTombstone = "messaging.kafka.message.tombstone";

        /// <summary>
        /// The size of the message body in bytes.
        /// </summary>
        /// <remarks>
        /// This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed
        /// body size should be used.
        /// </remarks>
        public const string AttributeMessagingMessageBodySize = "messaging.message.body.size";

        /// <summary>
        /// The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called &quot;Correlation ID&quot;.
        /// </summary>
        public const string AttributeMessagingMessageConversationId = "messaging.message.conversation_id";

        /// <summary>
        /// The size of the message body and metadata in bytes.
        /// </summary>
        /// <remarks>
        /// This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed
        /// size should be used.
        /// </remarks>
        public const string AttributeMessagingMessageEnvelopeSize = "messaging.message.envelope.size";

        /// <summary>
        /// A value used by the messaging system as an identifier for the message, represented as a string.
        /// </summary>
        public const string AttributeMessagingMessageId = "messaging.message.id";

        /// <summary>
        /// A string identifying the kind of messaging operation.
        /// </summary>
        /// <remarks>
        /// If a custom value is used, it MUST be of low cardinality.
        /// </remarks>
        public const string AttributeMessagingOperation = "messaging.operation";

        /// <summary>
        /// RabbitMQ message routing key.
        /// </summary>
        public const string AttributeMessagingRabbitmqDestinationRoutingKey = "messaging.rabbitmq.destination.routing_key";

        /// <summary>
        /// RabbitMQ message delivery tag.
        /// </summary>
        public const string AttributeMessagingRabbitmqMessageDeliveryTag = "messaging.rabbitmq.message.delivery_tag";

        /// <summary>
        /// Name of the RocketMQ producer/consumer group that is handling the message. The client type is identified by the SpanKind.
        /// </summary>
        public const string AttributeMessagingRocketmqClientGroup = "messaging.rocketmq.client_group";

        /// <summary>
        /// Model of message consumption. This only applies to consumer spans.
        /// </summary>
        public const string AttributeMessagingRocketmqConsumptionModel = "messaging.rocketmq.consumption_model";

        /// <summary>
        /// The delay time level for delay message, which determines the message delay time.
        /// </summary>
        public const string AttributeMessagingRocketmqMessageDelayTimeLevel = "messaging.rocketmq.message.delay_time_level";

        /// <summary>
        /// The timestamp in milliseconds that the delay message is expected to be delivered to consumer.
        /// </summary>
        public const string AttributeMessagingRocketmqMessageDeliveryTimestamp = "messaging.rocketmq.message.delivery_timestamp";

        /// <summary>
        /// It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.
        /// </summary>
        public const string AttributeMessagingRocketmqMessageGroup = "messaging.rocketmq.message.group";

        /// <summary>
        /// Key(s) of message, another way to mark message besides message id.
        /// </summary>
        public const string AttributeMessagingRocketmqMessageKeys = "messaging.rocketmq.message.keys";

        /// <summary>
        /// The secondary classifier of message besides topic.
        /// </summary>
        public const string AttributeMessagingRocketmqMessageTag = "messaging.rocketmq.message.tag";

        /// <summary>
        /// Type of message.
        /// </summary>
        public const string AttributeMessagingRocketmqMessageType = "messaging.rocketmq.message.type";

        /// <summary>
        /// Namespace of RocketMQ resources, resources in different namespaces are individual.
        /// </summary>
        public const string AttributeMessagingRocketmqNamespace = "messaging.rocketmq.namespace";

        /// <summary>
        /// The name of the subscription in the topic messages are received from.
        /// </summary>
        public const string AttributeMessagingServicebusDestinationSubscriptionName = "messaging.servicebus.destination.subscription_name";

        /// <summary>
        /// Describes the <a href="https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock">settlement type</a>.
        /// </summary>
        public const string AttributeMessagingServicebusDispositionStatus = "messaging.servicebus.disposition_status";

        /// <summary>
        /// Number of deliveries that have been attempted for this message.
        /// </summary>
        public const string AttributeMessagingServicebusMessageDeliveryCount = "messaging.servicebus.message.delivery_count";

        /// <summary>
        /// The UTC epoch seconds at which the message has been accepted and stored in the entity.
        /// </summary>
        public const string AttributeMessagingServicebusMessageEnqueuedTime = "messaging.servicebus.message.enqueued_time";

        /// <summary>
        /// An identifier for the messaging system being used. See below for a list of well-known identifiers.
        /// </summary>
        public const string AttributeMessagingSystem = "messaging.system";

        /// <summary>
        /// The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.
        /// </summary>
        public const string AttributeNetworkCarrierIcc = "network.carrier.icc";

        /// <summary>
        /// The mobile carrier country code.
        /// </summary>
        public const string AttributeNetworkCarrierMcc = "network.carrier.mcc";

        /// <summary>
        /// The mobile carrier network code.
        /// </summary>
        public const string AttributeNetworkCarrierMnc = "network.carrier.mnc";

        /// <summary>
        /// The name of the mobile carrier.
        /// </summary>
        public const string AttributeNetworkCarrierName = "network.carrier.name";

        /// <summary>
        /// This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
        /// </summary>
        public const string AttributeNetworkConnectionSubtype = "network.connection.subtype";

        /// <summary>
        /// The internet connection type.
        /// </summary>
        public const string AttributeNetworkConnectionType = "network.connection.type";

        /// <summary>
        /// The network IO operation direction.
        /// </summary>
        public const string AttributeNetworkIoDirection = "network.io.direction";

        /// <summary>
        /// Local address of the network connection - IP address or Unix domain socket name.
        /// </summary>
        public const string AttributeNetworkLocalAddress = "network.local.address";

        /// <summary>
        /// Local port number of the network connection.
        /// </summary>
        public const string AttributeNetworkLocalPort = "network.local.port";

        /// <summary>
        /// Peer address of the network connection - IP address or Unix domain socket name.
        /// </summary>
        public const string AttributeNetworkPeerAddress = "network.peer.address";

        /// <summary>
        /// Peer port number of the network connection.
        /// </summary>
        public const string AttributeNetworkPeerPort = "network.peer.port";

        /// <summary>
        /// <a href="https://osi-model.com/application-layer/">OSI application layer</a> or non-OSI equivalent.
        /// </summary>
        /// <remarks>
        /// The value SHOULD be normalized to lowercase.
        /// </remarks>
        public const string AttributeNetworkProtocolName = "network.protocol.name";

        /// <summary>
        /// The actual version of the protocol used for network communication.
        /// </summary>
        /// <remarks>
        /// If protocol version is subject to negotiation (for example using <a href="https://www.rfc-editor.org/rfc/rfc7301.html">ALPN</a>), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.
        /// </remarks>
        public const string AttributeNetworkProtocolVersion = "network.protocol.version";

        /// <summary>
        /// <a href="https://osi-model.com/transport-layer/">OSI transport layer</a> or <a href="https://wikipedia.org/wiki/Inter-process_communication">inter-process communication method</a>.
        /// </summary>
        /// <remarks>
        /// The value SHOULD be normalized to lowercase.Consider always setting the transport when setting a port number, since
        /// a port number is ambiguous without knowing the transport. For example
        /// different processes could be listening on TCP port 12345 and UDP port 12345.
        /// </remarks>
        public const string AttributeNetworkTransport = "network.transport";

        /// <summary>
        /// <a href="https://osi-model.com/network-layer/">OSI network layer</a> or non-OSI equivalent.
        /// </summary>
        /// <remarks>
        /// The value SHOULD be normalized to lowercase.
        /// </remarks>
        public const string AttributeNetworkType = "network.type";

        /// <summary>
        /// The digest of the OCI image manifest. For container images specifically is the digest by which the container image is known.
        /// </summary>
        /// <remarks>
        /// Follows <a href="https://github.com/opencontainers/image-spec/blob/main/manifest.md">OCI Image Manifest Specification</a>, and specifically the <a href="https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests">Digest property</a>.
        /// An example can be found in <a href="https://docs.docker.com/registry/spec/manifest-v2-2/#example-image-manifest">Example Image Manifest</a>.
        /// </remarks>
        public const string AttributeOciManifestDigest = "oci.manifest.digest";

        /// <summary>
        /// Unique identifier for a particular build or compilation of the operating system.
        /// </summary>
        public const string AttributeOsBuildId = "os.build_id";

        /// <summary>
        /// Human readable (not intended to be parsed) OS version information, like e.g. reported by <c>ver</c> or <c>lsb_release -a</c> commands.
        /// </summary>
        public const string AttributeOsDescription = "os.description";

        /// <summary>
        /// Human readable operating system name.
        /// </summary>
        public const string AttributeOsName = "os.name";

        /// <summary>
        /// The operating system type.
        /// </summary>
        public const string AttributeOsType = "os.type";

        /// <summary>
        /// The version string of the operating system as defined in <a href="/docs/resource/README.md#version-attributes">Version Attributes</a>.
        /// </summary>
        public const string AttributeOsVersion = "os.version";

        /// <summary>
        /// The <a href="/docs/resource/README.md#service"><c>service.name</c></a> of the remote service. SHOULD be equal to the actual <c>service.name</c> resource attribute of the remote service if any.
        /// </summary>
        public const string AttributePeerService = "peer.service";

        /// <summary>
        /// The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in <c>proc/[pid]/cmdline</c>. On Windows, can be set to the first parameter extracted from <c>GetCommandLineW</c>.
        /// </summary>
        public const string AttributeProcessCommand = "process.command";

        /// <summary>
        /// All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from <c>proc/[pid]/cmdline</c>. For libc-based executables, this would be the full argv vector passed to <c>main</c>.
        /// </summary>
        public const string AttributeProcessCommandArgs = "process.command_args";

        /// <summary>
        /// The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of <c>GetCommandLineW</c>. Do not set this if you have to assemble it just for monitoring; use <c>process.command_args</c> instead.
        /// </summary>
        public const string AttributeProcessCommandLine = "process.command_line";

        /// <summary>
        /// The name of the process executable. On Linux based systems, can be set to the <c>Name</c> in <c>proc/[pid]/status</c>. On Windows, can be set to the base name of <c>GetProcessImageFileNameW</c>.
        /// </summary>
        public const string AttributeProcessExecutableName = "process.executable.name";

        /// <summary>
        /// The full path to the process executable. On Linux based systems, can be set to the target of <c>proc/[pid]/exe</c>. On Windows, can be set to the result of <c>GetProcessImageFileNameW</c>.
        /// </summary>
        public const string AttributeProcessExecutablePath = "process.executable.path";

        /// <summary>
        /// The username of the user that owns the process.
        /// </summary>
        public const string AttributeProcessOwner = "process.owner";

        /// <summary>
        /// Parent Process identifier (PPID).
        /// </summary>
        public const string AttributeProcessParentPid = "process.parent_pid";

        /// <summary>
        /// Process identifier (PID).
        /// </summary>
        public const string AttributeProcessPid = "process.pid";

        /// <summary>
        /// An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
        /// </summary>
        public const string AttributeProcessRuntimeDescription = "process.runtime.description";

        /// <summary>
        /// The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.
        /// </summary>
        public const string AttributeProcessRuntimeName = "process.runtime.name";

        /// <summary>
        /// The version of the runtime of this process, as returned by the runtime without modification.
        /// </summary>
        public const string AttributeProcessRuntimeVersion = "process.runtime.version";

        /// <summary>
        /// The <a href="https://connect.build/docs/protocol/#error-codes">error codes</a> of the Connect request. Error codes are always string values.
        /// </summary>
        public const string AttributeRpcConnectRpcErrorCode = "rpc.connect_rpc.error_code";

        /// <summary>
        /// The <a href="https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md">numeric status code</a> of the gRPC request.
        /// </summary>
        public const string AttributeRpcGrpcStatusCode = "rpc.grpc.status_code";

        /// <summary>
        /// <c>error.code</c> property of response if it is an error response.
        /// </summary>
        public const string AttributeRpcJsonrpcErrorCode = "rpc.jsonrpc.error_code";

        /// <summary>
        /// <c>error.message</c> property of response if it is an error response.
        /// </summary>
        public const string AttributeRpcJsonrpcErrorMessage = "rpc.jsonrpc.error_message";

        /// <summary>
        /// <c>id</c> property of request or response. Since protocol allows id to be int, string, <c>null</c> or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of <c>null</c> value. Omit entirely if this is a notification.
        /// </summary>
        public const string AttributeRpcJsonrpcRequestId = "rpc.jsonrpc.request_id";

        /// <summary>
        /// Protocol version as in <c>jsonrpc</c> property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.
        /// </summary>
        public const string AttributeRpcJsonrpcVersion = "rpc.jsonrpc.version";

        /// <summary>
        /// The name of the (logical) method being called, must be equal to the $method part in the span name.
        /// </summary>
        /// <remarks>
        /// This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The <c>code.function</c> attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).
        /// </remarks>
        public const string AttributeRpcMethod = "rpc.method";

        /// <summary>
        /// The full (logical) name of the service being called, including its package name, if applicable.
        /// </summary>
        /// <remarks>
        /// This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The <c>code.namespace</c> attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).
        /// </remarks>
        public const string AttributeRpcService = "rpc.service";

        /// <summary>
        /// A string identifying the remoting system. See below for a list of well-known identifiers.
        /// </summary>
        public const string AttributeRpcSystem = "rpc.system";

        /// <summary>
        /// Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
        /// </summary>
        /// <remarks>
        /// When observed from the client side, and when communicating through an intermediary, <c>server.address</c> SHOULD represent the server address behind any intermediaries, for example proxies, if it&amp;#39;s available.
        /// </remarks>
        public const string AttributeServerAddress = "server.address";

        /// <summary>
        /// Server port number.
        /// </summary>
        /// <remarks>
        /// When observed from the client side, and when communicating through an intermediary, <c>server.port</c> SHOULD represent the server port behind any intermediaries, for example proxies, if it&amp;#39;s available.
        /// </remarks>
        public const string AttributeServerPort = "server.port";

        /// <summary>
        /// The string ID of the service instance.
        /// </summary>
        /// <remarks>
        /// MUST be unique for each instance of the same <c>service.namespace,service.name</c> pair (in other words
        /// <c>service.namespace,service.name,service.instance.id</c> triplet MUST be globally unique). The ID helps to
        /// distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled
        /// service).Implementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 <a href="https://www.ietf.org/rfc/rfc4122.txt">RFC
        /// 4122</a> UUID, but are free to use an inherent unique ID as the source of
        /// this value if stability is desirable. In that case, the ID SHOULD be used as source of a UUID Version 5 and
        /// SHOULD use the following UUID as the namespace: <c>4d63009a-8d0f-11ee-aad7-4c796ed8e320</c>.UUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is
        /// needed. Similar to what can be seen in the man page for the
        /// <a href="https://www.freedesktop.org/software/systemd/man/machine-id.html"><c>/etc/machine-id</c></a> file, the underlying
        /// data, such as pod name and namespace should be treated as confidential, being the user&amp;#39;s choice to expose it
        /// or not via another resource attribute.For applications running behind an application server (like unicorn), we do not recommend using one identifier
        /// for all processes participating in the application. Instead, it&amp;#39;s recommended each division (e.g. a worker
        /// thread in unicorn) to have its own instance.id.It&amp;#39;s not recommended for a Collector to set <c>service.instance.id</c> if it can&amp;#39;t unambiguously determine the
        /// service instance that is generating that telemetry. For instance, creating an UUID based on <c>pod.name</c> will
        /// likely be wrong, as the Collector might not know from which container within that pod the telemetry originated.
        /// However, Collectors can set the <c>service.instance.id</c> if they can unambiguously determine the service instance
        /// for that telemetry. This is typically the case for scraping receivers, as they know the target address and
        /// port.
        /// </remarks>
        public const string AttributeServiceInstanceId = "service.instance.id";

        /// <summary>
        /// Logical name of the service.
        /// </summary>
        /// <remarks>
        /// MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to <c>unknown_service:</c> concatenated with <a href="process.md#process"><c>process.executable.name</c></a>, e.g. <c>unknown_service:bash</c>. If <c>process.executable.name</c> is not available, the value MUST be set to <c>unknown_service</c>.
        /// </remarks>
        public const string AttributeServiceName = "service.name";

        /// <summary>
        /// A namespace for <c>service.name</c>.
        /// </summary>
        /// <remarks>
        /// A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. <c>service.name</c> is expected to be unique within the same namespace. If <c>service.namespace</c> is not specified in the Resource then <c>service.name</c> is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.
        /// </remarks>
        public const string AttributeServiceNamespace = "service.namespace";

        /// <summary>
        /// The version string of the service API or implementation. The format is not defined by these conventions.
        /// </summary>
        public const string AttributeServiceVersion = "service.version";

        /// <summary>
        /// A unique id to identify a session.
        /// </summary>
        public const string AttributeSessionId = "session.id";

        /// <summary>
        /// The previous <c>session.id</c> for this user, when known.
        /// </summary>
        public const string AttributeSessionPreviousId = "session.previous_id";

        /// <summary>
        /// Source address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.
        /// </summary>
        /// <remarks>
        /// When observed from the destination side, and when communicating through an intermediary, <c>source.address</c> SHOULD represent the source address behind any intermediaries, for example proxies, if it&amp;#39;s available.
        /// </remarks>
        public const string AttributeSourceAddress = "source.address";

        /// <summary>
        /// Source port number.
        /// </summary>
        public const string AttributeSourcePort = "source.port";

        /// <summary>
        /// The language of the telemetry SDK.
        /// </summary>
        public const string AttributeTelemetrySdkLanguage = "telemetry.sdk.language";

        /// <summary>
        /// The name of the telemetry SDK as defined above.
        /// </summary>
        /// <remarks>
        /// The OpenTelemetry SDK MUST set the <c>telemetry.sdk.name</c> attribute to <c>opentelemetry</c>.
        /// If another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the
        /// <c>telemetry.sdk.name</c> attribute to the fully-qualified class or module name of this SDK&amp;#39;s main entry point
        /// or another suitable identifier depending on the language.
        /// The identifier <c>opentelemetry</c> is reserved and MUST NOT be used in this case.
        /// All custom identifiers SHOULD be stable across different versions of an implementation.
        /// </remarks>
        public const string AttributeTelemetrySdkName = "telemetry.sdk.name";

        /// <summary>
        /// The version string of the telemetry SDK.
        /// </summary>
        public const string AttributeTelemetrySdkVersion = "telemetry.sdk.version";

        /// <summary>
        /// The name of the auto instrumentation agent or distribution, if used.
        /// </summary>
        /// <remarks>
        /// Official auto instrumentation agents and distributions SHOULD set the <c>telemetry.distro.name</c> attribute to
        /// a string starting with <c>opentelemetry-</c>, e.g. <c>opentelemetry-java-instrumentation</c>.
        /// </remarks>
        public const string AttributeTelemetryDistroName = "telemetry.distro.name";

        /// <summary>
        /// The version string of the auto instrumentation agent or distribution, if used.
        /// </summary>
        public const string AttributeTelemetryDistroVersion = "telemetry.distro.version";

        /// <summary>
        /// Current &quot;managed&quot; thread ID (as opposed to OS thread ID).
        /// </summary>
        public const string AttributeThreadId = "thread.id";

        /// <summary>
        /// Current thread name.
        /// </summary>
        public const string AttributeThreadName = "thread.name";

        /// <summary>
        /// String indicating the <a href="https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.5">cipher</a> used during the current connection.
        /// </summary>
        /// <remarks>
        /// The values allowed for <c>tls.cipher</c> MUST be one of the <c>Descriptions</c> of the <a href="https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#table-tls-parameters-4">registered TLS Cipher Suits</a>.
        /// </remarks>
        public const string AttributeTlsCipher = "tls.cipher";

        /// <summary>
        /// PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of <c>client.certificate_chain</c> since this value also exists in that list.
        /// </summary>
        public const string AttributeTlsClientCertificate = "tls.client.certificate";

        /// <summary>
        /// Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of <c>client.certificate</c> since that value should be the first certificate in the chain.
        /// </summary>
        public const string AttributeTlsClientCertificateChain = "tls.client.certificate_chain";

        /// <summary>
        /// Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
        /// </summary>
        public const string AttributeTlsClientHashMd5 = "tls.client.hash.md5";

        /// <summary>
        /// Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
        /// </summary>
        public const string AttributeTlsClientHashSha1 = "tls.client.hash.sha1";

        /// <summary>
        /// Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.
        /// </summary>
        public const string AttributeTlsClientHashSha256 = "tls.client.hash.sha256";

        /// <summary>
        /// Distinguished name of <a href="https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6">subject</a> of the issuer of the x.509 certificate presented by the client.
        /// </summary>
        public const string AttributeTlsClientIssuer = "tls.client.issuer";

        /// <summary>
        /// A hash that identifies clients based on how they perform an SSL/TLS handshake.
        /// </summary>
        public const string AttributeTlsClientJa3 = "tls.client.ja3";

        /// <summary>
        /// Date/Time indicating when client certificate is no longer considered valid.
        /// </summary>
        public const string AttributeTlsClientNotAfter = "tls.client.not_after";

        /// <summary>
        /// Date/Time indicating when client certificate is first considered valid.
        /// </summary>
        public const string AttributeTlsClientNotBefore = "tls.client.not_before";

        /// <summary>
        /// Also called an SNI, this tells the server which hostname to which the client is attempting to connect to.
        /// </summary>
        public const string AttributeTlsClientServerName = "tls.client.server_name";

        /// <summary>
        /// Distinguished name of subject of the x.509 certificate presented by the client.
        /// </summary>
        public const string AttributeTlsClientSubject = "tls.client.subject";

        /// <summary>
        /// Array of ciphers offered by the client during the client hello.
        /// </summary>
        public const string AttributeTlsClientSupportedCiphers = "tls.client.supported_ciphers";

        /// <summary>
        /// String indicating the curve used for the given cipher, when applicable.
        /// </summary>
        public const string AttributeTlsCurve = "tls.curve";

        /// <summary>
        /// Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.
        /// </summary>
        public const string AttributeTlsEstablished = "tls.established";

        /// <summary>
        /// String indicating the protocol being tunneled. Per the values in the <a href="https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids">IANA registry</a>, this string should be lower case.
        /// </summary>
        public const string AttributeTlsNextProtocol = "tls.next_protocol";

        /// <summary>
        /// Normalized lowercase protocol name parsed from original string of the negotiated <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES">SSL/TLS protocol version</a>.
        /// </summary>
        public const string AttributeTlsProtocolName = "tls.protocol.name";

        /// <summary>
        /// Numeric part of the version parsed from the original string of the negotiated <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES">SSL/TLS protocol version</a>.
        /// </summary>
        public const string AttributeTlsProtocolVersion = "tls.protocol.version";

        /// <summary>
        /// Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.
        /// </summary>
        public const string AttributeTlsResumed = "tls.resumed";

        /// <summary>
        /// PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of <c>server.certificate_chain</c> since this value also exists in that list.
        /// </summary>
        public const string AttributeTlsServerCertificate = "tls.server.certificate";

        /// <summary>
        /// Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of <c>server.certificate</c> since that value should be the first certificate in the chain.
        /// </summary>
        public const string AttributeTlsServerCertificateChain = "tls.server.certificate_chain";

        /// <summary>
        /// Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
        /// </summary>
        public const string AttributeTlsServerHashMd5 = "tls.server.hash.md5";

        /// <summary>
        /// Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
        /// </summary>
        public const string AttributeTlsServerHashSha1 = "tls.server.hash.sha1";

        /// <summary>
        /// Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.
        /// </summary>
        public const string AttributeTlsServerHashSha256 = "tls.server.hash.sha256";

        /// <summary>
        /// Distinguished name of <a href="https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6">subject</a> of the issuer of the x.509 certificate presented by the client.
        /// </summary>
        public const string AttributeTlsServerIssuer = "tls.server.issuer";

        /// <summary>
        /// A hash that identifies servers based on how they perform an SSL/TLS handshake.
        /// </summary>
        public const string AttributeTlsServerJa3s = "tls.server.ja3s";

        /// <summary>
        /// Date/Time indicating when server certificate is no longer considered valid.
        /// </summary>
        public const string AttributeTlsServerNotAfter = "tls.server.not_after";

        /// <summary>
        /// Date/Time indicating when server certificate is first considered valid.
        /// </summary>
        public const string AttributeTlsServerNotBefore = "tls.server.not_before";

        /// <summary>
        /// Distinguished name of subject of the x.509 certificate presented by the server.
        /// </summary>
        public const string AttributeTlsServerSubject = "tls.server.subject";

        /// <summary>
        /// Domain extracted from the <c>url.full</c>, such as &quot;opentelemetry.io&quot;.
        /// </summary>
        /// <remarks>
        /// In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the domain field. If the URL contains a <a href="https://www.rfc-editor.org/rfc/rfc2732#section-2">literal IPv6 address</a> enclosed by <c>[</c> and <c>]</c>, the <c>[</c> and <c>]</c> characters should also be captured in the domain field.
        /// </remarks>
        public const string AttributeUrlDomain = "url.domain";

        /// <summary>
        /// The file extension extracted from the <c>url.full</c>, excluding the leading dot.
        /// </summary>
        /// <remarks>
        /// The file extension is only set if it exists, as not every url has a file extension. When the file name has multiple extensions <c>example.tar.gz</c>, only the last one should be captured <c>gz</c>, not <c>tar.gz</c>.
        /// </remarks>
        public const string AttributeUrlExtension = "url.extension";

        /// <summary>
        /// The <a href="https://www.rfc-editor.org/rfc/rfc3986#section-3.5">URI fragment</a> component.
        /// </summary>
        public const string AttributeUrlFragment = "url.fragment";

        /// <summary>
        /// Absolute URL describing a network resource according to <a href="https://www.rfc-editor.org/rfc/rfc3986">RFC3986</a>.
        /// </summary>
        /// <remarks>
        /// For network calls, URL usually has <c>scheme://host[:port][path][?query][#fragment]</c> format, where the fragment is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.
        /// <c>url.full</c> MUST NOT contain credentials passed via URL in form of <c>https://username:password@www.example.com/</c>. In such case username and password SHOULD be redacted and attribute&amp;#39;s value SHOULD be <c>https://REDACTED:REDACTED@www.example.com/</c>.
        /// <c>url.full</c> SHOULD capture the absolute URL when it is available (or can be reconstructed). Sensitive content provided in <c>url.full</c> SHOULD be scrubbed when instrumentations can identify it.
        /// </remarks>
        public const string AttributeUrlFull = "url.full";

        /// <summary>
        /// Unmodified original URL as seen in the event source.
        /// </summary>
        /// <remarks>
        /// In network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.
        /// <c>url.original</c> might contain credentials passed via URL in form of <c>https://username:password@www.example.com/</c>. In such case password and username SHOULD NOT be redacted and attribute&amp;#39;s value SHOULD remain the same.
        /// </remarks>
        public const string AttributeUrlOriginal = "url.original";

        /// <summary>
        /// The <a href="https://www.rfc-editor.org/rfc/rfc3986#section-3.3">URI path</a> component.
        /// </summary>
        /// <remarks>
        /// Sensitive content provided in <c>url.path</c> SHOULD be scrubbed when instrumentations can identify it.
        /// </remarks>
        public const string AttributeUrlPath = "url.path";

        /// <summary>
        /// Port extracted from the <c>url.full</c>.
        /// </summary>
        public const string AttributeUrlPort = "url.port";

        /// <summary>
        /// The <a href="https://www.rfc-editor.org/rfc/rfc3986#section-3.4">URI query</a> component.
        /// </summary>
        /// <remarks>
        /// Sensitive content provided in <c>url.query</c> SHOULD be scrubbed when instrumentations can identify it.
        /// </remarks>
        public const string AttributeUrlQuery = "url.query";

        /// <summary>
        /// The highest registered url domain, stripped of the subdomain.
        /// </summary>
        /// <remarks>
        /// This value can be determined precisely with the <a href="http://publicsuffix.org">public suffix list</a>. For example, the registered domain for <c>foo.example.com</c> is <c>example.com</c>. Trying to approximate this by simply taking the last two labels will not work well for TLDs such as <c>co.uk</c>.
        /// </remarks>
        public const string AttributeUrlRegisteredDomain = "url.registered_domain";

        /// <summary>
        /// The <a href="https://www.rfc-editor.org/rfc/rfc3986#section-3.1">URI scheme</a> component identifying the used protocol.
        /// </summary>
        public const string AttributeUrlScheme = "url.scheme";

        /// <summary>
        /// The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
        /// </summary>
        /// <remarks>
        /// The subdomain portion of <c>www.east.mydomain.co.uk</c> is <c>east</c>. If the domain has multiple levels of subdomain, such as <c>sub2.sub1.example.com</c>, the subdomain field should contain <c>sub2.sub1</c>, with no trailing period.
        /// </remarks>
        public const string AttributeUrlSubdomain = "url.subdomain";

        /// <summary>
        /// The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is <c>com</c>.
        /// </summary>
        /// <remarks>
        /// This value can be determined precisely with the <a href="http://publicsuffix.org">public suffix list</a>.
        /// </remarks>
        public const string AttributeUrlTopLevelDomain = "url.top_level_domain";

        /// <summary>
        /// Name of the user-agent extracted from original. Usually refers to the browser's name.
        /// </summary>
        /// <remarks>
        /// <a href="https://www.whatsmyua.info">Example</a> of extracting browser&amp;#39;s name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the <c>user_agent.original</c>, the most significant name SHOULD be selected. In such a scenario it should align with <c>user_agent.version</c>.
        /// </remarks>
        public const string AttributeUserAgentName = "user_agent.name";

        /// <summary>
        /// Value of the <a href="https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent">HTTP User-Agent</a> header sent by the client.
        /// </summary>
        public const string AttributeUserAgentOriginal = "user_agent.original";

        /// <summary>
        /// Version of the user-agent extracted from original. Usually refers to the browser's version.
        /// </summary>
        /// <remarks>
        /// <a href="https://www.whatsmyua.info">Example</a> of extracting browser&amp;#39;s version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the <c>user_agent.original</c>, the most significant version SHOULD be selected. In such a scenario it should align with <c>user_agent.name</c>.
        /// </remarks>
        public const string AttributeUserAgentVersion = "user_agent.version";

        /// <summary>
        /// The ID of a running ECS task. The ID MUST be extracted from <c>task.arn</c>.
        /// </summary>
        public const string AttributeAwsEcsTaskId = "aws.ecs.task.id";

        /// <summary>
        /// The ARN of an <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html">ECS cluster</a>.
        /// </summary>
        public const string AttributeAwsEcsClusterArn = "aws.ecs.cluster.arn";

        /// <summary>
        /// The Amazon Resource Name (ARN) of an <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html">ECS container instance</a>.
        /// </summary>
        public const string AttributeAwsEcsContainerArn = "aws.ecs.container.arn";

        /// <summary>
        /// The <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">launch type</a> for an ECS task.
        /// </summary>
        public const string AttributeAwsEcsLaunchtype = "aws.ecs.launchtype";

        /// <summary>
        /// The ARN of a running <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids">ECS task</a>.
        /// </summary>
        public const string AttributeAwsEcsTaskArn = "aws.ecs.task.arn";

        /// <summary>
        /// The family name of the <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html">ECS task definition</a> used to create the ECS task.
        /// </summary>
        public const string AttributeAwsEcsTaskFamily = "aws.ecs.task.family";

        /// <summary>
        /// The revision for the task definition used to create the ECS task.
        /// </summary>
        public const string AttributeAwsEcsTaskRevision = "aws.ecs.task.revision";

        /// <summary>
        /// The ARN of an EKS cluster.
        /// </summary>
        public const string AttributeAwsEksClusterArn = "aws.eks.cluster.arn";

        /// <summary>
        /// The Amazon Resource Name(s) (ARN) of the AWS log group(s).
        /// </summary>
        /// <remarks>
        /// See the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format">log group ARN format documentation</a>.
        /// </remarks>
        public const string AttributeAwsLogGroupArns = "aws.log.group.arns";

        /// <summary>
        /// The name(s) of the AWS log group(s) an application is writing to.
        /// </summary>
        /// <remarks>
        /// Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.
        /// </remarks>
        public const string AttributeAwsLogGroupNames = "aws.log.group.names";

        /// <summary>
        /// The ARN(s) of the AWS log stream(s).
        /// </summary>
        /// <remarks>
        /// See the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format">log stream ARN format documentation</a>. One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.
        /// </remarks>
        public const string AttributeAwsLogStreamArns = "aws.log.stream.arns";

        /// <summary>
        /// The name(s) of the AWS log stream(s) an application is writing to.
        /// </summary>
        public const string AttributeAwsLogStreamNames = "aws.log.stream.names";

        /// <summary>
        /// Unique identifier for the application.
        /// </summary>
        public const string AttributeHerokuAppId = "heroku.app.id";

        /// <summary>
        /// Commit hash for the current release.
        /// </summary>
        public const string AttributeHerokuReleaseCommit = "heroku.release.commit";

        /// <summary>
        /// Time and date the release was created.
        /// </summary>
        public const string AttributeHerokuReleaseCreationTimestamp = "heroku.release.creation_timestamp";

        /// <summary>
        /// The name of the web engine.
        /// </summary>
        public const string AttributeWebengineName = "webengine.name";

        /// <summary>
        /// Additional description of the web engine (e.g. detailed version and edition information).
        /// </summary>
        public const string AttributeWebengineDescription = "webengine.description";

        /// <summary>
        /// The version of the web engine.
        /// </summary>
        public const string AttributeWebengineVersion = "webengine.version";

        /// <summary>
        /// The name of the instrumentation scope - (<c>InstrumentationScope.Name</c> in OTLP).
        /// </summary>
        public const string AttributeOtelScopeName = "otel.scope.name";

        /// <summary>
        /// The version of the instrumentation scope - (<c>InstrumentationScope.Version</c> in OTLP).
        /// </summary>
        public const string AttributeOtelScopeVersion = "otel.scope.version";

        /// <summary>
        /// None.
        /// </summary>
        [Obsolete("use the `otel.scope.name` attribute")]
        public const string AttributeOtelLibraryName = "otel.library.name";

        /// <summary>
        /// None.
        /// </summary>
        [Obsolete("use the `otel.scope.version` attribute")]
        public const string AttributeOtelLibraryVersion = "otel.library.version";

        /// <summary>
        /// The full invoked ARN as provided on the <c>Context</c> passed to the function (<c>Lambda-Runtime-Invoked-Function-Arn</c> header on the <c>/runtime/invocation/next</c> applicable).
        /// </summary>
        /// <remarks>
        /// This may be different from <c>cloud.resource_id</c> if an alias is involved.
        /// </remarks>
        public const string AttributeAwsLambdaInvokedArn = "aws.lambda.invoked_arn";

        /// <summary>
        /// Parent-child Reference type.
        /// </summary>
        /// <remarks>
        /// The causal relationship between a child Span and a parent Span.
        /// </remarks>
        public const string AttributeOpentracingRefType = "opentracing.ref_type";

        /// <summary>
        /// Name of the code, either &quot;OK&quot; or &quot;ERROR&quot;. MUST NOT be set if the status code is UNSET.
        /// </summary>
        public const string AttributeOtelStatusCode = "otel.status_code";

        /// <summary>
        /// Description of the Status if it has a value, otherwise not set.
        /// </summary>
        public const string AttributeOtelStatusDescription = "otel.status_description";

        /// <summary>
        /// The AWS request ID as returned in the response headers <c>x-amz-request-id</c> or <c>x-amz-requestid</c>.
        /// </summary>
        public const string AttributeAwsRequestId = "aws.request_id";

        /// <summary>
        /// The S3 bucket name the request refers to. Corresponds to the <c>--bucket</c> parameter of the <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html">S3 API</a> operations.
        /// </summary>
        /// <remarks>
        /// The <c>bucket</c> attribute is applicable to all S3 operations that reference a bucket, i.e. that require the bucket name as a mandatory parameter.
        /// This applies to almost all S3 operations except <c>list-buckets</c>.
        /// </remarks>
        public const string AttributeAwsS3Bucket = "aws.s3.bucket";

        /// <summary>
        /// The source object (in the form <c>bucket</c>/<c>key</c>) for the copy operation.
        /// </summary>
        /// <remarks>
        /// The <c>copy_source</c> attribute applies to S3 copy operations and corresponds to the <c>--copy-source</c> parameter
        /// of the <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html">copy-object operation within the S3 API</a>.
        /// This applies in particular to the following operations:<ul>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html">copy-object</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html">upload-part-copy</a></li>
        /// </ul>.
        /// </remarks>
        public const string AttributeAwsS3CopySource = "aws.s3.copy_source";

        /// <summary>
        /// The delete request container that specifies the objects to be deleted.
        /// </summary>
        /// <remarks>
        /// The <c>delete</c> attribute is only applicable to the <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html">delete-object</a> operation.
        /// The <c>delete</c> attribute corresponds to the <c>--delete</c> parameter of the
        /// <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-objects.html">delete-objects operation within the S3 API</a>.
        /// </remarks>
        public const string AttributeAwsS3Delete = "aws.s3.delete";

        /// <summary>
        /// The S3 object key the request refers to. Corresponds to the <c>--key</c> parameter of the <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html">S3 API</a> operations.
        /// </summary>
        /// <remarks>
        /// The <c>key</c> attribute is applicable to all object-related S3 operations, i.e. that require the object key as a mandatory parameter.
        /// This applies in particular to the following operations:<ul>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/copy-object.html">copy-object</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/delete-object.html">delete-object</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-object.html">get-object</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/head-object.html">head-object</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-object.html">put-object</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/restore-object.html">restore-object</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/select-object-content.html">select-object-content</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html">abort-multipart-upload</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html">complete-multipart-upload</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/create-multipart-upload.html">create-multipart-upload</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html">list-parts</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html">upload-part</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html">upload-part-copy</a></li>
        /// </ul>.
        /// </remarks>
        public const string AttributeAwsS3Key = "aws.s3.key";

        /// <summary>
        /// The part number of the part being uploaded in a multipart-upload operation. This is a positive integer between 1 and 10,000.
        /// </summary>
        /// <remarks>
        /// The <c>part_number</c> attribute is only applicable to the <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html">upload-part</a>
        /// and <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html">upload-part-copy</a> operations.
        /// The <c>part_number</c> attribute corresponds to the <c>--part-number</c> parameter of the
        /// <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html">upload-part operation within the S3 API</a>.
        /// </remarks>
        public const string AttributeAwsS3PartNumber = "aws.s3.part_number";

        /// <summary>
        /// Upload ID that identifies the multipart upload.
        /// </summary>
        /// <remarks>
        /// The <c>upload_id</c> attribute applies to S3 multipart-upload operations and corresponds to the <c>--upload-id</c> parameter
        /// of the <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html">S3 API</a> multipart operations.
        /// This applies in particular to the following operations:<ul>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/abort-multipart-upload.html">abort-multipart-upload</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/complete-multipart-upload.html">complete-multipart-upload</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-parts.html">list-parts</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part.html">upload-part</a></li>
        /// <li><a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/upload-part-copy.html">upload-part-copy</a></li>
        /// </ul>.
        /// </remarks>
        public const string AttributeAwsS3UploadId = "aws.s3.upload_id";

        /// <summary>
        /// The GraphQL document being executed.
        /// </summary>
        /// <remarks>
        /// The value may be sanitized to exclude sensitive information.
        /// </remarks>
        public const string AttributeGraphqlDocument = "graphql.document";

        /// <summary>
        /// The name of the operation being executed.
        /// </summary>
        public const string AttributeGraphqlOperationName = "graphql.operation.name";

        /// <summary>
        /// The type of the operation being executed.
        /// </summary>
        public const string AttributeGraphqlOperationType = "graphql.operation.type";

        /// <summary>
        /// Compressed size of the message in bytes.
        /// </summary>
        public const string AttributeMessageCompressedSize = "message.compressed_size";

        /// <summary>
        /// MUST be calculated as two different counters starting from <c>1</c> one for sent messages and one for received message.
        /// </summary>
        /// <remarks>
        /// This way we guarantee that the values will be consistent between different implementations.
        /// </remarks>
        public const string AttributeMessageId = "message.id";

        /// <summary>
        /// Whether this is a received or sent message.
        /// </summary>
        public const string AttributeMessageType = "message.type";

        /// <summary>
        /// Uncompressed size of the message in bytes.
        /// </summary>
        public const string AttributeMessageUncompressedSize = "message.uncompressed_size";

        /// <summary>
        /// Event name for 'log-feature_flag'.
        /// </summary>
        public static readonly string EventLogFeatureFlag = "feature_flag";

        /// <summary>
        /// Event name for 'ios.lifecycle.events'.
        /// </summary>
        public static readonly string EventIosLifecycleEvents = "device.app.lifecycle";

        /// <summary>
        /// Event name for 'android.lifecycle.events'.
        /// </summary>
        public static readonly string EventAndroidLifecycleEvents = "device.app.lifecycle";

        /// <summary>
        /// Event name for 'feature_flag'.
        /// </summary>
        public static readonly string EventFeatureFlag = "feature_flag";

        /// <summary>
        /// Event name for 'rpc.message'.
        /// </summary>
        public static readonly string EventRpcMessage = "message";

        /// <summary>
        /// Event name for 'trace-exception'.
        /// </summary>
        public static readonly string EventTraceException = "exception";

        /// <summary>
        /// The stream associated with the log. See below for a list of well-known values.
        /// </summary>
        public static class LogIostreamValues
        {
            /// <summary>
            /// Logs from stdout stream.
            /// </summary>
            public const string Stdout = "stdout";

            /// <summary>
            /// Events from stderr stream.
            /// </summary>
            public const string Stderr = "stderr";
        }

        /// <summary>
        /// This attribute represents the state the application has transitioned into at the occurrence of the event.
        /// </summary>
        public static class IosStateValues
        {
            /// <summary>
            /// The app has become <c>active</c>. Associated with UIKit notification <c>applicationDidBecomeActive</c>.
            /// </summary>
            public const string Active = "active";

            /// <summary>
            /// The app is now <c>inactive</c>. Associated with UIKit notification <c>applicationWillResignActive</c>.
            /// </summary>
            public const string Inactive = "inactive";

            /// <summary>
            /// The app is now in the background. This value is associated with UIKit notification <c>applicationDidEnterBackground</c>.
            /// </summary>
            public const string Background = "background";

            /// <summary>
            /// The app is now in the foreground. This value is associated with UIKit notification <c>applicationWillEnterForeground</c>.
            /// </summary>
            public const string Foreground = "foreground";

            /// <summary>
            /// The app is about to terminate. Associated with UIKit notification <c>applicationWillTerminate</c>.
            /// </summary>
            public const string Terminate = "terminate";
        }

        /// <summary>
        /// This attribute represents the state the application has transitioned into at the occurrence of the event.
        /// </summary>
        public static class AndroidStateValues
        {
            /// <summary>
            /// Any time before Activity.onResume() or, if the app has no Activity, Context.startService() has been called in the app for the first time.
            /// </summary>
            public const string Created = "created";

            /// <summary>
            /// Any time after Activity.onPause() or, if the app has no Activity, Context.stopService() has been called when the app was in the foreground state.
            /// </summary>
            public const string Background = "background";

            /// <summary>
            /// Any time after Activity.onResume() or, if the app has no Activity, Context.startService() has been called when the app was in either the created or background states.
            /// </summary>
            public const string Foreground = "foreground";
        }

        /// <summary>
        /// The state of a connection in the pool.
        /// </summary>
        public static class StateValues
        {
            /// <summary>
            /// idle.
            /// </summary>
            public const string Idle = "idle";

            /// <summary>
            /// used.
            /// </summary>
            public const string Used = "used";
        }

        /// <summary>
        /// Rate-limiting result, shows whether the lease was acquired or contains a rejection reason.
        /// </summary>
        public static class AspnetcoreRateLimitingResultValues
        {
            /// <summary>
            /// Lease was acquired.
            /// </summary>
            public const string Acquired = "acquired";

            /// <summary>
            /// Lease request was rejected by the endpoint limiter.
            /// </summary>
            public const string EndpointLimiter = "endpoint_limiter";

            /// <summary>
            /// Lease request was rejected by the global limiter.
            /// </summary>
            public const string GlobalLimiter = "global_limiter";

            /// <summary>
            /// Lease request was canceled.
            /// </summary>
            public const string RequestCanceled = "request_canceled";
        }

        /// <summary>
        /// Match result - success or failure.
        /// </summary>
        public static class AspnetcoreRoutingMatchStatusValues
        {
            /// <summary>
            /// Match succeeded.
            /// </summary>
            public const string Success = "success";

            /// <summary>
            /// Match failed.
            /// </summary>
            public const string Failure = "failure";
        }

        /// <summary>
        /// ASP.NET Core exception middleware handling result.
        /// </summary>
        public static class AspnetcoreDiagnosticsExceptionResultValues
        {
            /// <summary>
            /// Exception was handled by the exception handling middleware.
            /// </summary>
            public const string Handled = "handled";

            /// <summary>
            /// Exception was not handled by the exception handling middleware.
            /// </summary>
            public const string Unhandled = "unhandled";

            /// <summary>
            /// Exception handling was skipped because the response had started.
            /// </summary>
            public const string Skipped = "skipped";

            /// <summary>
            /// Exception handling didn't run because the request was aborted.
            /// </summary>
            public const string Aborted = "aborted";
        }

        /// <summary>
        /// SignalR HTTP connection closure status.
        /// </summary>
        public static class SignalrConnectionStatusValues
        {
            /// <summary>
            /// The connection was closed normally.
            /// </summary>
            public const string NormalClosure = "normal_closure";

            /// <summary>
            /// The connection was closed due to a timeout.
            /// </summary>
            public const string Timeout = "timeout";

            /// <summary>
            /// The connection was closed because the app is shutting down.
            /// </summary>
            public const string AppShutdown = "app_shutdown";
        }

        /// <summary>
        /// <a href="https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md">SignalR transport type</a>.
        /// </summary>
        public static class SignalrTransportValues
        {
            /// <summary>
            /// ServerSentEvents protocol.
            /// </summary>
            public const string ServerSentEvents = "server_sent_events";

            /// <summary>
            /// LongPolling protocol.
            /// </summary>
            public const string LongPolling = "long_polling";

            /// <summary>
            /// WebSockets protocol.
            /// </summary>
            public const string WebSockets = "web_sockets";
        }

        /// <summary>
        /// The type of memory.
        /// </summary>
        public static class JvmMemoryTypeValues
        {
            /// <summary>
            /// Heap memory.
            /// </summary>
            public const string Heap = "heap";

            /// <summary>
            /// Non-heap memory.
            /// </summary>
            public const string NonHeap = "non_heap";
        }

        /// <summary>
        /// State of the thread.
        /// </summary>
        public static class JvmThreadStateValues
        {
            /// <summary>
            /// A thread that has not yet started is in this state.
            /// </summary>
            public const string New = "new";

            /// <summary>
            /// A thread executing in the Java virtual machine is in this state.
            /// </summary>
            public const string Runnable = "runnable";

            /// <summary>
            /// A thread that is blocked waiting for a monitor lock is in this state.
            /// </summary>
            public const string Blocked = "blocked";

            /// <summary>
            /// A thread that is waiting indefinitely for another thread to perform a particular action is in this state.
            /// </summary>
            public const string Waiting = "waiting";

            /// <summary>
            /// A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.
            /// </summary>
            public const string TimedWaiting = "timed_waiting";

            /// <summary>
            /// A thread that has exited is in this state.
            /// </summary>
            public const string Terminated = "terminated";
        }

        /// <summary>
        /// The CPU state for this data point. A process SHOULD be characterized <em>either</em> by data points with no <c>state</c> labels, <em>or only</em> data points with <c>state</c> labels.
        /// </summary>
        public static class ProcessCpuStateValues
        {
            /// <summary>
            /// system.
            /// </summary>
            public const string System = "system";

            /// <summary>
            /// user.
            /// </summary>
            public const string User = "user";

            /// <summary>
            /// wait.
            /// </summary>
            public const string Wait = "wait";
        }

        /// <summary>
        /// Specifies whether the context switches for this data point were voluntary or involuntary.
        /// </summary>
        public static class ProcessContextSwitchTypeValues
        {
            /// <summary>
            /// voluntary.
            /// </summary>
            public const string Voluntary = "voluntary";

            /// <summary>
            /// involuntary.
            /// </summary>
            public const string Involuntary = "involuntary";
        }

        /// <summary>
        /// The type of page fault for this data point. Type <c>major</c> is for major/hard page faults, and <c>minor</c> is for minor/soft page faults.
        /// </summary>
        public static class ProcessPagingFaultTypeValues
        {
            /// <summary>
            /// major.
            /// </summary>
            public const string Major = "major";

            /// <summary>
            /// minor.
            /// </summary>
            public const string Minor = "minor";
        }

        /// <summary>
        /// The CPU state for this data point. A system's CPU SHOULD be characterized <em>either</em> by data points with no <c>state</c> labels, <em>or only</em> data points with <c>state</c> labels.
        /// </summary>
        public static class SystemCpuStateValues
        {
            /// <summary>
            /// user.
            /// </summary>
            public const string User = "user";

            /// <summary>
            /// system.
            /// </summary>
            public const string System = "system";

            /// <summary>
            /// nice.
            /// </summary>
            public const string Nice = "nice";

            /// <summary>
            /// idle.
            /// </summary>
            public const string Idle = "idle";

            /// <summary>
            /// iowait.
            /// </summary>
            public const string Iowait = "iowait";

            /// <summary>
            /// interrupt.
            /// </summary>
            public const string Interrupt = "interrupt";

            /// <summary>
            /// steal.
            /// </summary>
            public const string Steal = "steal";
        }

        /// <summary>
        /// The memory state.
        /// </summary>
        public static class SystemMemoryStateValues
        {
            /// <summary>
            /// used.
            /// </summary>
            public const string Used = "used";

            /// <summary>
            /// free.
            /// </summary>
            public const string Free = "free";

            /// <summary>
            /// shared.
            /// </summary>
            public const string Shared = "shared";

            /// <summary>
            /// buffers.
            /// </summary>
            public const string Buffers = "buffers";

            /// <summary>
            /// cached.
            /// </summary>
            public const string Cached = "cached";
        }

        /// <summary>
        /// The paging access direction.
        /// </summary>
        public static class SystemPagingDirectionValues
        {
            /// <summary>
            /// in.
            /// </summary>
            public const string In = "in";

            /// <summary>
            /// out.
            /// </summary>
            public const string Out = "out";
        }

        /// <summary>
        /// The memory paging state.
        /// </summary>
        public static class SystemPagingStateValues
        {
            /// <summary>
            /// used.
            /// </summary>
            public const string Used = "used";

            /// <summary>
            /// free.
            /// </summary>
            public const string Free = "free";
        }

        /// <summary>
        /// The memory paging type.
        /// </summary>
        public static class SystemPagingTypeValues
        {
            /// <summary>
            /// major.
            /// </summary>
            public const string Major = "major";

            /// <summary>
            /// minor.
            /// </summary>
            public const string Minor = "minor";
        }

        /// <summary>
        /// The filesystem state.
        /// </summary>
        public static class SystemFilesystemStateValues
        {
            /// <summary>
            /// used.
            /// </summary>
            public const string Used = "used";

            /// <summary>
            /// free.
            /// </summary>
            public const string Free = "free";

            /// <summary>
            /// reserved.
            /// </summary>
            public const string Reserved = "reserved";
        }

        /// <summary>
        /// The filesystem type.
        /// </summary>
        public static class SystemFilesystemTypeValues
        {
            /// <summary>
            /// fat32.
            /// </summary>
            public const string Fat32 = "fat32";

            /// <summary>
            /// exfat.
            /// </summary>
            public const string Exfat = "exfat";

            /// <summary>
            /// ntfs.
            /// </summary>
            public const string Ntfs = "ntfs";

            /// <summary>
            /// refs.
            /// </summary>
            public const string Refs = "refs";

            /// <summary>
            /// hfsplus.
            /// </summary>
            public const string Hfsplus = "hfsplus";

            /// <summary>
            /// ext4.
            /// </summary>
            public const string Ext4 = "ext4";
        }

        /// <summary>
        /// A stateless protocol MUST NOT set this attribute.
        /// </summary>
        public static class SystemNetworkStateValues
        {
            /// <summary>
            /// close.
            /// </summary>
            public const string Close = "close";

            /// <summary>
            /// close_wait.
            /// </summary>
            public const string CloseWait = "close_wait";

            /// <summary>
            /// closing.
            /// </summary>
            public const string Closing = "closing";

            /// <summary>
            /// delete.
            /// </summary>
            public const string Delete = "delete";

            /// <summary>
            /// established.
            /// </summary>
            public const string Established = "established";

            /// <summary>
            /// fin_wait_1.
            /// </summary>
            public const string FinWait1 = "fin_wait_1";

            /// <summary>
            /// fin_wait_2.
            /// </summary>
            public const string FinWait2 = "fin_wait_2";

            /// <summary>
            /// last_ack.
            /// </summary>
            public const string LastAck = "last_ack";

            /// <summary>
            /// listen.
            /// </summary>
            public const string Listen = "listen";

            /// <summary>
            /// syn_recv.
            /// </summary>
            public const string SynRecv = "syn_recv";

            /// <summary>
            /// syn_sent.
            /// </summary>
            public const string SynSent = "syn_sent";

            /// <summary>
            /// time_wait.
            /// </summary>
            public const string TimeWait = "time_wait";
        }

        /// <summary>
        /// The process state, e.g., <a href="https://man7.org/linux/man-pages/man1/ps.1.html#PROCESS_STATE_CODES">Linux Process State Codes</a>.
        /// </summary>
        public static class SystemProcessStatusValues
        {
            /// <summary>
            /// running.
            /// </summary>
            public const string Running = "running";

            /// <summary>
            /// sleeping.
            /// </summary>
            public const string Sleeping = "sleeping";

            /// <summary>
            /// stopped.
            /// </summary>
            public const string Stopped = "stopped";

            /// <summary>
            /// defunct.
            /// </summary>
            public const string Defunct = "defunct";
        }

        /// <summary>
        /// The cloud platform in use.
        /// </summary>
        public static class CloudPlatformValues
        {
            /// <summary>
            /// Alibaba Cloud Elastic Compute Service.
            /// </summary>
            public const string AlibabaCloudEcs = "alibaba_cloud_ecs";

            /// <summary>
            /// Alibaba Cloud Function Compute.
            /// </summary>
            public const string AlibabaCloudFc = "alibaba_cloud_fc";

            /// <summary>
            /// Red Hat OpenShift on Alibaba Cloud.
            /// </summary>
            public const string AlibabaCloudOpenshift = "alibaba_cloud_openshift";

            /// <summary>
            /// AWS Elastic Compute Cloud.
            /// </summary>
            public const string AwsEc2 = "aws_ec2";

            /// <summary>
            /// AWS Elastic Container Service.
            /// </summary>
            public const string AwsEcs = "aws_ecs";

            /// <summary>
            /// AWS Elastic Kubernetes Service.
            /// </summary>
            public const string AwsEks = "aws_eks";

            /// <summary>
            /// AWS Lambda.
            /// </summary>
            public const string AwsLambda = "aws_lambda";

            /// <summary>
            /// AWS Elastic Beanstalk.
            /// </summary>
            public const string AwsElasticBeanstalk = "aws_elastic_beanstalk";

            /// <summary>
            /// AWS App Runner.
            /// </summary>
            public const string AwsAppRunner = "aws_app_runner";

            /// <summary>
            /// Red Hat OpenShift on AWS (ROSA).
            /// </summary>
            public const string AwsOpenshift = "aws_openshift";

            /// <summary>
            /// Azure Virtual Machines.
            /// </summary>
            public const string AzureVm = "azure_vm";

            /// <summary>
            /// Azure Container Apps.
            /// </summary>
            public const string AzureContainerApps = "azure_container_apps";

            /// <summary>
            /// Azure Container Instances.
            /// </summary>
            public const string AzureContainerInstances = "azure_container_instances";

            /// <summary>
            /// Azure Kubernetes Service.
            /// </summary>
            public const string AzureAks = "azure_aks";

            /// <summary>
            /// Azure Functions.
            /// </summary>
            public const string AzureFunctions = "azure_functions";

            /// <summary>
            /// Azure App Service.
            /// </summary>
            public const string AzureAppService = "azure_app_service";

            /// <summary>
            /// Azure Red Hat OpenShift.
            /// </summary>
            public const string AzureOpenshift = "azure_openshift";

            /// <summary>
            /// Google Bare Metal Solution (BMS).
            /// </summary>
            public const string GcpBareMetalSolution = "gcp_bare_metal_solution";

            /// <summary>
            /// Google Cloud Compute Engine (GCE).
            /// </summary>
            public const string GcpComputeEngine = "gcp_compute_engine";

            /// <summary>
            /// Google Cloud Run.
            /// </summary>
            public const string GcpCloudRun = "gcp_cloud_run";

            /// <summary>
            /// Google Cloud Kubernetes Engine (GKE).
            /// </summary>
            public const string GcpKubernetesEngine = "gcp_kubernetes_engine";

            /// <summary>
            /// Google Cloud Functions (GCF).
            /// </summary>
            public const string GcpCloudFunctions = "gcp_cloud_functions";

            /// <summary>
            /// Google Cloud App Engine (GAE).
            /// </summary>
            public const string GcpAppEngine = "gcp_app_engine";

            /// <summary>
            /// Red Hat OpenShift on Google Cloud.
            /// </summary>
            public const string GcpOpenshift = "gcp_openshift";

            /// <summary>
            /// Red Hat OpenShift on IBM Cloud.
            /// </summary>
            public const string IbmCloudOpenshift = "ibm_cloud_openshift";

            /// <summary>
            /// Tencent Cloud Cloud Virtual Machine (CVM).
            /// </summary>
            public const string TencentCloudCvm = "tencent_cloud_cvm";

            /// <summary>
            /// Tencent Cloud Elastic Kubernetes Service (EKS).
            /// </summary>
            public const string TencentCloudEks = "tencent_cloud_eks";

            /// <summary>
            /// Tencent Cloud Serverless Cloud Function (SCF).
            /// </summary>
            public const string TencentCloudScf = "tencent_cloud_scf";
        }

        /// <summary>
        /// Name of the cloud provider.
        /// </summary>
        public static class CloudProviderValues
        {
            /// <summary>
            /// Alibaba Cloud.
            /// </summary>
            public const string AlibabaCloud = "alibaba_cloud";

            /// <summary>
            /// Amazon Web Services.
            /// </summary>
            public const string Aws = "aws";

            /// <summary>
            /// Microsoft Azure.
            /// </summary>
            public const string Azure = "azure";

            /// <summary>
            /// Google Cloud Platform.
            /// </summary>
            public const string Gcp = "gcp";

            /// <summary>
            /// Heroku Platform as a Service.
            /// </summary>
            public const string Heroku = "heroku";

            /// <summary>
            /// IBM Cloud.
            /// </summary>
            public const string IbmCloud = "ibm_cloud";

            /// <summary>
            /// Tencent Cloud.
            /// </summary>
            public const string TencentCloud = "tencent_cloud";
        }

        /// <summary>
        /// The CPU state for this data point.
        /// </summary>
        public static class ContainerCpuStateValues
        {
            /// <summary>
            /// When tasks of the cgroup are in user mode (Linux). When all container processes are in user mode (Windows).
            /// </summary>
            public const string User = "user";

            /// <summary>
            /// When CPU is used by the system (host OS).
            /// </summary>
            public const string System = "system";

            /// <summary>
            /// When tasks of the cgroup are in kernel mode (Linux). When all container processes are in kernel mode (Windows).
            /// </summary>
            public const string Kernel = "kernel";
        }

        /// <summary>
        /// The consistency level of the query. Based on consistency values from <a href="https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html">CQL</a>.
        /// </summary>
        public static class DbCassandraConsistencyLevelValues
        {
            /// <summary>
            /// all.
            /// </summary>
            public const string All = "all";

            /// <summary>
            /// each_quorum.
            /// </summary>
            public const string EachQuorum = "each_quorum";

            /// <summary>
            /// quorum.
            /// </summary>
            public const string Quorum = "quorum";

            /// <summary>
            /// local_quorum.
            /// </summary>
            public const string LocalQuorum = "local_quorum";

            /// <summary>
            /// one.
            /// </summary>
            public const string One = "one";

            /// <summary>
            /// two.
            /// </summary>
            public const string Two = "two";

            /// <summary>
            /// three.
            /// </summary>
            public const string Three = "three";

            /// <summary>
            /// local_one.
            /// </summary>
            public const string LocalOne = "local_one";

            /// <summary>
            /// any.
            /// </summary>
            public const string Any = "any";

            /// <summary>
            /// serial.
            /// </summary>
            public const string Serial = "serial";

            /// <summary>
            /// local_serial.
            /// </summary>
            public const string LocalSerial = "local_serial";
        }

        /// <summary>
        /// Cosmos client connection mode.
        /// </summary>
        public static class DbCosmosdbConnectionModeValues
        {
            /// <summary>
            /// Gateway (HTTP) connections mode.
            /// </summary>
            public const string Gateway = "gateway";

            /// <summary>
            /// Direct connection.
            /// </summary>
            public const string Direct = "direct";
        }

        /// <summary>
        /// CosmosDB Operation Type.
        /// </summary>
        public static class DbCosmosdbOperationTypeValues
        {
            /// <summary>
            /// invalid.
            /// </summary>
            public const string Invalid = "Invalid";

            /// <summary>
            /// create.
            /// </summary>
            public const string Create = "Create";

            /// <summary>
            /// patch.
            /// </summary>
            public const string Patch = "Patch";

            /// <summary>
            /// read.
            /// </summary>
            public const string Read = "Read";

            /// <summary>
            /// read_feed.
            /// </summary>
            public const string ReadFeed = "ReadFeed";

            /// <summary>
            /// delete.
            /// </summary>
            public const string Delete = "Delete";

            /// <summary>
            /// replace.
            /// </summary>
            public const string Replace = "Replace";

            /// <summary>
            /// execute.
            /// </summary>
            public const string Execute = "Execute";

            /// <summary>
            /// query.
            /// </summary>
            public const string Query = "Query";

            /// <summary>
            /// head.
            /// </summary>
            public const string Head = "Head";

            /// <summary>
            /// head_feed.
            /// </summary>
            public const string HeadFeed = "HeadFeed";

            /// <summary>
            /// upsert.
            /// </summary>
            public const string Upsert = "Upsert";

            /// <summary>
            /// batch.
            /// </summary>
            public const string Batch = "Batch";

            /// <summary>
            /// query_plan.
            /// </summary>
            public const string QueryPlan = "QueryPlan";

            /// <summary>
            /// execute_javascript.
            /// </summary>
            public const string ExecuteJavascript = "ExecuteJavaScript";
        }

        /// <summary>
        /// An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.
        /// </summary>
        public static class DbSystemValues
        {
            /// <summary>
            /// Some other SQL database. Fallback only. See notes.
            /// </summary>
            public const string OtherSql = "other_sql";

            /// <summary>
            /// Microsoft SQL Server.
            /// </summary>
            public const string Mssql = "mssql";

            /// <summary>
            /// Microsoft SQL Server Compact.
            /// </summary>
            public const string Mssqlcompact = "mssqlcompact";

            /// <summary>
            /// MySQL.
            /// </summary>
            public const string Mysql = "mysql";

            /// <summary>
            /// Oracle Database.
            /// </summary>
            public const string Oracle = "oracle";

            /// <summary>
            /// IBM Db2.
            /// </summary>
            public const string Db2 = "db2";

            /// <summary>
            /// PostgreSQL.
            /// </summary>
            public const string Postgresql = "postgresql";

            /// <summary>
            /// Amazon Redshift.
            /// </summary>
            public const string Redshift = "redshift";

            /// <summary>
            /// Apache Hive.
            /// </summary>
            public const string Hive = "hive";

            /// <summary>
            /// Cloudscape.
            /// </summary>
            public const string Cloudscape = "cloudscape";

            /// <summary>
            /// HyperSQL DataBase.
            /// </summary>
            public const string Hsqldb = "hsqldb";

            /// <summary>
            /// Progress Database.
            /// </summary>
            public const string Progress = "progress";

            /// <summary>
            /// SAP MaxDB.
            /// </summary>
            public const string Maxdb = "maxdb";

            /// <summary>
            /// SAP HANA.
            /// </summary>
            public const string Hanadb = "hanadb";

            /// <summary>
            /// Ingres.
            /// </summary>
            public const string Ingres = "ingres";

            /// <summary>
            /// FirstSQL.
            /// </summary>
            public const string Firstsql = "firstsql";

            /// <summary>
            /// EnterpriseDB.
            /// </summary>
            public const string Edb = "edb";

            /// <summary>
            /// InterSystems Cach&#233;.
            /// </summary>
            public const string Cache = "cache";

            /// <summary>
            /// Adabas (Adaptable Database System).
            /// </summary>
            public const string Adabas = "adabas";

            /// <summary>
            /// Firebird.
            /// </summary>
            public const string Firebird = "firebird";

            /// <summary>
            /// Apache Derby.
            /// </summary>
            public const string Derby = "derby";

            /// <summary>
            /// FileMaker.
            /// </summary>
            public const string Filemaker = "filemaker";

            /// <summary>
            /// Informix.
            /// </summary>
            public const string Informix = "informix";

            /// <summary>
            /// InstantDB.
            /// </summary>
            public const string Instantdb = "instantdb";

            /// <summary>
            /// InterBase.
            /// </summary>
            public const string Interbase = "interbase";

            /// <summary>
            /// MariaDB.
            /// </summary>
            public const string Mariadb = "mariadb";

            /// <summary>
            /// Netezza.
            /// </summary>
            public const string Netezza = "netezza";

            /// <summary>
            /// Pervasive PSQL.
            /// </summary>
            public const string Pervasive = "pervasive";

            /// <summary>
            /// PointBase.
            /// </summary>
            public const string Pointbase = "pointbase";

            /// <summary>
            /// SQLite.
            /// </summary>
            public const string Sqlite = "sqlite";

            /// <summary>
            /// Sybase.
            /// </summary>
            public const string Sybase = "sybase";

            /// <summary>
            /// Teradata.
            /// </summary>
            public const string Teradata = "teradata";

            /// <summary>
            /// Vertica.
            /// </summary>
            public const string Vertica = "vertica";

            /// <summary>
            /// H2.
            /// </summary>
            public const string H2 = "h2";

            /// <summary>
            /// ColdFusion IMQ.
            /// </summary>
            public const string Coldfusion = "coldfusion";

            /// <summary>
            /// Apache Cassandra.
            /// </summary>
            public const string Cassandra = "cassandra";

            /// <summary>
            /// Apache HBase.
            /// </summary>
            public const string Hbase = "hbase";

            /// <summary>
            /// MongoDB.
            /// </summary>
            public const string Mongodb = "mongodb";

            /// <summary>
            /// Redis.
            /// </summary>
            public const string Redis = "redis";

            /// <summary>
            /// Couchbase.
            /// </summary>
            public const string Couchbase = "couchbase";

            /// <summary>
            /// CouchDB.
            /// </summary>
            public const string Couchdb = "couchdb";

            /// <summary>
            /// Microsoft Azure Cosmos DB.
            /// </summary>
            public const string Cosmosdb = "cosmosdb";

            /// <summary>
            /// Amazon DynamoDB.
            /// </summary>
            public const string Dynamodb = "dynamodb";

            /// <summary>
            /// Neo4j.
            /// </summary>
            public const string Neo4j = "neo4j";

            /// <summary>
            /// Apache Geode.
            /// </summary>
            public const string Geode = "geode";

            /// <summary>
            /// Elasticsearch.
            /// </summary>
            public const string Elasticsearch = "elasticsearch";

            /// <summary>
            /// Memcached.
            /// </summary>
            public const string Memcached = "memcached";

            /// <summary>
            /// CockroachDB.
            /// </summary>
            public const string Cockroachdb = "cockroachdb";

            /// <summary>
            /// OpenSearch.
            /// </summary>
            public const string Opensearch = "opensearch";

            /// <summary>
            /// ClickHouse.
            /// </summary>
            public const string Clickhouse = "clickhouse";

            /// <summary>
            /// Cloud Spanner.
            /// </summary>
            public const string Spanner = "spanner";

            /// <summary>
            /// Trino.
            /// </summary>
            public const string Trino = "trino";
        }

        /// <summary>
        /// Deprecated, use <c>network.protocol.name</c> instead.
        /// </summary>
        public static class HttpFlavorValues
        {
            /// <summary>
            /// HTTP/1.0.
            /// </summary>
            public const string Http10 = "1.0";

            /// <summary>
            /// HTTP/1.1.
            /// </summary>
            public const string Http11 = "1.1";

            /// <summary>
            /// HTTP/2.
            /// </summary>
            public const string Http20 = "2.0";

            /// <summary>
            /// HTTP/3.
            /// </summary>
            public const string Http30 = "3.0";

            /// <summary>
            /// SPDY protocol.
            /// </summary>
            public const string Spdy = "SPDY";

            /// <summary>
            /// QUIC protocol.
            /// </summary>
            public const string Quic = "QUIC";
        }

        /// <summary>
        /// Deprecated, use <c>network.transport</c> and <c>network.type</c>.
        /// </summary>
        public static class NetSockFamilyValues
        {
            /// <summary>
            /// IPv4 address.
            /// </summary>
            public const string Inet = "inet";

            /// <summary>
            /// IPv6 address.
            /// </summary>
            public const string Inet6 = "inet6";

            /// <summary>
            /// Unix domain socket path.
            /// </summary>
            public const string Unix = "unix";
        }

        /// <summary>
        /// Deprecated, use <c>network.transport</c>.
        /// </summary>
        public static class NetTransportValues
        {
            /// <summary>
            /// ip_tcp.
            /// </summary>
            public const string IpTcp = "ip_tcp";

            /// <summary>
            /// ip_udp.
            /// </summary>
            public const string IpUdp = "ip_udp";

            /// <summary>
            /// Named or anonymous pipe.
            /// </summary>
            public const string Pipe = "pipe";

            /// <summary>
            /// In-process communication.
            /// </summary>
            public const string Inproc = "inproc";

            /// <summary>
            /// Something else (non IP-based).
            /// </summary>
            public const string Other = "other";
        }

        /// <summary>
        /// Deprecated, use <c>system.process.status</c> instead.
        /// </summary>
        public static class SystemProcessesStatusValues
        {
            /// <summary>
            /// running.
            /// </summary>
            public const string Running = "running";

            /// <summary>
            /// sleeping.
            /// </summary>
            public const string Sleeping = "sleeping";

            /// <summary>
            /// stopped.
            /// </summary>
            public const string Stopped = "stopped";

            /// <summary>
            /// defunct.
            /// </summary>
            public const string Defunct = "defunct";
        }

        /// <summary>
        /// The disk IO operation direction.
        /// </summary>
        public static class DiskIoDirectionValues
        {
            /// <summary>
            /// read.
            /// </summary>
            public const string Read = "read";

            /// <summary>
            /// write.
            /// </summary>
            public const string Write = "write";
        }

        /// <summary>
        /// Describes a class of error the operation ended with.
        /// </summary>
        public static class ErrorTypeValues
        {
            /// <summary>
            /// A fallback error value to be used when the instrumentation doesn't define a custom value.
            /// </summary>
            public const string Other = "_OTHER";
        }

        /// <summary>
        /// Describes the type of the operation that was performed on the data.
        /// </summary>
        public static class FaasDocumentOperationValues
        {
            /// <summary>
            /// When a new object is created.
            /// </summary>
            public const string Insert = "insert";

            /// <summary>
            /// When an object is modified.
            /// </summary>
            public const string Edit = "edit";

            /// <summary>
            /// When an object is deleted.
            /// </summary>
            public const string Delete = "delete";
        }

        /// <summary>
        /// The cloud provider of the invoked function.
        /// </summary>
        public static class FaasInvokedProviderValues
        {
            /// <summary>
            /// Alibaba Cloud.
            /// </summary>
            public const string AlibabaCloud = "alibaba_cloud";

            /// <summary>
            /// Amazon Web Services.
            /// </summary>
            public const string Aws = "aws";

            /// <summary>
            /// Microsoft Azure.
            /// </summary>
            public const string Azure = "azure";

            /// <summary>
            /// Google Cloud Platform.
            /// </summary>
            public const string Gcp = "gcp";

            /// <summary>
            /// Tencent Cloud.
            /// </summary>
            public const string TencentCloud = "tencent_cloud";
        }

        /// <summary>
        /// Type of the trigger which caused this function invocation.
        /// </summary>
        public static class FaasTriggerValues
        {
            /// <summary>
            /// A response to some data source operation such as a database or filesystem read/write.
            /// </summary>
            public const string Datasource = "datasource";

            /// <summary>
            /// To provide an answer to an inbound HTTP request.
            /// </summary>
            public const string Http = "http";

            /// <summary>
            /// A function is set to be executed when messages are sent to a messaging system.
            /// </summary>
            public const string Pubsub = "pubsub";

            /// <summary>
            /// A function is scheduled to be executed regularly.
            /// </summary>
            public const string Timer = "timer";

            /// <summary>
            /// If none of the others apply.
            /// </summary>
            public const string Other = "other";
        }

        /// <summary>
        /// The CPU architecture the host system is running on.
        /// </summary>
        public static class HostArchValues
        {
            /// <summary>
            /// AMD64.
            /// </summary>
            public const string Amd64 = "amd64";

            /// <summary>
            /// ARM32.
            /// </summary>
            public const string Arm32 = "arm32";

            /// <summary>
            /// ARM64.
            /// </summary>
            public const string Arm64 = "arm64";

            /// <summary>
            /// Itanium.
            /// </summary>
            public const string Ia64 = "ia64";

            /// <summary>
            /// 32-bit PowerPC.
            /// </summary>
            public const string Ppc32 = "ppc32";

            /// <summary>
            /// 64-bit PowerPC.
            /// </summary>
            public const string Ppc64 = "ppc64";

            /// <summary>
            /// IBM z/Architecture.
            /// </summary>
            public const string S390x = "s390x";

            /// <summary>
            /// 32-bit x86.
            /// </summary>
            public const string X86 = "x86";
        }

        /// <summary>
        /// State of the HTTP connection in the HTTP connection pool.
        /// </summary>
        public static class HttpConnectionStateValues
        {
            /// <summary>
            /// active state.
            /// </summary>
            public const string Active = "active";

            /// <summary>
            /// idle state.
            /// </summary>
            public const string Idle = "idle";
        }

        /// <summary>
        /// HTTP request method.
        /// </summary>
        public static class HttpRequestMethodValues
        {
            /// <summary>
            /// CONNECT method.
            /// </summary>
            public const string Connect = "CONNECT";

            /// <summary>
            /// DELETE method.
            /// </summary>
            public const string Delete = "DELETE";

            /// <summary>
            /// GET method.
            /// </summary>
            public const string Get = "GET";

            /// <summary>
            /// HEAD method.
            /// </summary>
            public const string Head = "HEAD";

            /// <summary>
            /// OPTIONS method.
            /// </summary>
            public const string Options = "OPTIONS";

            /// <summary>
            /// PATCH method.
            /// </summary>
            public const string Patch = "PATCH";

            /// <summary>
            /// POST method.
            /// </summary>
            public const string Post = "POST";

            /// <summary>
            /// PUT method.
            /// </summary>
            public const string Put = "PUT";

            /// <summary>
            /// TRACE method.
            /// </summary>
            public const string Trace = "TRACE";

            /// <summary>
            /// Any HTTP method that the instrumentation has no prior knowledge of.
            /// </summary>
            public const string Other = "_OTHER";
        }

        /// <summary>
        /// A string identifying the kind of messaging operation.
        /// </summary>
        public static class MessagingOperationValues
        {
            /// <summary>
            /// One or more messages are provided for publishing to an intermediary. If a single message is published, the context of the &quot;Publish&quot; span can be used as the creation context and no &quot;Create&quot; span needs to be created.
            /// </summary>
            public const string Publish = "publish";

            /// <summary>
            /// A message is created. &quot;Create&quot; spans always refer to a single message and are used to provide a unique creation context for messages in batch publishing scenarios.
            /// </summary>
            public const string Create = "create";

            /// <summary>
            /// One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.
            /// </summary>
            public const string Receive = "receive";

            /// <summary>
            /// One or more messages are delivered to or processed by a consumer.
            /// </summary>
            public const string Deliver = "process";

            /// <summary>
            /// One or more messages are settled.
            /// </summary>
            public const string Settle = "settle";
        }

        /// <summary>
        /// Model of message consumption. This only applies to consumer spans.
        /// </summary>
        public static class MessagingRocketmqConsumptionModelValues
        {
            /// <summary>
            /// Clustering consumption model.
            /// </summary>
            public const string Clustering = "clustering";

            /// <summary>
            /// Broadcasting consumption model.
            /// </summary>
            public const string Broadcasting = "broadcasting";
        }

        /// <summary>
        /// Type of message.
        /// </summary>
        public static class MessagingRocketmqMessageTypeValues
        {
            /// <summary>
            /// Normal message.
            /// </summary>
            public const string Normal = "normal";

            /// <summary>
            /// FIFO message.
            /// </summary>
            public const string Fifo = "fifo";

            /// <summary>
            /// Delay message.
            /// </summary>
            public const string Delay = "delay";

            /// <summary>
            /// Transaction message.
            /// </summary>
            public const string Transaction = "transaction";
        }

        /// <summary>
        /// Describes the <a href="https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock">settlement type</a>.
        /// </summary>
        public static class MessagingServicebusDispositionStatusValues
        {
            /// <summary>
            /// Message is completed.
            /// </summary>
            public const string Complete = "complete";

            /// <summary>
            /// Message is abandoned.
            /// </summary>
            public const string Abandon = "abandon";

            /// <summary>
            /// Message is sent to dead letter queue.
            /// </summary>
            public const string DeadLetter = "dead_letter";

            /// <summary>
            /// Message is deferred.
            /// </summary>
            public const string Defer = "defer";
        }

        /// <summary>
        /// An identifier for the messaging system being used. See below for a list of well-known identifiers.
        /// </summary>
        public static class MessagingSystemValues
        {
            /// <summary>
            /// Apache ActiveMQ.
            /// </summary>
            public const string Activemq = "activemq";

            /// <summary>
            /// Amazon Simple Queue Service (SQS).
            /// </summary>
            public const string AwsSqs = "aws_sqs";

            /// <summary>
            /// Azure Event Grid.
            /// </summary>
            public const string Eventgrid = "eventgrid";

            /// <summary>
            /// Azure Event Hubs.
            /// </summary>
            public const string Eventhubs = "eventhubs";

            /// <summary>
            /// Azure Service Bus.
            /// </summary>
            public const string Servicebus = "servicebus";

            /// <summary>
            /// Google Cloud Pub/Sub.
            /// </summary>
            public const string GcpPubsub = "gcp_pubsub";

            /// <summary>
            /// Java Message Service.
            /// </summary>
            public const string Jms = "jms";

            /// <summary>
            /// Apache Kafka.
            /// </summary>
            public const string Kafka = "kafka";

            /// <summary>
            /// RabbitMQ.
            /// </summary>
            public const string Rabbitmq = "rabbitmq";

            /// <summary>
            /// Apache RocketMQ.
            /// </summary>
            public const string Rocketmq = "rocketmq";
        }

        /// <summary>
        /// This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.
        /// </summary>
        public static class NetworkConnectionSubtypeValues
        {
            /// <summary>
            /// GPRS.
            /// </summary>
            public const string Gprs = "gprs";

            /// <summary>
            /// EDGE.
            /// </summary>
            public const string Edge = "edge";

            /// <summary>
            /// UMTS.
            /// </summary>
            public const string Umts = "umts";

            /// <summary>
            /// CDMA.
            /// </summary>
            public const string Cdma = "cdma";

            /// <summary>
            /// EVDO Rel. 0.
            /// </summary>
            public const string Evdo0 = "evdo_0";

            /// <summary>
            /// EVDO Rev. A.
            /// </summary>
            public const string EvdoA = "evdo_a";

            /// <summary>
            /// CDMA2000 1XRTT.
            /// </summary>
            public const string Cdma20001xrtt = "cdma2000_1xrtt";

            /// <summary>
            /// HSDPA.
            /// </summary>
            public const string Hsdpa = "hsdpa";

            /// <summary>
            /// HSUPA.
            /// </summary>
            public const string Hsupa = "hsupa";

            /// <summary>
            /// HSPA.
            /// </summary>
            public const string Hspa = "hspa";

            /// <summary>
            /// IDEN.
            /// </summary>
            public const string Iden = "iden";

            /// <summary>
            /// EVDO Rev. B.
            /// </summary>
            public const string EvdoB = "evdo_b";

            /// <summary>
            /// LTE.
            /// </summary>
            public const string Lte = "lte";

            /// <summary>
            /// EHRPD.
            /// </summary>
            public const string Ehrpd = "ehrpd";

            /// <summary>
            /// HSPAP.
            /// </summary>
            public const string Hspap = "hspap";

            /// <summary>
            /// GSM.
            /// </summary>
            public const string Gsm = "gsm";

            /// <summary>
            /// TD-SCDMA.
            /// </summary>
            public const string TdScdma = "td_scdma";

            /// <summary>
            /// IWLAN.
            /// </summary>
            public const string Iwlan = "iwlan";

            /// <summary>
            /// 5G NR (New Radio).
            /// </summary>
            public const string Nr = "nr";

            /// <summary>
            /// 5G NRNSA (New Radio Non-Standalone).
            /// </summary>
            public const string Nrnsa = "nrnsa";

            /// <summary>
            /// LTE CA.
            /// </summary>
            public const string LteCa = "lte_ca";
        }

        /// <summary>
        /// The internet connection type.
        /// </summary>
        public static class NetworkConnectionTypeValues
        {
            /// <summary>
            /// wifi.
            /// </summary>
            public const string Wifi = "wifi";

            /// <summary>
            /// wired.
            /// </summary>
            public const string Wired = "wired";

            /// <summary>
            /// cell.
            /// </summary>
            public const string Cell = "cell";

            /// <summary>
            /// unavailable.
            /// </summary>
            public const string Unavailable = "unavailable";

            /// <summary>
            /// unknown.
            /// </summary>
            public const string Unknown = "unknown";
        }

        /// <summary>
        /// The network IO operation direction.
        /// </summary>
        public static class NetworkIoDirectionValues
        {
            /// <summary>
            /// transmit.
            /// </summary>
            public const string Transmit = "transmit";

            /// <summary>
            /// receive.
            /// </summary>
            public const string Receive = "receive";
        }

        /// <summary>
        /// <a href="https://osi-model.com/transport-layer/">OSI transport layer</a> or <a href="https://wikipedia.org/wiki/Inter-process_communication">inter-process communication method</a>.
        /// </summary>
        public static class NetworkTransportValues
        {
            /// <summary>
            /// TCP.
            /// </summary>
            public const string Tcp = "tcp";

            /// <summary>
            /// UDP.
            /// </summary>
            public const string Udp = "udp";

            /// <summary>
            /// Named or anonymous pipe.
            /// </summary>
            public const string Pipe = "pipe";

            /// <summary>
            /// Unix domain socket.
            /// </summary>
            public const string Unix = "unix";
        }

        /// <summary>
        /// <a href="https://osi-model.com/network-layer/">OSI network layer</a> or non-OSI equivalent.
        /// </summary>
        public static class NetworkTypeValues
        {
            /// <summary>
            /// IPv4.
            /// </summary>
            public const string Ipv4 = "ipv4";

            /// <summary>
            /// IPv6.
            /// </summary>
            public const string Ipv6 = "ipv6";
        }

        /// <summary>
        /// The operating system type.
        /// </summary>
        public static class OsTypeValues
        {
            /// <summary>
            /// Microsoft Windows.
            /// </summary>
            public const string Windows = "windows";

            /// <summary>
            /// Linux.
            /// </summary>
            public const string Linux = "linux";

            /// <summary>
            /// Apple Darwin.
            /// </summary>
            public const string Darwin = "darwin";

            /// <summary>
            /// FreeBSD.
            /// </summary>
            public const string Freebsd = "freebsd";

            /// <summary>
            /// NetBSD.
            /// </summary>
            public const string Netbsd = "netbsd";

            /// <summary>
            /// OpenBSD.
            /// </summary>
            public const string Openbsd = "openbsd";

            /// <summary>
            /// DragonFly BSD.
            /// </summary>
            public const string Dragonflybsd = "dragonflybsd";

            /// <summary>
            /// HP-UX (Hewlett Packard Unix).
            /// </summary>
            public const string Hpux = "hpux";

            /// <summary>
            /// AIX (Advanced Interactive eXecutive).
            /// </summary>
            public const string Aix = "aix";

            /// <summary>
            /// SunOS, Oracle Solaris.
            /// </summary>
            public const string Solaris = "solaris";

            /// <summary>
            /// IBM z/OS.
            /// </summary>
            public const string ZOs = "z_os";
        }

        /// <summary>
        /// The <a href="https://connect.build/docs/protocol/#error-codes">error codes</a> of the Connect request. Error codes are always string values.
        /// </summary>
        public static class RpcConnectRpcErrorCodeValues
        {
            /// <summary>
            /// cancelled.
            /// </summary>
            public const string Cancelled = "cancelled";

            /// <summary>
            /// unknown.
            /// </summary>
            public const string Unknown = "unknown";

            /// <summary>
            /// invalid_argument.
            /// </summary>
            public const string InvalidArgument = "invalid_argument";

            /// <summary>
            /// deadline_exceeded.
            /// </summary>
            public const string DeadlineExceeded = "deadline_exceeded";

            /// <summary>
            /// not_found.
            /// </summary>
            public const string NotFound = "not_found";

            /// <summary>
            /// already_exists.
            /// </summary>
            public const string AlreadyExists = "already_exists";

            /// <summary>
            /// permission_denied.
            /// </summary>
            public const string PermissionDenied = "permission_denied";

            /// <summary>
            /// resource_exhausted.
            /// </summary>
            public const string ResourceExhausted = "resource_exhausted";

            /// <summary>
            /// failed_precondition.
            /// </summary>
            public const string FailedPrecondition = "failed_precondition";

            /// <summary>
            /// aborted.
            /// </summary>
            public const string Aborted = "aborted";

            /// <summary>
            /// out_of_range.
            /// </summary>
            public const string OutOfRange = "out_of_range";

            /// <summary>
            /// unimplemented.
            /// </summary>
            public const string Unimplemented = "unimplemented";

            /// <summary>
            /// internal.
            /// </summary>
            public const string Internal = "internal";

            /// <summary>
            /// unavailable.
            /// </summary>
            public const string Unavailable = "unavailable";

            /// <summary>
            /// data_loss.
            /// </summary>
            public const string DataLoss = "data_loss";

            /// <summary>
            /// unauthenticated.
            /// </summary>
            public const string Unauthenticated = "unauthenticated";
        }

        /// <summary>
        /// The <a href="https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md">numeric status code</a> of the gRPC request.
        /// </summary>
        public static class RpcGrpcStatusCodeValues
        {
            /// <summary>
            /// OK.
            /// </summary>
            public const int Ok = 0;

            /// <summary>
            /// CANCELLED.
            /// </summary>
            public const int Cancelled = 1;

            /// <summary>
            /// UNKNOWN.
            /// </summary>
            public const int Unknown = 2;

            /// <summary>
            /// INVALID_ARGUMENT.
            /// </summary>
            public const int InvalidArgument = 3;

            /// <summary>
            /// DEADLINE_EXCEEDED.
            /// </summary>
            public const int DeadlineExceeded = 4;

            /// <summary>
            /// NOT_FOUND.
            /// </summary>
            public const int NotFound = 5;

            /// <summary>
            /// ALREADY_EXISTS.
            /// </summary>
            public const int AlreadyExists = 6;

            /// <summary>
            /// PERMISSION_DENIED.
            /// </summary>
            public const int PermissionDenied = 7;

            /// <summary>
            /// RESOURCE_EXHAUSTED.
            /// </summary>
            public const int ResourceExhausted = 8;

            /// <summary>
            /// FAILED_PRECONDITION.
            /// </summary>
            public const int FailedPrecondition = 9;

            /// <summary>
            /// ABORTED.
            /// </summary>
            public const int Aborted = 10;

            /// <summary>
            /// OUT_OF_RANGE.
            /// </summary>
            public const int OutOfRange = 11;

            /// <summary>
            /// UNIMPLEMENTED.
            /// </summary>
            public const int Unimplemented = 12;

            /// <summary>
            /// INTERNAL.
            /// </summary>
            public const int Internal = 13;

            /// <summary>
            /// UNAVAILABLE.
            /// </summary>
            public const int Unavailable = 14;

            /// <summary>
            /// DATA_LOSS.
            /// </summary>
            public const int DataLoss = 15;

            /// <summary>
            /// UNAUTHENTICATED.
            /// </summary>
            public const int Unauthenticated = 16;
        }

        /// <summary>
        /// A string identifying the remoting system. See below for a list of well-known identifiers.
        /// </summary>
        public static class RpcSystemValues
        {
            /// <summary>
            /// gRPC.
            /// </summary>
            public const string Grpc = "grpc";

            /// <summary>
            /// Java RMI.
            /// </summary>
            public const string JavaRmi = "java_rmi";

            /// <summary>
            /// .NET WCF.
            /// </summary>
            public const string DotnetWcf = "dotnet_wcf";

            /// <summary>
            /// Apache Dubbo.
            /// </summary>
            public const string ApacheDubbo = "apache_dubbo";

            /// <summary>
            /// Connect RPC.
            /// </summary>
            public const string ConnectRpc = "connect_rpc";
        }

        /// <summary>
        /// The language of the telemetry SDK.
        /// </summary>
        public static class TelemetrySdkLanguageValues
        {
            /// <summary>
            /// cpp.
            /// </summary>
            public const string Cpp = "cpp";

            /// <summary>
            /// dotnet.
            /// </summary>
            public const string Dotnet = "dotnet";

            /// <summary>
            /// erlang.
            /// </summary>
            public const string Erlang = "erlang";

            /// <summary>
            /// go.
            /// </summary>
            public const string Go = "go";

            /// <summary>
            /// java.
            /// </summary>
            public const string Java = "java";

            /// <summary>
            /// nodejs.
            /// </summary>
            public const string Nodejs = "nodejs";

            /// <summary>
            /// php.
            /// </summary>
            public const string Php = "php";

            /// <summary>
            /// python.
            /// </summary>
            public const string Python = "python";

            /// <summary>
            /// ruby.
            /// </summary>
            public const string Ruby = "ruby";

            /// <summary>
            /// rust.
            /// </summary>
            public const string Rust = "rust";

            /// <summary>
            /// swift.
            /// </summary>
            public const string Swift = "swift";

            /// <summary>
            /// webjs.
            /// </summary>
            public const string Webjs = "webjs";
        }

        /// <summary>
        /// Normalized lowercase protocol name parsed from original string of the negotiated <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html#RETURN-VALUES">SSL/TLS protocol version</a>.
        /// </summary>
        public static class TlsProtocolNameValues
        {
            /// <summary>
            /// ssl.
            /// </summary>
            public const string Ssl = "ssl";

            /// <summary>
            /// tls.
            /// </summary>
            public const string Tls = "tls";
        }

        /// <summary>
        /// The <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">launch type</a> for an ECS task.
        /// </summary>
        public static class AwsEcsLaunchtypeValues
        {
            /// <summary>
            /// ec2.
            /// </summary>
            public const string Ec2 = "ec2";

            /// <summary>
            /// fargate.
            /// </summary>
            public const string Fargate = "fargate";
        }

        /// <summary>
        /// Parent-child Reference type.
        /// </summary>
        public static class OpentracingRefTypeValues
        {
            /// <summary>
            /// The parent Span depends on the child Span in some capacity.
            /// </summary>
            public const string ChildOf = "child_of";

            /// <summary>
            /// The parent Span doesn't depend in any way on the result of the child Span.
            /// </summary>
            public const string FollowsFrom = "follows_from";
        }

        /// <summary>
        /// Name of the code, either &quot;OK&quot; or &quot;ERROR&quot;. MUST NOT be set if the status code is UNSET.
        /// </summary>
        public static class OtelStatusCodeValues
        {
            /// <summary>
            /// The operation has been validated by an Application developer or Operator to have completed successfully.
            /// </summary>
            public const string Ok = "OK";

            /// <summary>
            /// The operation contains an error.
            /// </summary>
            public const string Error = "ERROR";
        }

        /// <summary>
        /// The type of the operation being executed.
        /// </summary>
        public static class GraphqlOperationTypeValues
        {
            /// <summary>
            /// GraphQL query.
            /// </summary>
            public const string Query = "query";

            /// <summary>
            /// GraphQL mutation.
            /// </summary>
            public const string Mutation = "mutation";

            /// <summary>
            /// GraphQL subscription.
            /// </summary>
            public const string Subscription = "subscription";
        }

        /// <summary>
        /// Whether this is a received or sent message.
        /// </summary>
        public static class MessageTypeValues
        {
            /// <summary>
            /// sent.
            /// </summary>
            public const string Sent = "SENT";

            /// <summary>
            /// received.
            /// </summary>
            public const string Received = "RECEIVED";
        }
    }
}
