//HintName: OtelAttributes.Db.AttributeValues.g.cs

// <auto-generated>
namespace OpenTelemetry.SemanticConventions;

#pragma warning disable CS0618
#pragma warning disable CS8981
internal partial struct Db
{
    internal partial struct db
    {
    internal partial struct cassandra
    {
        /// <summary>
        /// Deprecated, use `cassandra.consistency.level` instead.
        /// </summary>
        internal enum consistency_levels
        {
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            all,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            each_quorum,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            quorum,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            local_quorum,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            one,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            two,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            three,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            local_one,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            any,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            serial,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `cassandra.consistency.level`.")]
            local_serial,
    }
    }
    }
    internal partial struct db
    {
    internal partial struct client
    {
    internal partial struct connection
    {
        /// <summary>
        /// The state of a connection in the pool
        /// </summary>
        internal enum states
        {
            /// <summary>
            /// none
            /// </summary>
            idle,
            /// <summary>
            /// none
            /// </summary>
            used,
    }
    }
    }
    }
    internal partial struct db
    {
    internal partial struct client
    {
    internal partial struct connections
    {
        /// <summary>
        /// Deprecated, use `db.client.connection.state` instead.
        /// </summary>
        internal enum states
        {
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `db.client.connection.state`.")]
            idle,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `db.client.connection.state`.")]
            used,
    }
    }
    }
    }
    internal partial struct db
    {
    internal partial struct cosmosdb
    {
        /// <summary>
        /// Deprecated, use `azure.cosmosdb.connection.mode` instead.
        /// </summary>
        internal enum connection_modes
        {
            /// <summary>
            /// Gateway (HTTP) connection.
            /// </summary>
            [System.Obsolete(" Replaced by `azure.cosmosdb.connection.mode`.")]
            gateway,
            /// <summary>
            /// Direct connection.
            /// </summary>
            [System.Obsolete(" Replaced by `azure.cosmosdb.connection.mode`.")]
            direct,
    }
    }
    }
    internal partial struct db
    {
    internal partial struct cosmosdb
    {
        /// <summary>
        /// Deprecated, use `cosmosdb.consistency.level` instead.
        /// </summary>
        internal enum consistency_levels
        {
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `azure.cosmosdb.consistency.level`.")]
            Strong,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `azure.cosmosdb.consistency.level`.")]
            BoundedStaleness,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `azure.cosmosdb.consistency.level`.")]
            Session,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `azure.cosmosdb.consistency.level`.")]
            Eventual,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" Replaced by `azure.cosmosdb.consistency.level`.")]
            ConsistentPrefix,
    }
    }
    }
    internal partial struct db
    {
    internal partial struct cosmosdb
    {
        /// <summary>
        /// Deprecated, no replacement at this time.
        /// </summary>
        internal enum operation_types
        {
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            batch,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            create,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            delete,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            execute,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            execute_javascript,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            invalid,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            head,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            head_feed,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            patch,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            query,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            query_plan,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            read,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            read_feed,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            replace,
            /// <summary>
            /// none
            /// </summary>
            [System.Obsolete(" No replacement at this time.")]
            upsert,
    }
    }
    }
    internal partial struct db
    {
        /// <summary>
        /// Deprecated, use `db.system.name` instead.
        /// </summary>
        internal enum systems
        {
            /// <summary>
            /// Some other SQL database. Fallback only. See notes.
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            other_sql,
            /// <summary>
            /// Adabas (Adaptable Database System)
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            adabas,
            /// <summary>
            /// Deprecated, use `intersystems_cache` instead.
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            cache,
            /// <summary>
            /// InterSystems Caché
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            intersystems_cache,
            /// <summary>
            /// Apache Cassandra
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            cassandra,
            /// <summary>
            /// ClickHouse
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            clickhouse,
            /// <summary>
            /// Deprecated, use `other_sql` instead.
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            cloudscape,
            /// <summary>
            /// CockroachDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            cockroachdb,
            /// <summary>
            /// Deprecated, no replacement at this time.
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            coldfusion,
            /// <summary>
            /// Microsoft Azure Cosmos DB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            cosmosdb,
            /// <summary>
            /// Couchbase
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            couchbase,
            /// <summary>
            /// CouchDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            couchdb,
            /// <summary>
            /// IBM Db2
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            db2,
            /// <summary>
            /// Apache Derby
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            derby,
            /// <summary>
            /// Amazon DynamoDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            dynamodb,
            /// <summary>
            /// EnterpriseDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            edb,
            /// <summary>
            /// Elasticsearch
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            elasticsearch,
            /// <summary>
            /// FileMaker
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            filemaker,
            /// <summary>
            /// Firebird
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            firebird,
            /// <summary>
            /// Deprecated, use `other_sql` instead.
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            firstsql,
            /// <summary>
            /// Apache Geode
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            geode,
            /// <summary>
            /// H2
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            h2,
            /// <summary>
            /// SAP HANA
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            hanadb,
            /// <summary>
            /// Apache HBase
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            hbase,
            /// <summary>
            /// Apache Hive
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            hive,
            /// <summary>
            /// HyperSQL DataBase
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            hsqldb,
            /// <summary>
            /// InfluxDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            influxdb,
            /// <summary>
            /// Informix
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            informix,
            /// <summary>
            /// Ingres
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            ingres,
            /// <summary>
            /// InstantDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            instantdb,
            /// <summary>
            /// InterBase
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            interbase,
            /// <summary>
            /// MariaDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            mariadb,
            /// <summary>
            /// SAP MaxDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            maxdb,
            /// <summary>
            /// Memcached
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            memcached,
            /// <summary>
            /// MongoDB
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            mongodb,
            /// <summary>
            /// Microsoft SQL Server
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            mssql,
            /// <summary>
            /// Deprecated, Microsoft SQL Server Compact is discontinued.
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            mssqlcompact,
            /// <summary>
            /// MySQL
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            mysql,
            /// <summary>
            /// Neo4j
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            neo4j,
            /// <summary>
            /// Netezza
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            netezza,
            /// <summary>
            /// OpenSearch
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            opensearch,
            /// <summary>
            /// Oracle Database
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            oracle,
            /// <summary>
            /// Pervasive PSQL
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            pervasive,
            /// <summary>
            /// PointBase
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            pointbase,
            /// <summary>
            /// PostgreSQL
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            postgresql,
            /// <summary>
            /// Progress Database
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            progress,
            /// <summary>
            /// Redis
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            redis,
            /// <summary>
            /// Amazon Redshift
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            redshift,
            /// <summary>
            /// Cloud Spanner
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            spanner,
            /// <summary>
            /// SQLite
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            sqlite,
            /// <summary>
            /// Sybase
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            sybase,
            /// <summary>
            /// Teradata
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            teradata,
            /// <summary>
            /// Trino
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            trino,
            /// <summary>
            /// Vertica
            /// </summary>
            [System.Obsolete(" Replaced by `db.system.name`.")]
            vertica,
    }
    }
    internal partial struct db
    {
    internal partial struct system
    {
        /// <summary>
        /// The database management system (DBMS) product as identified by the client instrumentation.
        /// </summary>
        internal enum names
        {
            /// <summary>
            /// Some other SQL database. Fallback only.
            /// </summary>
            other_sql,
            /// <summary>
            /// [Adabas (Adaptable Database System)](https://documentation.softwareag.com/?pf=adabas)
            /// </summary>
            softwareagadabas,
            /// <summary>
            /// [Actian Ingres](https://www.actian.com/databases/ingres/)
            /// </summary>
            actianingres,
            /// <summary>
            /// [Amazon DynamoDB](https://aws.amazon.com/pm/dynamodb/)
            /// </summary>
            awsdynamodb,
            /// <summary>
            /// [Amazon Redshift](https://aws.amazon.com/redshift/)
            /// </summary>
            awsredshift,
            /// <summary>
            /// [Azure Cosmos DB](https://learn.microsoft.com/azure/cosmos-db)
            /// </summary>
            azurecosmosdb,
            /// <summary>
            /// [InterSystems Caché](https://www.intersystems.com/products/cache/)
            /// </summary>
            intersystemscache,
            /// <summary>
            /// [Apache Cassandra](https://cassandra.apache.org/)
            /// </summary>
            cassandra,
            /// <summary>
            /// [ClickHouse](https://clickhouse.com/)
            /// </summary>
            clickhouse,
            /// <summary>
            /// [CockroachDB](https://www.cockroachlabs.com/)
            /// </summary>
            cockroachdb,
            /// <summary>
            /// [Couchbase](https://www.couchbase.com/)
            /// </summary>
            couchbase,
            /// <summary>
            /// [Apache CouchDB](https://couchdb.apache.org/)
            /// </summary>
            couchdb,
            /// <summary>
            /// [Apache Derby](https://db.apache.org/derby/)
            /// </summary>
            derby,
            /// <summary>
            /// [Elasticsearch](https://www.elastic.co/elasticsearch)
            /// </summary>
            elasticsearch,
            /// <summary>
            /// [Firebird](https://www.firebirdsql.org/)
            /// </summary>
            firebirdsql,
            /// <summary>
            /// [Google Cloud Spanner](https://cloud.google.com/spanner)
            /// </summary>
            gcpspanner,
            /// <summary>
            /// [Apache Geode](https://geode.apache.org/)
            /// </summary>
            geode,
            /// <summary>
            /// [H2 Database](https://h2database.com/)
            /// </summary>
            h2database,
            /// <summary>
            /// [Apache HBase](https://hbase.apache.org/)
            /// </summary>
            hbase,
            /// <summary>
            /// [Apache Hive](https://hive.apache.org/)
            /// </summary>
            hive,
            /// <summary>
            /// [HyperSQL Database](https://hsqldb.org/)
            /// </summary>
            hsqldb,
            /// <summary>
            /// [IBM Db2](https://www.ibm.com/db2)
            /// </summary>
            ibmdb2,
            /// <summary>
            /// [IBM Informix](https://www.ibm.com/products/informix)
            /// </summary>
            ibminformix,
            /// <summary>
            /// [IBM Netezza](https://www.ibm.com/products/netezza)
            /// </summary>
            ibmnetezza,
            /// <summary>
            /// [InfluxDB](https://www.influxdata.com/)
            /// </summary>
            influxdb,
            /// <summary>
            /// [Instant](https://www.instantdb.com/)
            /// </summary>
            instantdb,
            /// <summary>
            /// [MariaDB](https://mariadb.org/)
            /// </summary>
            mariadb,
            /// <summary>
            /// [Memcached](https://memcached.org/)
            /// </summary>
            memcached,
            /// <summary>
            /// [MongoDB](https://www.mongodb.com/)
            /// </summary>
            mongodb,
            /// <summary>
            /// [Microsoft SQL Server](https://www.microsoft.com/sql-server)
            /// </summary>
            microsoftsql_server,
            /// <summary>
            /// [MySQL](https://www.mysql.com/)
            /// </summary>
            mysql,
            /// <summary>
            /// [Neo4j](https://neo4j.com/)
            /// </summary>
            neo4j,
            /// <summary>
            /// [OpenSearch](https://opensearch.org/)
            /// </summary>
            opensearch,
            /// <summary>
            /// [Oracle Database](https://www.oracle.com/database/)
            /// </summary>
            oracledb,
            /// <summary>
            /// [PostgreSQL](https://www.postgresql.org/)
            /// </summary>
            postgresql,
            /// <summary>
            /// [Redis](https://redis.io/)
            /// </summary>
            redis,
            /// <summary>
            /// [SAP HANA](https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html)
            /// </summary>
            saphana,
            /// <summary>
            /// [SAP MaxDB](https://maxdb.sap.com/)
            /// </summary>
            sapmaxdb,
            /// <summary>
            /// [SQLite](https://www.sqlite.org/)
            /// </summary>
            sqlite,
            /// <summary>
            /// [Teradata](https://www.teradata.com/)
            /// </summary>
            teradata,
            /// <summary>
            /// [Trino](https://trino.io/)
            /// </summary>
            trino,
    }
    }
    }
}

internal static partial class DbExtensions
{
    internal static string ToAttributeValue(this Db.db.cassandra.consistency_levels consistency_levels)
        => consistency_levels switch
        {
          Db.db.cassandra.consistency_levels.all => "all",
          Db.db.cassandra.consistency_levels.each_quorum => "each_quorum",
          Db.db.cassandra.consistency_levels.quorum => "quorum",
          Db.db.cassandra.consistency_levels.local_quorum => "local_quorum",
          Db.db.cassandra.consistency_levels.one => "one",
          Db.db.cassandra.consistency_levels.two => "two",
          Db.db.cassandra.consistency_levels.three => "three",
          Db.db.cassandra.consistency_levels.local_one => "local_one",
          Db.db.cassandra.consistency_levels.any => "any",
          Db.db.cassandra.consistency_levels.serial => "serial",
          Db.db.cassandra.consistency_levels.local_serial => "local_serial",
          _ => throw new System.ArgumentOutOfRangeException(nameof(consistency_levels), consistency_levels, null),
        };
    internal static string ToAttributeValue(this Db.db.client.connection.states states)
        => states switch
        {
          Db.db.client.connection.states.idle => "idle",
          Db.db.client.connection.states.used => "used",
          _ => throw new System.ArgumentOutOfRangeException(nameof(states), states, null),
        };
    internal static string ToAttributeValue(this Db.db.client.connections.states states)
        => states switch
        {
          Db.db.client.connections.states.idle => "idle",
          Db.db.client.connections.states.used => "used",
          _ => throw new System.ArgumentOutOfRangeException(nameof(states), states, null),
        };
    internal static string ToAttributeValue(this Db.db.cosmosdb.connection_modes connection_modes)
        => connection_modes switch
        {
          Db.db.cosmosdb.connection_modes.gateway => "gateway",
          Db.db.cosmosdb.connection_modes.direct => "direct",
          _ => throw new System.ArgumentOutOfRangeException(nameof(connection_modes), connection_modes, null),
        };
    internal static string ToAttributeValue(this Db.db.cosmosdb.consistency_levels consistency_levels)
        => consistency_levels switch
        {
          Db.db.cosmosdb.consistency_levels.Strong => "Strong",
          Db.db.cosmosdb.consistency_levels.BoundedStaleness => "BoundedStaleness",
          Db.db.cosmosdb.consistency_levels.Session => "Session",
          Db.db.cosmosdb.consistency_levels.Eventual => "Eventual",
          Db.db.cosmosdb.consistency_levels.ConsistentPrefix => "ConsistentPrefix",
          _ => throw new System.ArgumentOutOfRangeException(nameof(consistency_levels), consistency_levels, null),
        };
    internal static string ToAttributeValue(this Db.db.cosmosdb.operation_types operation_types)
        => operation_types switch
        {
          Db.db.cosmosdb.operation_types.batch => "batch",
          Db.db.cosmosdb.operation_types.create => "create",
          Db.db.cosmosdb.operation_types.delete => "delete",
          Db.db.cosmosdb.operation_types.execute => "execute",
          Db.db.cosmosdb.operation_types.execute_javascript => "execute_javascript",
          Db.db.cosmosdb.operation_types.invalid => "invalid",
          Db.db.cosmosdb.operation_types.head => "head",
          Db.db.cosmosdb.operation_types.head_feed => "head_feed",
          Db.db.cosmosdb.operation_types.patch => "patch",
          Db.db.cosmosdb.operation_types.query => "query",
          Db.db.cosmosdb.operation_types.query_plan => "query_plan",
          Db.db.cosmosdb.operation_types.read => "read",
          Db.db.cosmosdb.operation_types.read_feed => "read_feed",
          Db.db.cosmosdb.operation_types.replace => "replace",
          Db.db.cosmosdb.operation_types.upsert => "upsert",
          _ => throw new System.ArgumentOutOfRangeException(nameof(operation_types), operation_types, null),
        };
    internal static string ToAttributeValue(this Db.db.systems systems)
        => systems switch
        {
          Db.db.systems.other_sql => "other_sql",
          Db.db.systems.adabas => "adabas",
          Db.db.systems.cache => "cache",
          Db.db.systems.intersystems_cache => "intersystems_cache",
          Db.db.systems.cassandra => "cassandra",
          Db.db.systems.clickhouse => "clickhouse",
          Db.db.systems.cloudscape => "cloudscape",
          Db.db.systems.cockroachdb => "cockroachdb",
          Db.db.systems.coldfusion => "coldfusion",
          Db.db.systems.cosmosdb => "cosmosdb",
          Db.db.systems.couchbase => "couchbase",
          Db.db.systems.couchdb => "couchdb",
          Db.db.systems.db2 => "db2",
          Db.db.systems.derby => "derby",
          Db.db.systems.dynamodb => "dynamodb",
          Db.db.systems.edb => "edb",
          Db.db.systems.elasticsearch => "elasticsearch",
          Db.db.systems.filemaker => "filemaker",
          Db.db.systems.firebird => "firebird",
          Db.db.systems.firstsql => "firstsql",
          Db.db.systems.geode => "geode",
          Db.db.systems.h2 => "h2",
          Db.db.systems.hanadb => "hanadb",
          Db.db.systems.hbase => "hbase",
          Db.db.systems.hive => "hive",
          Db.db.systems.hsqldb => "hsqldb",
          Db.db.systems.influxdb => "influxdb",
          Db.db.systems.informix => "informix",
          Db.db.systems.ingres => "ingres",
          Db.db.systems.instantdb => "instantdb",
          Db.db.systems.interbase => "interbase",
          Db.db.systems.mariadb => "mariadb",
          Db.db.systems.maxdb => "maxdb",
          Db.db.systems.memcached => "memcached",
          Db.db.systems.mongodb => "mongodb",
          Db.db.systems.mssql => "mssql",
          Db.db.systems.mssqlcompact => "mssqlcompact",
          Db.db.systems.mysql => "mysql",
          Db.db.systems.neo4j => "neo4j",
          Db.db.systems.netezza => "netezza",
          Db.db.systems.opensearch => "opensearch",
          Db.db.systems.oracle => "oracle",
          Db.db.systems.pervasive => "pervasive",
          Db.db.systems.pointbase => "pointbase",
          Db.db.systems.postgresql => "postgresql",
          Db.db.systems.progress => "progress",
          Db.db.systems.redis => "redis",
          Db.db.systems.redshift => "redshift",
          Db.db.systems.spanner => "spanner",
          Db.db.systems.sqlite => "sqlite",
          Db.db.systems.sybase => "sybase",
          Db.db.systems.teradata => "teradata",
          Db.db.systems.trino => "trino",
          Db.db.systems.vertica => "vertica",
          _ => throw new System.ArgumentOutOfRangeException(nameof(systems), systems, null),
        };
    internal static string ToAttributeValue(this Db.db.system.names names)
        => names switch
        {
          Db.db.system.names.other_sql => "other_sql",
          Db.db.system.names.softwareagadabas => "softwareag.adabas",
          Db.db.system.names.actianingres => "actian.ingres",
          Db.db.system.names.awsdynamodb => "aws.dynamodb",
          Db.db.system.names.awsredshift => "aws.redshift",
          Db.db.system.names.azurecosmosdb => "azure.cosmosdb",
          Db.db.system.names.intersystemscache => "intersystems.cache",
          Db.db.system.names.cassandra => "cassandra",
          Db.db.system.names.clickhouse => "clickhouse",
          Db.db.system.names.cockroachdb => "cockroachdb",
          Db.db.system.names.couchbase => "couchbase",
          Db.db.system.names.couchdb => "couchdb",
          Db.db.system.names.derby => "derby",
          Db.db.system.names.elasticsearch => "elasticsearch",
          Db.db.system.names.firebirdsql => "firebirdsql",
          Db.db.system.names.gcpspanner => "gcp.spanner",
          Db.db.system.names.geode => "geode",
          Db.db.system.names.h2database => "h2database",
          Db.db.system.names.hbase => "hbase",
          Db.db.system.names.hive => "hive",
          Db.db.system.names.hsqldb => "hsqldb",
          Db.db.system.names.ibmdb2 => "ibm.db2",
          Db.db.system.names.ibminformix => "ibm.informix",
          Db.db.system.names.ibmnetezza => "ibm.netezza",
          Db.db.system.names.influxdb => "influxdb",
          Db.db.system.names.instantdb => "instantdb",
          Db.db.system.names.mariadb => "mariadb",
          Db.db.system.names.memcached => "memcached",
          Db.db.system.names.mongodb => "mongodb",
          Db.db.system.names.microsoftsql_server => "microsoft.sql_server",
          Db.db.system.names.mysql => "mysql",
          Db.db.system.names.neo4j => "neo4j",
          Db.db.system.names.opensearch => "opensearch",
          Db.db.system.names.oracledb => "oracle.db",
          Db.db.system.names.postgresql => "postgresql",
          Db.db.system.names.redis => "redis",
          Db.db.system.names.saphana => "sap.hana",
          Db.db.system.names.sapmaxdb => "sap.maxdb",
          Db.db.system.names.sqlite => "sqlite",
          Db.db.system.names.teradata => "teradata",
          Db.db.system.names.trino => "trino",
          _ => throw new System.ArgumentOutOfRangeException(nameof(names), names, null),
        };}
#pragma warning restore CS8981
#pragma warning restore CS0618
