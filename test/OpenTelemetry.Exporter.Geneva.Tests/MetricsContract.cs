// <auto-generated />

using System.Collections.Generic;
using Kaitai;

namespace OpenTelemetry.Exporter.Geneva.Tests
{
    public partial class MetricsContract : KaitaiStruct
    {
        public static MetricsContract FromFile(string fileName)
        {
            return new MetricsContract(new KaitaiStream(fileName));
        }


        public enum MetricEventType
        {
            Old = 0,
            Uint64Metric = 50,
            DoubleScaledToLongMetric = 51,
            BatchMetric = 52,
            ExternallyAggregatedUlongMetric = 53,
            ExternallyAggregatedDoubleMetric = 54,
            DoubleMetric = 55,
            ExternallyAggregatedUlongDistributionMetric = 56,
            ExternallyAggregatedDoubleDistributionMetric = 57,
            ExternallyAggregatedDoubleScaledToLongDistributionMetric = 58,
        }

        public enum DistributionType
        {
            Bucketed = 0,
            MonBucketed = 1,
            ValueCountPairs = 2,
        }
        public MetricsContract(KaitaiStream p__io, KaitaiStruct p__parent = null, MetricsContract p__root = null)
            : base(p__io)
        {
            this.m_parent = p__parent;
            this.m_root = p__root ?? this;
            this._read();
        }
        private void _read()
        {
            this._eventId = this.m_io.ReadU2le();
            this._lenBody = this.m_io.ReadU2le();
            this.__raw_body = this.m_io.ReadBytes(this.LenBody);
            var io___raw_body = new KaitaiStream(this.__raw_body);
            this._body = new Userdata(this.EventId, io___raw_body, this, this.m_root);
        }

        /// <summary>
        /// This type represents "UserData" or "body" portion of Metrics message.
        /// </summary>
        public partial class Userdata : KaitaiStruct
        {
            public Userdata(ushort p_eventId, KaitaiStream p__io, MetricsContract p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._eventId = p_eventId;
                this.f_eventType = false;
                this._read();
            }
            private void _read()
            {
                this._numDimensions = this.m_io.ReadU2le();
                this._padding = this.m_io.ReadBytes(2);
                switch (this.EventType)
                {
                    case MetricsContract.MetricEventType.ExternallyAggregatedDoubleScaledToLongDistributionMetric:
                        {
                            this._valueSection = new ExtAggregatedDoubleValue(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.MetricEventType.DoubleMetric:
                        {
                            this._valueSection = new SingleDoubleValue(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.MetricEventType.ExternallyAggregatedUlongMetric:
                        {
                            this._valueSection = new ExtAggregatedUint64Value(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.MetricEventType.ExternallyAggregatedUlongDistributionMetric:
                        {
                            this._valueSection = new ExtAggregatedUint64Value(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.MetricEventType.ExternallyAggregatedDoubleDistributionMetric:
                        {
                            this._valueSection = new ExtAggregatedDoubleValue(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.MetricEventType.DoubleScaledToLongMetric:
                        {
                            this._valueSection = new SingleDoubleValue(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.MetricEventType.Uint64Metric:
                        {
                            this._valueSection = new SingleUint64Value(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.MetricEventType.ExternallyAggregatedDoubleMetric:
                        {
                            this._valueSection = new ExtAggregatedDoubleValue(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.MetricEventType.Old:
                        {
                            this._valueSection = new SingleUint64Value(this.m_io, this, this.m_root);
                            break;
                        }
                }
                this._metricAccount = new LenString(this.m_io, this, this.m_root);
                this._metricNamespace = new LenString(this.m_io, this, this.m_root);
                this._metricName = new LenString(this.m_io, this, this.m_root);
                this._dimensionsNames = new List<LenString>((int)this.NumDimensions);
                for (var i = 0; i < this.NumDimensions; i++)
                {
                    this._dimensionsNames.Add(new LenString(this.m_io, this, this.m_root));
                }
                this._dimensionsValues = new List<LenString>((int)this.NumDimensions);
                for (var i = 0; i < this.NumDimensions; i++)
                {
                    this._dimensionsValues.Add(new LenString(this.m_io, this, this.m_root));
                }
                if (!this.M_Io.IsEof)
                {
                    this._apContainer = new LenString(this.m_io, this, this.m_root);
                }
                if (((this.EventType == MetricsContract.MetricEventType.ExternallyAggregatedUlongDistributionMetric) || (this.EventType == MetricsContract.MetricEventType.ExternallyAggregatedDoubleDistributionMetric) || (this.EventType == MetricsContract.MetricEventType.ExternallyAggregatedDoubleScaledToLongDistributionMetric)) && (!this.M_Io.IsEof))
                {
                    this._histogram = new Histogram(this.m_io, this, this.m_root);
                }
            }
            private bool f_eventType;
            private MetricEventType _eventType;
            public MetricEventType EventType
            {
                get
                {
                    if (this.f_eventType)
                        return this._eventType;
                    this._eventType = (MetricEventType)(MetricsContract.MetricEventType)this.EventId;
                    this.f_eventType = true;
                    return this._eventType;
                }
            }
            private ushort _numDimensions;
            private byte[] _padding;
            private KaitaiStruct _valueSection;
            private LenString _metricAccount;
            private LenString _metricNamespace;
            private LenString _metricName;
            private List<LenString> _dimensionsNames;
            private List<LenString> _dimensionsValues;
            private LenString _apContainer;
            private Histogram _histogram;
            private ushort _eventId;
            private MetricsContract m_root;
            private MetricsContract m_parent;

            /// <summary>
            /// Number of dimensions specified in this event.
            /// </summary>
            public ushort NumDimensions { get { return this._numDimensions; } }
            public byte[] Padding { get { return this._padding; } }

            /// <summary>
            /// Value section of the body, stores fixed numeric metric value(s), as per event type.
            /// </summary>
            public KaitaiStruct ValueSection { get { return this._valueSection; } }

            /// <summary>
            /// Geneva Metrics account name to be used for this metric.
            /// </summary>
            public LenString MetricAccount { get { return this._metricAccount; } }

            /// <summary>
            /// Geneva Metrics namespace name to be used for this metric.
            /// </summary>
            public LenString MetricNamespace { get { return this._metricNamespace; } }

            /// <summary>
            /// Geneva Metrics metric name to be used.
            /// </summary>
            public LenString MetricName { get { return this._metricName; } }

            /// <summary>
            /// Dimension names strings ("key" parts of key-value pairs). Must be sorted,
            /// unless MetricsExtenion's option `enableDimensionSortingOnIngestion` is
            /// enabled.
            /// </summary>
            public List<LenString> DimensionsNames { get { return this._dimensionsNames; } }

            /// <summary>
            /// Dimension values strings ("value" parts of key-value pairs).
            /// </summary>
            public List<LenString> DimensionsValues { get { return this._dimensionsValues; } }

            /// <summary>
            /// AutoPilot container string, required for correct AP PKI certificate loading
            /// in AutoPilot containers environment.
            /// </summary>
            public LenString ApContainer { get { return this._apContainer; } }
            public Histogram Histogram { get { return this._histogram; } }

            /// <summary>
            /// Type of message, affects format of the body.
            /// </summary>
            public ushort EventId { get { return this._eventId; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract M_Parent { get { return this.m_parent; } }
        }

        /// <summary>
        /// Bucket with an explicitly-defined value coordinate `value`, claiming to
        /// hold `count` hits. Normally used to represent non-linear (e.g. exponential)
        /// histograms payloads.
        /// </summary>
        public partial class PairValueCount : KaitaiStruct
        {
            public static PairValueCount FromFile(string fileName)
            {
                return new PairValueCount(new KaitaiStream(fileName));
            }

            public PairValueCount(KaitaiStream p__io, MetricsContract.HistogramValueCountPairs p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._value = this.m_io.ReadU8le();
                this._count = this.m_io.ReadU4le();
            }
            private ulong _value;
            private uint _count;
            private MetricsContract m_root;
            private MetricsContract.HistogramValueCountPairs m_parent;
            public ulong Value { get { return this._value; } }
            public uint Count { get { return this._count; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.HistogramValueCountPairs M_Parent { get { return this.m_parent; } }
        }

        /// <summary>
        /// Payload of a histogram with linear distribution of buckets. Such histogram
        /// is defined by the parameters specified in `min`, `bucket_size` and
        /// `bucket_count`. It is modelled as a series of buckets. First (index 0) and
        /// last (indexed `bucket_count - 1`) buckets are special and are supposed to
        /// catch all "underflow" and "overflow" values. Buckets with indexes 1 up to
        /// `bucket_count - 2` are regular buckets of size `bucket_size`.
        /// </summary>
        public partial class HistogramUint16Bucketed : KaitaiStruct
        {
            public static HistogramUint16Bucketed FromFile(string fileName)
            {
                return new HistogramUint16Bucketed(new KaitaiStream(fileName));
            }

            public HistogramUint16Bucketed(KaitaiStream p__io, MetricsContract.Histogram p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._min = this.m_io.ReadU8le();
                this._bucketSize = this.m_io.ReadU4le();
                this._bucketCount = this.m_io.ReadU4le();
                this._distributionSize = this.m_io.ReadU2le();
                this._columns = new List<PairUint16>((int)this.DistributionSize);
                for (var i = 0; i < this.DistributionSize; i++)
                {
                    this._columns.Add(new PairUint16(this.m_io, this, this.m_root));
                }
            }
            private ulong _min;
            private uint _bucketSize;
            private uint _bucketCount;
            private ushort _distributionSize;
            private List<PairUint16> _columns;
            private MetricsContract m_root;
            private MetricsContract.Histogram m_parent;
            public ulong Min { get { return this._min; } }
            public uint BucketSize { get { return this._bucketSize; } }
            public uint BucketCount { get { return this._bucketCount; } }
            public ushort DistributionSize { get { return this._distributionSize; } }
            public List<PairUint16> Columns { get { return this._columns; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.Histogram M_Parent { get { return this.m_parent; } }
        }
        public partial class HistogramValueCountPairs : KaitaiStruct
        {
            public static HistogramValueCountPairs FromFile(string fileName)
            {
                return new HistogramValueCountPairs(new KaitaiStream(fileName));
            }

            public HistogramValueCountPairs(KaitaiStream p__io, MetricsContract.Histogram p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._distributionSize = this.m_io.ReadU2le();
                this._columns = new List<PairValueCount>((int)this.DistributionSize);
                for (var i = 0; i < this.DistributionSize; i++)
                {
                    this._columns.Add(new PairValueCount(this.m_io, this, this.m_root));
                }
            }
            private ushort _distributionSize;
            private List<PairValueCount> _columns;
            private MetricsContract m_root;
            private MetricsContract.Histogram m_parent;
            public ushort DistributionSize { get { return this._distributionSize; } }
            public List<PairValueCount> Columns { get { return this._columns; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.Histogram M_Parent { get { return this.m_parent; } }
        }
        public partial class Histogram : KaitaiStruct
        {
            public static Histogram FromFile(string fileName)
            {
                return new Histogram(new KaitaiStream(fileName));
            }

            public Histogram(KaitaiStream p__io, MetricsContract.Userdata p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._version = this.m_io.ReadU1();
                this._type = (MetricsContract.DistributionType)this.m_io.ReadU1();
                switch (this.Type)
                {
                    case MetricsContract.DistributionType.Bucketed:
                        {
                            this._body = new HistogramUint16Bucketed(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.DistributionType.MonBucketed:
                        {
                            this._body = new HistogramUint16Bucketed(this.m_io, this, this.m_root);
                            break;
                        }
                    case MetricsContract.DistributionType.ValueCountPairs:
                        {
                            this._body = new HistogramValueCountPairs(this.m_io, this, this.m_root);
                            break;
                        }
                }
            }
            private byte _version;
            private DistributionType _type;
            private KaitaiStruct _body;
            private MetricsContract m_root;
            private MetricsContract.Userdata m_parent;
            public byte Version { get { return this._version; } }
            public DistributionType Type { get { return this._type; } }
            public KaitaiStruct Body { get { return this._body; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.Userdata M_Parent { get { return this.m_parent; } }
        }

        /// <summary>
        /// Bucket #index, claiming to hold exactly `count` hits. See notes in
        /// `histogram_uint16_bucketed` for interpreting index.
        /// </summary>
        public partial class PairUint16 : KaitaiStruct
        {
            public static PairUint16 FromFile(string fileName)
            {
                return new PairUint16(new KaitaiStream(fileName));
            }

            public PairUint16(KaitaiStream p__io, MetricsContract.HistogramUint16Bucketed p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._index = this.m_io.ReadU2le();
                this._count = this.m_io.ReadU2le();
            }
            private ushort _index;
            private ushort _count;
            private MetricsContract m_root;
            private MetricsContract.HistogramUint16Bucketed m_parent;
            public ushort Index { get { return this._index; } }
            public ushort Count { get { return this._count; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.HistogramUint16Bucketed M_Parent { get { return this.m_parent; } }
        }
        public partial class SingleUint64Value : KaitaiStruct
        {
            public static SingleUint64Value FromFile(string fileName)
            {
                return new SingleUint64Value(new KaitaiStream(fileName));
            }

            public SingleUint64Value(KaitaiStream p__io, MetricsContract.Userdata p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._padding = this.m_io.ReadBytes(4);
                this._timestamp = this.m_io.ReadU8le();
                this._value = this.m_io.ReadU8le();
            }
            private byte[] _padding;
            private ulong _timestamp;
            private ulong _value;
            private MetricsContract m_root;
            private MetricsContract.Userdata m_parent;
            public byte[] Padding { get { return this._padding; } }

            /// <summary>
            /// Timestamp in Windows FILETIME format, i.e. number of 100 ns ticks passed since 1601-01-01 00:00:00 UTC.
            /// </summary>
            public ulong Timestamp { get { return this._timestamp; } }

            /// <summary>
            /// Metric value as 64-bit unsigned integer.
            /// </summary>
            public ulong Value { get { return this._value; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.Userdata M_Parent { get { return this.m_parent; } }
        }
        public partial class ExtAggregatedDoubleValue : KaitaiStruct
        {
            public static ExtAggregatedDoubleValue FromFile(string fileName)
            {
                return new ExtAggregatedDoubleValue(new KaitaiStream(fileName));
            }

            public ExtAggregatedDoubleValue(KaitaiStream p__io, MetricsContract.Userdata p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._count = this.m_io.ReadU4le();
                this._timestamp = this.m_io.ReadU8le();
                this._sum = this.m_io.ReadF8le();
                this._min = this.m_io.ReadF8le();
                this._max = this.m_io.ReadF8le();
            }
            private uint _count;
            private ulong _timestamp;
            private double _sum;
            private double _min;
            private double _max;
            private MetricsContract m_root;
            private MetricsContract.Userdata m_parent;

            /// <summary>
            /// Count of events aggregated in this event.
            /// </summary>
            public uint Count { get { return this._count; } }

            /// <summary>
            /// Timestamp in Windows FILETIME format, i.e. number of 100 ns ticks passed since 1601-01-01 00:00:00 UTC.
            /// </summary>
            public ulong Timestamp { get { return this._timestamp; } }

            /// <summary>
            /// Sum of all metric values aggregated in this event.
            /// </summary>
            public double Sum { get { return this._sum; } }

            /// <summary>
            /// Minimum of all metric values aggregated in this event.
            /// </summary>
            public double Min { get { return this._min; } }

            /// <summary>
            /// Maximum of all metric values aggregated in this event.
            /// </summary>
            public double Max { get { return this._max; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.Userdata M_Parent { get { return this.m_parent; } }
        }
        public partial class ExtAggregatedUint64Value : KaitaiStruct
        {
            public static ExtAggregatedUint64Value FromFile(string fileName)
            {
                return new ExtAggregatedUint64Value(new KaitaiStream(fileName));
            }

            public ExtAggregatedUint64Value(KaitaiStream p__io, MetricsContract.Userdata p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._count = this.m_io.ReadU4le();
                this._timestamp = this.m_io.ReadU8le();
                this._sum = this.m_io.ReadU8le();
                this._min = this.m_io.ReadU8le();
                this._max = this.m_io.ReadU8le();
            }
            private uint _count;
            private ulong _timestamp;
            private ulong _sum;
            private ulong _min;
            private ulong _max;
            private MetricsContract m_root;
            private MetricsContract.Userdata m_parent;

            /// <summary>
            /// Count of events aggregated in this event.
            /// </summary>
            public uint Count { get { return this._count; } }

            /// <summary>
            /// Timestamp in Windows FILETIME format, i.e. number of 100 ns ticks passed since 1601-01-01 00:00:00 UTC.
            /// </summary>
            public ulong Timestamp { get { return this._timestamp; } }

            /// <summary>
            /// Sum of all metric values aggregated in this event.
            /// </summary>
            public ulong Sum { get { return this._sum; } }

            /// <summary>
            /// Minimum of all metric values aggregated in this event.
            /// </summary>
            public ulong Min { get { return this._min; } }

            /// <summary>
            /// Maximum of all metric values aggregated in this event.
            /// </summary>
            public ulong Max { get { return this._max; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.Userdata M_Parent { get { return this.m_parent; } }
        }
        public partial class SingleDoubleValue : KaitaiStruct
        {
            public static SingleDoubleValue FromFile(string fileName)
            {
                return new SingleDoubleValue(new KaitaiStream(fileName));
            }

            public SingleDoubleValue(KaitaiStream p__io, MetricsContract.Userdata p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._padding = this.m_io.ReadBytes(4);
                this._timestamp = this.m_io.ReadU8le();
                this._value = this.m_io.ReadF8le();
            }
            private byte[] _padding;
            private ulong _timestamp;
            private double _value;
            private MetricsContract m_root;
            private MetricsContract.Userdata m_parent;
            public byte[] Padding { get { return this._padding; } }

            /// <summary>
            /// Timestamp in Windows FILETIME format, i.e. number of 100 ns ticks passed since 1601-01-01 00:00:00 UTC.
            /// </summary>
            public ulong Timestamp { get { return this._timestamp; } }

            /// <summary>
            /// Metric value as double.
            /// </summary>
            public double Value { get { return this._value; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.Userdata M_Parent { get { return this.m_parent; } }
        }

        /// <summary>
        /// A simple string, length-prefixed with a 2-byte integer.
        /// </summary>
        public partial class LenString : KaitaiStruct
        {
            public static LenString FromFile(string fileName)
            {
                return new LenString(new KaitaiStream(fileName));
            }

            public LenString(KaitaiStream p__io, MetricsContract.Userdata p__parent = null, MetricsContract p__root = null)
                : base(p__io)
            {
                this.m_parent = p__parent;
                this.m_root = p__root;
                this._read();
            }
            private void _read()
            {
                this._lenValue = this.m_io.ReadU2le();
                this._value = System.Text.Encoding.GetEncoding("UTF-8").GetString(this.m_io.ReadBytes(this.LenValue));
            }
            private ushort _lenValue;
            private string _value;
            private MetricsContract m_root;
            private MetricsContract.Userdata m_parent;
            public ushort LenValue { get { return this._lenValue; } }
            public string Value { get { return this._value; } }
            public MetricsContract M_Root { get { return this.m_root; } }
            public MetricsContract.Userdata M_Parent { get { return this.m_parent; } }
        }
        private ushort _eventId;
        private ushort _lenBody;
        private Userdata _body;
        private MetricsContract m_root;
        private KaitaiStruct m_parent;
        private byte[] __raw_body;

        /// <summary>
        /// Type of message, affects format of the body.
        /// </summary>
        public ushort EventId { get { return this._eventId; } }

        /// <summary>
        /// Size of body in bytes.
        /// </summary>
        public ushort LenBody { get { return this._lenBody; } }

        /// <summary>
        /// Body of Metrics binary protocol message.
        /// </summary>
        public Userdata Body { get { return this._body; } }
        public MetricsContract M_Root { get { return this.m_root; } }
        public KaitaiStruct M_Parent { get { return this.m_parent; } }
        public byte[] M_RawBody { get { return this.__raw_body; } }
    }
}
