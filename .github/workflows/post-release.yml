name: Complete release

on:
  workflow_dispatch:
    inputs:
      tag:
        required: true
        description: 'Release tag'
        type: string
  release:
    types: [published]

permissions:
  contents: read

jobs:
  automation:
    uses: ./.github/workflows/automation.yml
    secrets:
      OTELBOT_DOTNET_CONTRIB_PRIVATE_KEY: ${{ secrets.OTELBOT_DOTNET_CONTRIB_PRIVATE_KEY }}

  post-release:
    runs-on: ubuntu-24.04

    needs:
    - automation

    if: needs.automation.outputs.enabled

    steps:
    - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
      id: otelbot-token
      with:
        app-id: ${{ vars.OTELBOT_DOTNET_CONTRIB_APP_ID }}
        private-key: ${{ secrets.OTELBOT_DOTNET_CONTRIB_PRIVATE_KEY }}

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        # Note: By default GitHub only fetches 1 commit. We need all the tags
        # for this work.
        fetch-depth: 0
        ref: ${{ github.event.repository.default_branch }}
        token: ${{ steps.otelbot-token.outputs.token }}

    - name: Create GitHub Pull Request to update PackageValidationBaselineVersion in projects
      if: |
        (github.ref_type == 'tag' && !contains(github.ref_name, '-alpha') && !contains(github.ref_name, '-beta') && !contains(github.ref_name, '-rc')) ||
        (inputs.tag && !contains(inputs.tag, '-alpha') && !contains(inputs.tag, '-beta') && !contains(inputs.tag, '-rc'))
      shell: pwsh
      env:
        GH_TOKEN: ${{ steps.otelbot-token.outputs.token }}
        BOT_USER_EMAIL: ${{ needs.automation.outputs.email }}
        BOT_USER_NAME: ${{ needs.automation.outputs.username }}
        TARGET_BRANCH: ${{ github.event.repository.default_branch }}
        TAG: ${{ inputs.tag || github.ref_name }}
      run: |
        Import-Module .\build\scripts\post-release.psm1

        CreatePackageValidationBaselineVersionUpdatePullRequest `
          -gitRepository ${env:GITHUB_REPOSITORY} `
          -tag ${env:TAG} `
          -targetBranch ${env:TARGET_BRANCH} `
          -gitUserName ${env:BOT_USER_NAME} `
          -gitUserEmail ${env:BOT_USER_EMAIL}
