name: sync-sql-tests

on:
  schedule:
    - cron: '0 4 * * MON'
  workflow_dispatch:

permissions: {}

jobs:
  sync-sql-tests:
    runs-on: ubuntu-latest
    if: github.event.repository.fork == false

    steps:

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          filter: 'tree:0'
          persist-credentials: true
          show-progress: false
          token: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}

      - name: Update SQL test cases from open-telemetry/semantic-conventions
        id: update-sql-tests
        shell: pwsh
        env:
          GIT_COMMIT_USER_EMAIL: ${{ vars.AUTOMATION_EMAIL }}
          GIT_COMMIT_USER_NAME: ${{ vars.AUTOMATION_USERNAME }}
        run: |
          $ErrorActionPreference = "Stop"
          $ProgressPreference = "SilentlyContinue"

          $UpstreamBranch = "main"
          $UpstreamPath = "docs/non-normative/database-test-cases/db-sql-test-cases.json"
          $UpstreamRepository = "open-telemetry/semantic-conventions"

          $SqlTestsJsonUri = "https://raw.githubusercontent.com/${UpstreamRepository}/refs/heads/${UpstreamBranch}/${UpstreamPath}"
          $SqlTestsJsonFileName = (Join-Path "." "test" "OpenTelemetry.Contrib.Shared.Tests" "SqlProcessorTestCases.json")

          Invoke-WebRequest -Uri $SqlTestsJsonUri -OutFile $SqlTestsJsonFileName | Out-Null

          $GitStatus = (git status --porcelain)

          if ([string]::IsNullOrEmpty($GitStatus)) {
            Write-Output "No changes to commit."
            exit 0
          }

          $BranchName = "update-sql-test-cases"

          git config user.email ${env:GIT_COMMIT_USER_EMAIL} | Out-Null
          git config user.name ${env:GIT_COMMIT_USER_NAME} | Out-Null
          git fetch origin --no-tags | Out-Null
          git rev-parse --verify --quiet "remotes/origin/${BranchName}" | Out-Null

          if ($LASTEXITCODE -eq 0) {
            Write-Output "Branch ${BranchName} already exists."
            exit 0
          }

          git checkout -b $BranchName
          git add $SqlTestsJsonFileName
          git commit -m "[Infra] Update SQL test cases`n`nUpdate SQL test cases from ${SqlTestsJsonUri}." -s
          git push -u origin $BranchName

          "content-path=${UpstreamPath}" >> ${env:GITHUB_OUTPUT}
          "origin-branch-name=${BranchName}" >> ${env:GITHUB_OUTPUT}
          "upstream-repo-name=${UpstreamRepository}" >> ${env:GITHUB_OUTPUT}
          "upstream-ref=${UpstreamBranch}" >> ${env:GITHUB_OUTPUT}
          "updated=true" >> ${env:GITHUB_OUTPUT}

      - name: Create pull request
        if: steps.update-sql-tests.outputs.updated == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          BASE_BRANCH_NAME: ${{ github.event.repository.default_branch }}
          HEAD_BRANCH_NAME: ${{ steps.update-sql-tests.outputs.origin-branch-name }}
          UPSTREAM_PATH: ${{ steps.update-sql-tests.outputs.content-path }}
          UPSTREAM_REF: ${{ steps.update-sql-tests.outputs.upstream-ref }}
          UPSTREAM_REPO_NAME: ${{ steps.update-sql-tests.outputs.upstream-repo-name }}
        with:
          github-token: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const workflowUrl = `${process.env.GITHUB_SERVER_URL}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            await github.rest.pulls.create({
              title: 'Update SQL Test Cases',
              owner,
              repo,
              head: process.env.HEAD_BRANCH_NAME,
              base: process.env.BASE_BRANCH_NAME,
              body: [
                `Update SQL test cases from [${process.env.UPSTREAM_REPO_NAME}](${process.env.GITHUB_SERVER_URL}/${process.env.UPSTREAM_REPO_NAME}/blob/${process.env.UPSTREAM_REF}/${process.env.UPSTREAM_PATH}).`,
                '',
                `This pull request was generated by [GitHub Actions](${workflowUrl}).`
              ].join('\n')
            });
