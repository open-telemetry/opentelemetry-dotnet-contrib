name: Build Component

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      run-tests:
        required: false
        default: true
        type: boolean
      code-cov-name:
        required: true
        type: string
      code-cov-prefix:
        default: 'unittests'
        required: false
        type: string
      os-list:
        default: '[ "windows-latest", "ubuntu-22.04" ]'
        required: false
        type: string
      tfm-list:
        default: '[ "net462", "net8.0", "net9.0" ]'
        required: false
        type: string
      test-case-filter:
        required: false
        type: string
      test-require-elevated:
        default: false
        required: false
        type: boolean
      pack:
        default: true
        required: false
        type: boolean

permissions:
  contents: read

jobs:
  build-test:

    strategy:
      fail-fast: false # ensures the entire test matrix is run, even if one permutation fails
      matrix:
        os: ${{ fromJSON(inputs.os-list) }}
        version: ${{ fromJSON(inputs.tfm-list) }}
        exclude:
        - os: ubuntu-22.04
          version: net462
        - os: macos-latest
          version: net462

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        # Note: By default GitHub only fetches 1 commit. MinVer needs to find
        # the version tag which is typically NOT on the first commit so we
        # retrieve them all.
        fetch-depth: 0

    - name: Resolve project
      id: resolve-project
      shell: pwsh
      run: |
        Import-Module .\build\scripts\build.psm1

        # Note: inputs.project-name is either a .proj file or
        # Component[component_name]. The ResolveProject call here parses
        # inputs.project-name into variables we need for build.

        $title = '' # Used for friendly names in action UI
        $project = '' # Actual project passed to dotnet
        $component = '' # Used to tell Component.proj what to build

        ResolveProject `
          -projectNameOrComponentData '${{ inputs.project-name }}' `
          -title ([ref]$title) `
          -project ([ref]$project) `
          -component ([ref]$component)

        echo "title=$title" >> $env:GITHUB_OUTPUT
        echo "project=$project" >> $env:GITHUB_OUTPUT

        $artifactName = $component
        if ([string]::IsNullOrEmpty($artifactName)) {
          $artifactName = $title
          if ($artifactName.EndsWith(".proj")) {
            $artifactName = $artifactName.Substring(0, $artifactName.Length - 5)
          }
        }

        echo "name=$artifactName" >> $env:GITHUB_OUTPUT

        # Note: BUILD_COMPONENT envvar tells Component.proj what to build. Only
        # used if $project ends up Component.proj.
        echo "BUILD_COMPONENT=$component" >> $env:GITHUB_ENV

    - name: Setup previous .NET runtimes
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
      with:
        dotnet-version: |
          8.0.x

    - name: Setup .NET
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1

    - name: dotnet restore ${{ steps.resolve-project.outputs.title }}
      run: dotnet restore ${{ steps.resolve-project.outputs.project }} -p:EnablePackageValidation=true

    - name: dotnet build ${{ steps.resolve-project.outputs.title }}
      run: dotnet build ${{ steps.resolve-project.outputs.project }} --configuration Release --no-restore

    - name: dotnet test ${{ steps.resolve-project.outputs.title }}
      if: ${{ inputs.run-tests }}
      run: >
        ${{ inputs.test-require-elevated && matrix.os != 'windows-latest' && 'sudo -E' || '' }}
        dotnet test ${{ steps.resolve-project.outputs.project }}
        --collect:"Code Coverage"
        --results-directory:TestResults
        --framework ${{ matrix.version }}
        --configuration Release
        --no-restore
        --no-build
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions;report-warnings=false"
        --logger:"junit;LogFilePath=TestResults/junit.xml"
        --filter "${{ inputs.test-case-filter }}"
        -- RunConfiguration.DisableAppDomain=true
        ${{ inputs.test-require-elevated && matrix.os != 'windows-latest' && '&& sudo chmod a+rw ./TestResults' || '' }}

    - name: dotnet pack ${{ steps.resolve-project.outputs.title }}
      if: ${{ matrix.os == 'windows-latest' && inputs.pack }}
      run: dotnet pack ${{ steps.resolve-project.outputs.project }} --configuration Release --no-restore --no-build -p:EnablePackageValidation=true

    - name: Install coverage tool
      if: ${{ inputs.run-tests }}
      run: dotnet tool install -g dotnet-coverage

    - name: Merging test results
      if: ${{ inputs.run-tests && hashFiles('./TestResults/**/*.coverage') != '' }}
      run: dotnet-coverage merge -f cobertura -o ./TestResults/Cobertura.xml ./TestResults/**/*.coverage

    - name: Upload code coverage ${{ inputs.code-cov-prefix }}-${{ inputs.code-cov-name }}
      if: ${{ inputs.run-tests && hashFiles('./TestResults/Cobertura.xml') != '' }}
      uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
      continue-on-error: true # Note: Don't fail for upload failures
      env:
        OS: ${{ matrix.os }}
        TFM: ${{ matrix.version }}
        FILTER: ${{ inputs.test-case-filter }}
        token: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: TestResults/Cobertura.xml
        env_vars: OS,TFM,FILTER
        flags: ${{ inputs.code-cov-prefix }}-${{ inputs.code-cov-name }}
        name: Code Coverage for ${{ inputs.code-cov-prefix }}-${{ inputs.code-cov-name }} on [${{ matrix.os }}.${{ matrix.version }}]
        codecov_yml_path: .github/codecov.yml

    - name: Upload test results  ${{ inputs.code-cov-prefix }}-${{ inputs.code-cov-name }}
      if: ${{ !cancelled() && inputs.run-tests && hashFiles('./**/TestResults/junit.xml') != '' }}
      uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
      with:
        env_vars: OS,TFM,FILTER
        flags: ${{ inputs.code-cov-prefix }}-${{ inputs.code-cov-name }}
        name: Test results for ${{ inputs.code-cov-prefix }}-${{ inputs.code-cov-name }} on [${{ matrix.os }}.${{ matrix.version }}]
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Publish ${{ steps.resolve-project.outputs.name }} NuGet packages to Artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      # Only publish packages from the first job, which should be net462 for Windows in most cases, which is preferred for .NET Framework support
      if: ${{ matrix.os == 'windows-latest' && inputs.pack && strategy.job-index == 0 }}
      with:
        name: ${{ steps.resolve-project.outputs.name }}-packages
        path: ./artifacts/package/release
        if-no-files-found: error
