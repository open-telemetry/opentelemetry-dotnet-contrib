name: Pack Component

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      release-name:
        required: false
        type: string
        default: ''

jobs:
  build-test-pack:
    permissions:
      contents: write

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # fetching all

    - name: Setup dotnet
      uses: actions/setup-dotnet@v4

    - name: dotnet restore build/Projects/${{ inputs.project-name }}.proj
      run: dotnet restore build/Projects/${{ inputs.project-name }}.proj

    - name: dotnet build build/Projects/${{ inputs.project-name }}.proj
      run: dotnet build build/Projects/${{ inputs.project-name }}.proj --configuration Release --no-restore -p:Deterministic=true

    - name: dotnet test build/Projects/${{ inputs.project-name }}.proj
      run: dotnet test build/Projects/${{ inputs.project-name }}.proj --configuration Release --no-restore --no-build

    - name: dotnet pack build/Projects/${{ inputs.project-name }}.proj
      run: dotnet pack build/Projects/${{ inputs.project-name }}.proj --configuration Release --no-restore --no-build

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project-name }}.proj-packages
        path: 'src/*/bin/Release/*.*nupkg'

    - name: Publish NuGets
      run: |
        nuget push src/*/bin/Release/*.nupkg -Source https://api.nuget.org/v3/index.json -ApiKey ${{ secrets.NUGET_TOKEN }} -SymbolApiKey ${{ secrets.NUGET_TOKEN }}

    - name: Create GitHub Release
      shell: pwsh
      run: |
        $packages = (Get-ChildItem -Path src/*/bin/Release/*.nupkg).Name

        $notes = ''
        $firstPackageVersion = ''

        foreach ($package in $packages)
        {
            $match = [regex]::Match($package, '(.*)\.(\d+\.\d+\.\d+.*?)\.nupkg')
            $packageName = $match.Groups[1].Value
            $packageVersion = $match.Groups[2].Value

            if ($firstPackageVersion -eq '')
            {
              $firstPackageVersion = $packageVersion
            }

            $notes +=
        @"
        * NuGet: [$packageName v$packageVersion](https://www.nuget.org/packages/$packageName/$packageVersion)

          See [CHANGELOG](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/src/$packageName/CHANGELOG.md) for details.

        "@
        }

        $releaseName = '${{ inputs.release-name || inputs.project-name }}'

        if ($firstPackageVersion -match '-alpha' -or $firstPackageVersion -match '-beta' -or $firstPackageVersion -match '-rc')
        {
          gh release create ${{ github.ref_name }} `
            --title "$releaseName v$firstPackageVersion" `
            --verify-tag `
            --notes "$notes" `
            --prerelease
        }
        else
        {
          gh release create ${{ github.ref_name }} `
            --title "$releaseName v$firstPackageVersion" `
            --verify-tag `
            --notes "$notes" `
            --latest
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
