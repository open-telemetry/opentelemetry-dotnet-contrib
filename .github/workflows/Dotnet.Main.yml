name: Build Component [Main]

on:
  workflow_call:
    inputs:
      module-name:
        required: true
        type: string
      module-directory:
        required: false
        default: '.'
        type: string
      run-tests:
        required: false
        default: true
        type: boolean
      code-cov-prefix:
        default: 'unittests'
        required: false
        type: string
      os-list:
        default: '[ "windows-latest", "ubuntu-22.04", "macos-latest" ]'
        required: false
        type: string
      test-case-filter:
        required: false
        type: string
      test-require-elevated:
        default: false
        required: false
        type: boolean

jobs:
  run-build-test:

    strategy:
      fail-fast: false # ensures the entire test matrix is run, even if one permutation fails
      matrix:
        os: ${{ fromJSON(inputs.os-list) }}

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash
        working-directory: './${{ inputs.module-directory }}'

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        # Note: By default GitHub only fetches 1 commit. MinVer needs to find
        # the version tag which is typically NOT on the first commit so we
        # retrieve them all.
        fetch-depth: 0

    - name: Setup .NET runtimes
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
      with:
        global-json-file: global.json
        dotnet-version: |
          8.0.x

    - name: dotnet restore ${{ inputs.module-name }}
      run: dotnet restore -p:EnablePackageValidation=true

    - name: dotnet build ${{ inputs.module-name }}
      if: ${{ matrix.os != 'windows-latest' }}
      run: dotnet build --configuration Release --no-restore

    - name: Download build artifacts
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/download-artifact@v4
      with:
        name: build-output

    - name: dotnet test ${{ inputs.module-name }}
      if: ${{ inputs.run-tests }}
      run: >
        dotnet test
        --collect:"Code Coverage;Format=cobertura"
        --results-directory:TestResults
        --configuration Release
        --no-restore
        --no-build
        --logger:"console;verbosity=detailed"
        --logger:"GitHubActions;report-warnings=false"
        --logger:"junit;LogFilePath=../../TestResults/junit.xml"
        --filter "${{ inputs.test-case-filter }}"
        -- RunConfiguration.DisableAppDomain=true

    - name: Upload code coverage ${{ inputs.code-cov-prefix }}-${{ inputs.module-name }}
      if: ${{ inputs.run-tests }}
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
      continue-on-error: true # Note: Don't fail for upload failures
      env:
        OS: ${{ matrix.os }}
        FILTER: ${{ inputs.test-case-filter }}
        token: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: '**/TestResults/**/*Cobertura.xml'
        env_vars: OS,FILTER
        flags: ${{ inputs.code-cov-prefix }}-${{ inputs.module-name }}
        name: Code Coverage for ${{ inputs.code-cov-prefix }}-${{ inputs.module-name }} on [${{ matrix.os }}]
        codecov_yml_path: .github/codecov.yml

    - name: Upload test results  ${{ inputs.code-cov-prefix }}-${{ inputs.module-name }}
      if: ${{ inputs.run-tests }}
      uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
      with:
        files: '**/TestResults/junit.xml'
        env_vars: OS,TFM,FILTER
        flags: ${{ inputs.code-cov-prefix }}-${{ inputs.module-name }}
        name: Test results for ${{ inputs.code-cov-prefix }}-${{ inputs.module-name }} on [${{ matrix.os }}]
        token: ${{ secrets.CODECOV_TOKEN }}
